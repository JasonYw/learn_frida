tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[35;01mr0tracer begin ... ![39;49;00m
[31;01mstart[39;49;00m
[32;11mBegin enumerateClassLoaders ...[39;49;00m
[31;01m continuing :Error: java.lang.ClassNotFoundException: Didn't find class "com.tencent.mm.protocal.MMProtocalJni" on path: DexPathList[[directory "."],nativeLibraryDirectories=[/system/lib, /system/lib]][39;49;00m
[31;01m continuing :Error: java.lang.ClassNotFoundException: com.tencent.mm.protocal.MMProtocalJni[39;49;00m
[31;01mSuccessfully found loader[39;49;00m
[34;01mdalvik.system.PathClassLoader[DexPathList[[zip file "/data/app/com.tencent.mm-WVVV3J3lW-7gol4jHjK-Sw==/base.apk"],nativeLibraryDirectories=[/data/app/com.tencent.mm-WVVV3J3lW-7gol4jHjK-Sw==/lib/arm, /data/app/com.tencent.mm-WVVV3J3lW-7gol4jHjK-Sw==/base.apk!/lib/armeabi-v7a, /system/lib]]][39;49;00m
[31;01mSwitch Classloader Successfully ! [39;49;00m
[31;01mEnumerateClassloader END[39;49;00m
[31;01mBegin Search Class...[39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[30;01mFound Class => com.android.ims.-$$Lambda$ImsManager$Connector$yM9scWJWjDp_h0yrkCgrjFZH5oI[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Connector$yM9scWJWjDp_h0yrkCgrjFZH5oI.get [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Connector$yM9scWJWjDp_h0yrkCgrjFZH5oI.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final int com.android.ims.-$$Lambda$ImsManager$Connector$yM9scWJWjDp_h0yrkCgrjFZH5oI.get()
Tracing public com.android.ims.-$$Lambda$ImsManager$Connector$yM9scWJWjDp_h0yrkCgrjFZH5oI(com.android.ims.ImsManager$Connector)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$szO0o3matefQqo-6NB-dzsr9eCw[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$szO0o3matefQqo-6NB-dzsr9eCw.apply [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$szO0o3matefQqo-6NB-dzsr9eCw.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final java.lang.Object com.android.ims.-$$Lambda$szO0o3matefQqo-6NB-dzsr9eCw.apply(java.lang.Object)
Tracing private com.android.ims.-$$Lambda$szO0o3matefQqo-6NB-dzsr9eCw()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsManager$Connector[39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.getImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.notifyNotReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.notifyReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.retryGetImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.connect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.disconnect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.lambda$new$0$ImsManager$Connector [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.lambda$new$1$ImsManager$Connector [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
static java.util.concurrent.Executor com.android.ims.ImsManager$Connector.access$000(com.android.ims.ImsManager$Connector)
static void com.android.ims.ImsManager$Connector.access$100(com.android.ims.ImsManager$Connector)
static void com.android.ims.ImsManager$Connector.access$200(com.android.ims.ImsManager$Connector)
static java.lang.Object com.android.ims.ImsManager$Connector.access$300(com.android.ims.ImsManager$Connector)
static com.android.ims.ImsManager com.android.ims.ImsManager$Connector.access$400(com.android.ims.ImsManager$Connector)
static void com.android.ims.ImsManager$Connector.access$500(com.android.ims.ImsManager$Connector) throws com.android.ims.ImsException
private void com.android.ims.ImsManager$Connector.getImsService() throws com.android.ims.ImsException
private void com.android.ims.ImsManager$Connector.notifyNotReady()
private void com.android.ims.ImsManager$Connector.notifyReady() throws com.android.ims.ImsException
private void com.android.ims.ImsManager$Connector.retryGetImsService()
public void com.android.ims.ImsManager$Connector.connect()
public void com.android.ims.ImsManager$Connector.disconnect()
public void com.android.ims.ImsManager$Connector.lambda$new$0$ImsManager$Connector()
public int com.android.ims.ImsManager$Connector.lambda$new$1$ImsManager$Connector()
Tracing public com.android.ims.ImsManager$Connector(android.content.Context,int,com.android.ims.ImsManager$Connector$Listener)
Tracing public com.android.ims.ImsManager$Connector(android.content.Context,int,com.android.ims.ImsManager$Connector$Listener,java.util.concurrent.Executor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$ImsManager$Connector$1$QkUK3GnYms22eckyg3OL-BmtP3M[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Connector$1$QkUK3GnYms22eckyg3OL-BmtP3M.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Connector$1$QkUK3GnYms22eckyg3OL-BmtP3M.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.ims.-$$Lambda$ImsManager$Connector$1$QkUK3GnYms22eckyg3OL-BmtP3M.run()
Tracing public com.android.ims.-$$Lambda$ImsManager$Connector$1$QkUK3GnYms22eckyg3OL-BmtP3M(com.android.ims.ImsManager$Connector$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsEcbm$ImsEcbmListenerProxy[39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbm$ImsEcbmListenerProxy.enteredECBM [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbm$ImsEcbmListenerProxy.exitedECBM [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbm$ImsEcbmListenerProxy.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsEcbm$ImsEcbmListenerProxy.enteredECBM()
public void com.android.ims.ImsEcbm$ImsEcbmListenerProxy.exitedECBM()
Tracing public com.android.ims.ImsEcbm$ImsEcbmListenerProxy(com.android.ims.ImsEcbm,com.android.ims.ImsEcbmStateListener)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection$IFeatureUpdate[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$IFeatureUpdate.notifyStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$IFeatureUpdate.notifyUnavailable [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void com.android.ims.MmTelFeatureConnection$IFeatureUpdate.notifyStateChanged()
public abstract void com.android.ims.MmTelFeatureConnection$IFeatureUpdate.notifyUnavailable()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsManager[39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addToRecentDisconnectReasons [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.booleanToPropertyString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.checkAndThrowExceptionIfServiceUnavailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.createCallSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.createImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.factoryReset [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getBooleanCarrierConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getCallId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getIntCarrierConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getProvisionedBool [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getProvisionedBoolNoException [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getSettingFromSubscriptionManager [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getSubId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getThreadExecutor [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getWfcMode [4 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isDataEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isGbaValid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isImsNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isImsSupportedOnDevice [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isImsTurnOffAllowed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isSubIdValid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isTurnOffImsAllowedByPlatform [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isVolteEnabledByPlatform [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isVolteProvisioned [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isVolteProvisionedOnDevice [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isVtEnabledByPlatform [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isVtEnabledByUser [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isVtProvisioned [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isVtProvisionedOnDevice [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isWfcEnabledByPlatform [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isWfcEnabledByUser [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isWfcProvisioned [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isWfcProvisionedOnDevice [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isWfcRoamingEnabledByUser [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.lambda$isImsNeeded$3 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.lambda$new$0 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.loge [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.makeACopy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setAdvanced4GMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setEnhanced4gLteModeSetting [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setLteFeatureValues [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setProvisionedBool [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setProvisionedBoolNoException [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setRttConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setVtSetting [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setWfcMode [4 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setWfcModeInternal [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setWfcRoamingSetting [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setWfcRoamingSettingInternal [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setWfcSetting [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.turnOffIms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.turnOnIms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.updateImsServiceConfig [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.updateUtFeatureValue [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.updateVideoCallFeatureValue [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.updateVolteFeatureValue [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.updateWfcFeatureAndProvisionedValues [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.acknowledgeSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.acknowledgeSmsReport [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addCapabilitiesCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addCapabilitiesCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addNotifyStatusChangedCallbackIfAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addProvisioningCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addRegistrationCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addRegistrationCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.addRegistrationListener [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.changeMmTelCapability [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.close [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.connectIfServiceIsAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.createCallProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getConfigInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getEcbmInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getImsServiceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getMultiEndpointInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getRecentImsDisconnectReasons [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getRegistrationTech [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getSmsFormat [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.getSupplementaryServiceConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isDynamicBinding [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isServiceAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isServiceReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isSuppServicesOverUtEnabledByPlatform [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.isTtyOnVoLteCapable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.lambda$setRttConfig$4$ImsManager [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.lambda$setWfcModeInternal$1$ImsManager [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.lambda$setWfcRoamingSettingInternal$2$ImsManager [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.makeCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.onSmsReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.open [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.queryMmTelCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.removeCapabilitiesCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.removeCapabilitiesCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.removeNotifyStatusChangedCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.removeProvisioningCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.removeRegistrationCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.removeRegistrationListener [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.sendSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setConfigListener [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setRttEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setSmsListener [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setTtyMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setUiTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setVolteProvisioned [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setVtProvisioned [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setWfcNonPersistent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.setWfcProvisioned [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.shouldProcessCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.takeCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.updateRttConfigValue [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static java.util.Set com.android.ims.ImsManager.access$600(com.android.ims.ImsManager)
private void com.android.ims.ImsManager.addToRecentDisconnectReasons(android.telephony.ims.ImsReasonInfo)
private static java.lang.String com.android.ims.ImsManager.booleanToPropertyString(boolean)
private void com.android.ims.ImsManager.checkAndThrowExceptionIfServiceUnavailable() throws com.android.ims.ImsException
private android.telephony.ims.ImsCallSession com.android.ims.ImsManager.createCallSession(android.telephony.ims.ImsCallProfile) throws com.android.ims.ImsException
private void com.android.ims.ImsManager.createImsService()
public static void com.android.ims.ImsManager.factoryReset(android.content.Context)
private boolean com.android.ims.ImsManager.getBooleanCarrierConfig(java.lang.String)
private static java.lang.String com.android.ims.ImsManager.getCallId(android.os.Bundle)
public static com.android.ims.ImsManager com.android.ims.ImsManager.getInstance(android.content.Context,int)
private int com.android.ims.ImsManager.getIntCarrierConfig(java.lang.String)
private boolean com.android.ims.ImsManager.getProvisionedBool(com.android.ims.ImsConfig,int) throws com.android.ims.ImsException
private boolean com.android.ims.ImsManager.getProvisionedBoolNoException(int)
private int com.android.ims.ImsManager.getSettingFromSubscriptionManager(java.lang.String,java.lang.String)
private int com.android.ims.ImsManager.getSubId()
private java.util.concurrent.Executor com.android.ims.ImsManager.getThreadExecutor()
public static int com.android.ims.ImsManager.getWfcMode(android.content.Context)
public static int com.android.ims.ImsManager.getWfcMode(android.content.Context,boolean)
private boolean com.android.ims.ImsManager.isDataEnabled()
public static boolean com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser(android.content.Context)
private boolean com.android.ims.ImsManager.isGbaValid()
private boolean com.android.ims.ImsManager.isImsNeeded(android.telephony.ims.feature.CapabilityChangeRequest)
public static boolean com.android.ims.ImsManager.isImsSupportedOnDevice(android.content.Context)
private boolean com.android.ims.ImsManager.isImsTurnOffAllowed()
public static boolean com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled(android.content.Context)
private boolean com.android.ims.ImsManager.isSubIdValid(int)
private boolean com.android.ims.ImsManager.isTurnOffImsAllowedByPlatform()
private static boolean com.android.ims.ImsManager.isTurnOffImsAllowedByPlatform(android.content.Context)
public static boolean com.android.ims.ImsManager.isVolteEnabledByPlatform(android.content.Context)
private boolean com.android.ims.ImsManager.isVolteProvisioned()
public static boolean com.android.ims.ImsManager.isVolteProvisionedOnDevice(android.content.Context)
public static boolean com.android.ims.ImsManager.isVtEnabledByPlatform(android.content.Context)
public static boolean com.android.ims.ImsManager.isVtEnabledByUser(android.content.Context)
private boolean com.android.ims.ImsManager.isVtProvisioned()
public static boolean com.android.ims.ImsManager.isVtProvisionedOnDevice(android.content.Context)
public static boolean com.android.ims.ImsManager.isWfcEnabledByPlatform(android.content.Context)
public static boolean com.android.ims.ImsManager.isWfcEnabledByUser(android.content.Context)
private boolean com.android.ims.ImsManager.isWfcProvisioned()
public static boolean com.android.ims.ImsManager.isWfcProvisionedOnDevice(android.content.Context)
public static boolean com.android.ims.ImsManager.isWfcRoamingEnabledByUser(android.content.Context)
static boolean com.android.ims.ImsManager.lambda$isImsNeeded$3(android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair)
static void com.android.ims.ImsManager.lambda$new$0(java.lang.Runnable)
private static void com.android.ims.ImsManager.log(java.lang.String)
private static void com.android.ims.ImsManager.loge(java.lang.String)
private static void com.android.ims.ImsManager.loge(java.lang.String,java.lang.Throwable)
private android.telephony.ims.ImsReasonInfo com.android.ims.ImsManager.makeACopy(android.telephony.ims.ImsReasonInfo)
private void com.android.ims.ImsManager.setAdvanced4GMode(boolean) throws com.android.ims.ImsException
public static void com.android.ims.ImsManager.setEnhanced4gLteModeSetting(android.content.Context,boolean)
private void com.android.ims.ImsManager.setLteFeatureValues(boolean)
private void com.android.ims.ImsManager.setProvisionedBool(com.android.ims.ImsConfig,int,int) throws com.android.ims.ImsException
private boolean com.android.ims.ImsManager.setProvisionedBoolNoException(int,int)
private void com.android.ims.ImsManager.setRttConfig(boolean)
public static void com.android.ims.ImsManager.setVtSetting(android.content.Context,boolean)
public static void com.android.ims.ImsManager.setWfcMode(android.content.Context,int)
public static void com.android.ims.ImsManager.setWfcMode(android.content.Context,int,boolean)
private void com.android.ims.ImsManager.setWfcModeInternal(int)
public static void com.android.ims.ImsManager.setWfcRoamingSetting(android.content.Context,boolean)
private void com.android.ims.ImsManager.setWfcRoamingSettingInternal(boolean)
public static void com.android.ims.ImsManager.setWfcSetting(android.content.Context,boolean)
private void com.android.ims.ImsManager.turnOffIms() throws com.android.ims.ImsException
private void com.android.ims.ImsManager.turnOnIms() throws com.android.ims.ImsException
public static void com.android.ims.ImsManager.updateImsServiceConfig(android.content.Context,int,boolean)
private void com.android.ims.ImsManager.updateUtFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)
private void com.android.ims.ImsManager.updateVideoCallFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)
private void com.android.ims.ImsManager.updateVolteFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)
private void com.android.ims.ImsManager.updateWfcFeatureAndProvisionedValues(android.telephony.ims.feature.CapabilityChangeRequest)
public void com.android.ims.ImsManager.acknowledgeSms(int,int,int) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.acknowledgeSmsReport(int,int,int) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.addCapabilitiesCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.addCapabilitiesCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback,int) throws android.os.RemoteException
public void com.android.ims.ImsManager.addNotifyStatusChangedCallbackIfAvailable(com.android.ims.MmTelFeatureConnection$IFeatureUpdate) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.addProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback,int)
public void com.android.ims.ImsManager.addRegistrationCallback(android.telephony.ims.ImsMmTelManager$RegistrationCallback) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.addRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback,int) throws android.os.RemoteException
public void com.android.ims.ImsManager.addRegistrationListener(int,com.android.ims.ImsConnectionStateListener) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.addRegistrationListener(com.android.ims.ImsConnectionStateListener) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.changeMmTelCapability(int,int,boolean) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.changeMmTelCapability(android.telephony.ims.feature.CapabilityChangeRequest) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.close()
public void com.android.ims.ImsManager.connectIfServiceIsAvailable()
public android.telephony.ims.ImsCallProfile com.android.ims.ImsManager.createCallProfile(int,int) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.ims.ImsManager.factoryReset()
public com.android.ims.ImsConfig com.android.ims.ImsManager.getConfigInterface() throws com.android.ims.ImsException
public com.android.ims.ImsEcbm com.android.ims.ImsManager.getEcbmInterface() throws com.android.ims.ImsException
public int com.android.ims.ImsManager.getImsServiceState() throws com.android.ims.ImsException
public com.android.ims.ImsMultiEndpoint com.android.ims.ImsManager.getMultiEndpointInterface() throws com.android.ims.ImsException
public java.util.ArrayList com.android.ims.ImsManager.getRecentImsDisconnectReasons()
public int com.android.ims.ImsManager.getRegistrationTech()
public java.lang.String com.android.ims.ImsManager.getSmsFormat() throws com.android.ims.ImsException
public com.android.ims.ImsUtInterface com.android.ims.ImsManager.getSupplementaryServiceConfiguration() throws com.android.ims.ImsException
public int com.android.ims.ImsManager.getWfcMode()
public int com.android.ims.ImsManager.getWfcMode(boolean)
public boolean com.android.ims.ImsManager.isDynamicBinding()
public boolean com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser()
public boolean com.android.ims.ImsManager.isNonTtyOrTtyOnVolteEnabled()
public boolean com.android.ims.ImsManager.isServiceAvailable()
public boolean com.android.ims.ImsManager.isServiceReady()
public boolean com.android.ims.ImsManager.isSuppServicesOverUtEnabledByPlatform()
public boolean com.android.ims.ImsManager.isTtyOnVoLteCapable()
public boolean com.android.ims.ImsManager.isVolteEnabledByPlatform()
public boolean com.android.ims.ImsManager.isVolteProvisionedOnDevice()
public boolean com.android.ims.ImsManager.isVtEnabledByPlatform()
public boolean com.android.ims.ImsManager.isVtEnabledByUser()
public boolean com.android.ims.ImsManager.isVtProvisionedOnDevice()
public boolean com.android.ims.ImsManager.isWfcEnabledByPlatform()
public boolean com.android.ims.ImsManager.isWfcEnabledByUser()
public boolean com.android.ims.ImsManager.isWfcProvisionedOnDevice()
public boolean com.android.ims.ImsManager.isWfcRoamingEnabledByUser()
public void com.android.ims.ImsManager.lambda$setRttConfig$4$ImsManager(boolean,int)
public void com.android.ims.ImsManager.lambda$setWfcModeInternal$1$ImsManager(int)
public void com.android.ims.ImsManager.lambda$setWfcRoamingSettingInternal$2$ImsManager(int)
public com.android.ims.ImsCall com.android.ims.ImsManager.makeCall(android.telephony.ims.ImsCallProfile,java.lang.String[],com.android.ims.ImsCall$Listener) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.onSmsReady() throws com.android.ims.ImsException
public void com.android.ims.ImsManager.open(android.telephony.ims.feature.MmTelFeature$Listener) throws com.android.ims.ImsException
public boolean com.android.ims.ImsManager.queryMmTelCapability(int,int) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.removeCapabilitiesCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.removeCapabilitiesCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback,int)
void com.android.ims.ImsManager.removeNotifyStatusChangedCallback(com.android.ims.MmTelFeatureConnection$IFeatureUpdate)
public void com.android.ims.ImsManager.removeProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback,int)
public void com.android.ims.ImsManager.removeRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback,int)
public void com.android.ims.ImsManager.removeRegistrationListener(android.telephony.ims.ImsMmTelManager$RegistrationCallback)
public void com.android.ims.ImsManager.removeRegistrationListener(com.android.ims.ImsConnectionStateListener) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[]) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.setConfigListener(com.android.ims.ImsConfigListener)
public void com.android.ims.ImsManager.setEnhanced4gLteModeSetting(boolean)
public void com.android.ims.ImsManager.setRttEnabled(boolean)
public void com.android.ims.ImsManager.setSmsListener(android.telephony.ims.aidl.IImsSmsListener) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.setTtyMode(int) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.setUiTTYMode(android.content.Context,int,android.os.Message) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.setVolteProvisioned(boolean)
public void com.android.ims.ImsManager.setVtProvisioned(boolean)
public void com.android.ims.ImsManager.setVtSetting(boolean)
public void com.android.ims.ImsManager.setWfcMode(int)
public void com.android.ims.ImsManager.setWfcMode(int,boolean)
public void com.android.ims.ImsManager.setWfcNonPersistent(boolean,int)
public void com.android.ims.ImsManager.setWfcProvisioned(boolean)
public void com.android.ims.ImsManager.setWfcRoamingSetting(boolean)
public void com.android.ims.ImsManager.setWfcSetting(boolean)
public int com.android.ims.ImsManager.shouldProcessCall(boolean,java.lang.String[]) throws com.android.ims.ImsException
public com.android.ims.ImsCall com.android.ims.ImsManager.takeCall(com.android.ims.internal.IImsCallSession,android.os.Bundle,com.android.ims.ImsCall$Listener) throws com.android.ims.ImsException
public void com.android.ims.ImsManager.updateImsServiceConfig(boolean)
public boolean com.android.ims.ImsManager.updateRttConfigValue()
Tracing public com.android.ims.ImsManager(android.content.Context,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw.test [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final boolean com.android.ims.-$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw.test(java.lang.Object)
Tracing private com.android.ims.-$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsEcbm[39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbm.exitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbm.isBinderAlive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbm.setEcbmStateListener [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbm.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsEcbm.exitEmergencyCallbackMode() throws com.android.ims.ImsException
public boolean com.android.ims.ImsEcbm.isBinderAlive()
public void com.android.ims.ImsEcbm.setEcbmStateListener(com.android.ims.ImsEcbmStateListener) throws com.android.ims.ImsException
Tracing public com.android.ims.ImsEcbm(com.android.ims.internal.IImsEcbm)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$ImsManager$Flxe43OUFnnU0pgnksvwPE6o3Mk[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Flxe43OUFnnU0pgnksvwPE6o3Mk.executeRunnable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Flxe43OUFnnU0pgnksvwPE6o3Mk.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.ims.-$$Lambda$ImsManager$Flxe43OUFnnU0pgnksvwPE6o3Mk.executeRunnable(java.lang.Runnable)
Tracing private com.android.ims.-$$Lambda$ImsManager$Flxe43OUFnnU0pgnksvwPE6o3Mk()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection$CallbackAdapterManager$1[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager$1.onSubscriptionsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager$1.onSubscriptionsChanged()
Tracing com.android.ims.MmTelFeatureConnection$CallbackAdapterManager$1(com.android.ims.MmTelFeatureConnection$CallbackAdapterManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsManager$3[39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$3.notifyStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$3.notifyUnavailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsManager$3.notifyStateChanged()
public void com.android.ims.ImsManager$3.notifyUnavailable()
Tracing com.android.ims.ImsManager$3(com.android.ims.ImsManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsManager$Connector$1[39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$1.lambda$notifyStateChanged$0$ImsManager$Connector$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$1.lambda$notifyUnavailable$1$ImsManager$Connector$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$1.notifyStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$1.notifyUnavailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsManager$Connector$1.lambda$notifyStateChanged$0$ImsManager$Connector$1()
public void com.android.ims.ImsManager$Connector$1.lambda$notifyUnavailable$1$ImsManager$Connector$1()
public void com.android.ims.ImsManager$Connector$1.notifyStateChanged()
public void com.android.ims.ImsManager$Connector$1.notifyUnavailable()
Tracing com.android.ims.ImsManager$Connector$1(com.android.ims.ImsManager$Connector)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager.registerCallback [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager.unregisterCallback [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager.registerCallback(android.os.IInterface)
public void com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager.registerCallback(android.telephony.ims.aidl.IImsCapabilityCallback)
public void com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager.unregisterCallback(android.os.IInterface)
public void com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager.unregisterCallback(android.telephony.ims.aidl.IImsCapabilityCallback)
Tracing public com.android.ims.MmTelFeatureConnection$CapabilityCallbackManager(com.android.ims.MmTelFeatureConnection,android.content.Context,java.lang.Object)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$MmTelFeatureConnection$1$2oMo1vy7PK7RvBpj3WhQvVVnmLE[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$MmTelFeatureConnection$1$2oMo1vy7PK7RvBpj3WhQvVVnmLE.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$MmTelFeatureConnection$1$2oMo1vy7PK7RvBpj3WhQvVVnmLE.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.ims.-$$Lambda$MmTelFeatureConnection$1$2oMo1vy7PK7RvBpj3WhQvVVnmLE.run()
Tracing public com.android.ims.-$$Lambda$MmTelFeatureConnection$1$2oMo1vy7PK7RvBpj3WhQvVVnmLE(com.android.ims.MmTelFeatureConnection$1,int,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsManager$Connector$Listener[39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$Listener.connectionReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$Listener.connectionUnavailable [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void com.android.ims.ImsManager$Connector$Listener.connectionReady(com.android.ims.ImsManager) throws com.android.ims.ImsException
public abstract void com.android.ims.ImsManager$Connector$Listener.connectionUnavailable()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$ImsManager$Connector$N5r1SvOgM0jfHDwKkcQbyw_uTP0[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Connector$N5r1SvOgM0jfHDwKkcQbyw_uTP0.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$Connector$N5r1SvOgM0jfHDwKkcQbyw_uTP0.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.ims.-$$Lambda$ImsManager$Connector$N5r1SvOgM0jfHDwKkcQbyw_uTP0.run()
Tracing public com.android.ims.-$$Lambda$ImsManager$Connector$N5r1SvOgM0jfHDwKkcQbyw_uTP0(com.android.ims.ImsManager$Connector)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager.registerCallback [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager.unregisterCallback [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager.registerCallback(android.os.IInterface)
public void com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager.registerCallback(android.telephony.ims.aidl.IImsConfigCallback)
public void com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager.unregisterCallback(android.os.IInterface)
public void com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager.unregisterCallback(android.telephony.ims.aidl.IImsConfigCallback)
Tracing public com.android.ims.MmTelFeatureConnection$ProvisioningCallbackManager(com.android.ims.MmTelFeatureConnection,android.content.Context,java.lang.Object)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter.registerCallback [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter.unregisterCallback [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter.registerCallback(android.os.IInterface)
public void com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter.registerCallback(android.telephony.ims.aidl.IImsRegistrationCallback)
public void com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter.unregisterCallback(android.os.IInterface)
public void com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter.unregisterCallback(android.telephony.ims.aidl.IImsRegistrationCallback)
Tracing public com.android.ims.MmTelFeatureConnection$ImsRegistrationCallbackAdapter(com.android.ims.MmTelFeatureConnection,android.content.Context,java.lang.Object)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsMultiEndpoint$ImsExternalCallStateListenerProxy[39;49;00m
[31;01mTracing Method : com.android.ims.ImsMultiEndpoint$ImsExternalCallStateListenerProxy.onImsExternalCallStateUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsMultiEndpoint$ImsExternalCallStateListenerProxy.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsMultiEndpoint$ImsExternalCallStateListenerProxy.onImsExternalCallStateUpdate(java.util.List)
Tracing public com.android.ims.ImsMultiEndpoint$ImsExternalCallStateListenerProxy(com.android.ims.ImsMultiEndpoint,com.android.ims.ImsExternalCallStateListener)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsCall$Listener[39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallConferenceExtendFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallConferenceExtendReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallConferenceExtended [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallConferenceStateUpdated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallHandover [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallHandoverFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallHeld [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallHoldFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallHoldReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallInviteParticipantsRequestDelivered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallInviteParticipantsRequestFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallMergeFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallMerged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallProgressing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallQualityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallRemoveParticipantsRequestDelivered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallRemoveParticipantsRequestFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallResumeFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallResumeReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallResumed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallSessionTtyModeReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallStartFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallStarted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallStateChanged [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallSuppServiceReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallTerminated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallUpdateFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallUpdateReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallUpdated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onCallUssdMessageReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onConferenceParticipantsStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onMultipartyStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onRttAudioIndicatorChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onRttMessageReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onRttModifyRequestReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.onRttModifyResponseReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsCall$Listener.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsCall$Listener.onCallConferenceExtendFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallConferenceExtendReceived(com.android.ims.ImsCall,com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallConferenceExtended(com.android.ims.ImsCall,com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallConferenceStateUpdated(com.android.ims.ImsCall,android.telephony.ims.ImsConferenceState)
public void com.android.ims.ImsCall$Listener.onCallError(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallHandover(com.android.ims.ImsCall,int,int,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallHandoverFailed(com.android.ims.ImsCall,int,int,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallHeld(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallHoldFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallHoldReceived(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallInviteParticipantsRequestDelivered(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallInviteParticipantsRequestFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallMergeFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallMerged(com.android.ims.ImsCall,com.android.ims.ImsCall,boolean)
public void com.android.ims.ImsCall$Listener.onCallProgressing(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallQualityChanged(com.android.ims.ImsCall,android.telephony.CallQuality)
public void com.android.ims.ImsCall$Listener.onCallRemoveParticipantsRequestDelivered(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallRemoveParticipantsRequestFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallResumeFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallResumeReceived(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallResumed(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallSessionTtyModeReceived(com.android.ims.ImsCall,int)
public void com.android.ims.ImsCall$Listener.onCallStartFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallStarted(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallStateChanged(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallStateChanged(com.android.ims.ImsCall,int)
public void com.android.ims.ImsCall$Listener.onCallSuppServiceReceived(com.android.ims.ImsCall,android.telephony.ims.ImsSuppServiceNotification)
public void com.android.ims.ImsCall$Listener.onCallTerminated(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallUpdateFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsCall$Listener.onCallUpdateReceived(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallUpdated(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onCallUssdMessageReceived(com.android.ims.ImsCall,int,java.lang.String)
public void com.android.ims.ImsCall$Listener.onConferenceParticipantsStateChanged(com.android.ims.ImsCall,java.util.List)
public void com.android.ims.ImsCall$Listener.onMultipartyStateChanged(com.android.ims.ImsCall,boolean)
public void com.android.ims.ImsCall$Listener.onRttAudioIndicatorChanged(com.android.ims.ImsCall,android.telephony.ims.ImsStreamMediaProfile)
public void com.android.ims.ImsCall$Listener.onRttMessageReceived(com.android.ims.ImsCall,java.lang.String)
public void com.android.ims.ImsCall$Listener.onRttModifyRequestReceived(com.android.ims.ImsCall)
public void com.android.ims.ImsCall$Listener.onRttModifyResponseReceived(com.android.ims.ImsCall,int)
Tracing public com.android.ims.ImsCall$Listener()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsMultiEndpoint[39;49;00m
[31;01mTracing Method : com.android.ims.ImsMultiEndpoint.isBinderAlive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsMultiEndpoint.setExternalCallStateListener [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsMultiEndpoint.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.ims.ImsMultiEndpoint.isBinderAlive()
public void com.android.ims.ImsMultiEndpoint.setExternalCallStateListener(com.android.ims.ImsExternalCallStateListener) throws com.android.ims.ImsException
Tracing public com.android.ims.ImsMultiEndpoint(com.android.ims.internal.IImsMultiEndpoint)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.ims.-$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs.run()
Tracing public com.android.ims.-$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs(com.android.ims.ImsManager,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$MmTelFeatureConnection$ij8S4RNRiQPHfppwkejp36BG78I[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$MmTelFeatureConnection$ij8S4RNRiQPHfppwkejp36BG78I.binderDied [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$MmTelFeatureConnection$ij8S4RNRiQPHfppwkejp36BG78I.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.ims.-$$Lambda$MmTelFeatureConnection$ij8S4RNRiQPHfppwkejp36BG78I.binderDied()
Tracing public com.android.ims.-$$Lambda$MmTelFeatureConnection$ij8S4RNRiQPHfppwkejp36BG78I(com.android.ims.MmTelFeatureConnection)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection$CallbackAdapterManager[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.clearCallbacksForAllSubscriptions [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.lambda$xhSdbzmL46sv3qoJLYbOhV0PL3w [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.linkCallbackToSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.registerForSubscriptionsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.removeCallbacksForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.unlinkCallbackFromSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.unregisterForSubscriptionsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.addCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.addCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.close [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.registerCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.removeCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.removeCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.unregisterCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static android.content.Context com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$000(com.android.ims.MmTelFeatureConnection$CallbackAdapterManager)
static java.lang.Object com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$100(com.android.ims.MmTelFeatureConnection$CallbackAdapterManager)
static android.util.SparseArray com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$200(com.android.ims.MmTelFeatureConnection$CallbackAdapterManager)
static void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.access$300(com.android.ims.MmTelFeatureConnection$CallbackAdapterManager,int)
private void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.clearCallbacksForAllSubscriptions()
public static void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.lambda$xhSdbzmL46sv3qoJLYbOhV0PL3w(com.android.ims.MmTelFeatureConnection$CallbackAdapterManager,int)
private void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.linkCallbackToSubscription(android.os.IInterface,int)
private void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.registerForSubscriptionsChanged()
private void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.removeCallbacksForSubscription(int)
private void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.unlinkCallbackFromSubscription(android.os.IInterface,int)
private void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.unregisterForSubscriptionsChanged()
public final void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.addCallback(android.os.IInterface)
public final void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.addCallbackForSubscription(android.os.IInterface,int)
public final void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.close()
public abstract void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.registerCallback(android.os.IInterface)
public final void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.removeCallback(android.os.IInterface)
public final void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.removeCallbackForSubscription(android.os.IInterface,int)
public abstract void com.android.ims.MmTelFeatureConnection$CallbackAdapterManager.unregisterCallback(android.os.IInterface)
Tracing public com.android.ims.MmTelFeatureConnection$CallbackAdapterManager(android.content.Context,java.lang.Object)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsUt[39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.loge [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.sendFailureReport [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.sendSuccessReport [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.close [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.isBinderAlive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.queryCLIP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.queryCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.queryCOLP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.queryCOLR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.queryCallBarring [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.queryCallForward [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.queryCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.registerForSuppServiceIndication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.transact [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.unregisterForSuppServiceIndication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.updateCLIP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.updateCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.updateCOLP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.updateCOLR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.updateCallBarring [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.updateCallForward [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.updateCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static java.lang.Object com.android.ims.ImsUt.access$100(com.android.ims.ImsUt)
static java.util.HashMap com.android.ims.ImsUt.access$200(com.android.ims.ImsUt)
static void com.android.ims.ImsUt.access$300(com.android.ims.ImsUt,android.os.Message)
static void com.android.ims.ImsUt.access$400(com.android.ims.ImsUt,android.os.Message,android.telephony.ims.ImsReasonInfo)
static void com.android.ims.ImsUt.access$500(com.android.ims.ImsUt,android.os.Message,java.lang.Object)
static android.os.Registrant com.android.ims.ImsUt.access$600(com.android.ims.ImsUt)
private void com.android.ims.ImsUt.log(java.lang.String)
private void com.android.ims.ImsUt.loge(java.lang.String)
private void com.android.ims.ImsUt.loge(java.lang.String,java.lang.Throwable)
private void com.android.ims.ImsUt.sendFailureReport(android.os.Message,android.telephony.ims.ImsReasonInfo)
private void com.android.ims.ImsUt.sendSuccessReport(android.os.Message)
private void com.android.ims.ImsUt.sendSuccessReport(android.os.Message,java.lang.Object)
public void com.android.ims.ImsUt.close()
public boolean com.android.ims.ImsUt.isBinderAlive()
public void com.android.ims.ImsUt.queryCLIP(android.os.Message)
public void com.android.ims.ImsUt.queryCLIR(android.os.Message)
public void com.android.ims.ImsUt.queryCOLP(android.os.Message)
public void com.android.ims.ImsUt.queryCOLR(android.os.Message)
public void com.android.ims.ImsUt.queryCallBarring(int,android.os.Message)
public void com.android.ims.ImsUt.queryCallBarring(int,android.os.Message,int)
public void com.android.ims.ImsUt.queryCallForward(int,java.lang.String,android.os.Message)
public void com.android.ims.ImsUt.queryCallWaiting(android.os.Message)
public void com.android.ims.ImsUt.registerForSuppServiceIndication(android.os.Handler,int,java.lang.Object)
public void com.android.ims.ImsUt.transact(android.os.Bundle,android.os.Message)
public void com.android.ims.ImsUt.unregisterForSuppServiceIndication(android.os.Handler)
public void com.android.ims.ImsUt.updateCLIP(boolean,android.os.Message)
public void com.android.ims.ImsUt.updateCLIR(int,android.os.Message)
public void com.android.ims.ImsUt.updateCOLP(boolean,android.os.Message)
public void com.android.ims.ImsUt.updateCOLR(int,android.os.Message)
public void com.android.ims.ImsUt.updateCallBarring(int,int,android.os.Message,java.lang.String[])
public void com.android.ims.ImsUt.updateCallBarring(int,int,android.os.Message,java.lang.String[],int)
public void com.android.ims.ImsUt.updateCallForward(int,int,java.lang.String,int,int,android.os.Message)
public void com.android.ims.ImsUt.updateCallWaiting(boolean,int,android.os.Message)
Tracing public com.android.ims.ImsUt(com.android.ims.internal.IImsUt)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$1000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$1100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$1202 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$1300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$1302 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$800 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.access$902 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.checkServiceIsReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.create [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getRegistration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getServiceInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getTelephonyManager [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.lambda$NxZFB3RppXJngUWEmxSWd3-I_s4 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.onRemovedOrDied [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.retrieveFeatureState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.acknowledgeSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.acknowledgeSmsReport [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.addCapabilityCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.addCapabilityCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.addProvisioningCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.addRegistrationCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.addRegistrationCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.changeEnabledCapabilities [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.closeConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.createCallProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.createCallSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getConfigInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getEcbmInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getFeatureState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getListener [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getMultiEndpointInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getRegistrationTech [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getSmsFormat [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.getUtInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.isBinderAlive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.isBinderReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.isEmergencyMmTelAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.lambda$new$0$MmTelFeatureConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.onSmsReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.openConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.queryCapabilityStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.queryEnabledCapabilities [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.removeCapabilityCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.removeCapabilityCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.removeProvisioningCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.removeRegistrationCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.removeRegistrationCallbackForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.sendSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.setBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.setSmsListener [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.setStatusCallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.setUiTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.shouldProcessCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static com.android.ims.MmTelFeatureConnection$IFeatureUpdate com.android.ims.MmTelFeatureConnection.access$1000(com.android.ims.MmTelFeatureConnection)
static void com.android.ims.MmTelFeatureConnection.access$1100(com.android.ims.MmTelFeatureConnection)
static boolean com.android.ims.MmTelFeatureConnection.access$1202(com.android.ims.MmTelFeatureConnection,boolean)
static boolean com.android.ims.MmTelFeatureConnection.access$1300(com.android.ims.MmTelFeatureConnection)
static boolean com.android.ims.MmTelFeatureConnection.access$1302(com.android.ims.MmTelFeatureConnection,boolean)
static android.telephony.ims.aidl.IImsRegistration com.android.ims.MmTelFeatureConnection.access$400(com.android.ims.MmTelFeatureConnection)
static java.lang.Object com.android.ims.MmTelFeatureConnection.access$500(com.android.ims.MmTelFeatureConnection)
static void com.android.ims.MmTelFeatureConnection.access$600(com.android.ims.MmTelFeatureConnection) throws android.os.RemoteException
static android.telephony.ims.aidl.IImsMmTelFeature com.android.ims.MmTelFeatureConnection.access$700(com.android.ims.MmTelFeatureConnection,android.os.IBinder)
static java.util.concurrent.Executor com.android.ims.MmTelFeatureConnection.access$800(com.android.ims.MmTelFeatureConnection)
static java.lang.Integer com.android.ims.MmTelFeatureConnection.access$902(com.android.ims.MmTelFeatureConnection,java.lang.Integer)
private void com.android.ims.MmTelFeatureConnection.checkServiceIsReady() throws android.os.RemoteException
public static com.android.ims.MmTelFeatureConnection com.android.ims.MmTelFeatureConnection.create(android.content.Context,int)
private android.telephony.ims.aidl.IImsConfig com.android.ims.MmTelFeatureConnection.getConfig()
private android.telephony.ims.aidl.IImsRegistration com.android.ims.MmTelFeatureConnection.getRegistration()
private android.telephony.ims.aidl.IImsMmTelFeature com.android.ims.MmTelFeatureConnection.getServiceInterface(android.os.IBinder)
public static android.telephony.TelephonyManager com.android.ims.MmTelFeatureConnection.getTelephonyManager(android.content.Context)
public static void com.android.ims.MmTelFeatureConnection.lambda$NxZFB3RppXJngUWEmxSWd3-I_s4(com.android.ims.MmTelFeatureConnection)
private void com.android.ims.MmTelFeatureConnection.onRemovedOrDied()
private java.lang.Integer com.android.ims.MmTelFeatureConnection.retrieveFeatureState()
public void com.android.ims.MmTelFeatureConnection.acknowledgeSms(int,int,int) throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.acknowledgeSmsReport(int,int,int) throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)
public void com.android.ims.MmTelFeatureConnection.addCapabilityCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback,int)
public void com.android.ims.MmTelFeatureConnection.addProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback,int)
public void com.android.ims.MmTelFeatureConnection.addRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)
public void com.android.ims.MmTelFeatureConnection.addRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback,int)
public void com.android.ims.MmTelFeatureConnection.changeEnabledCapabilities(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback) throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.closeConnection()
public android.telephony.ims.ImsCallProfile com.android.ims.MmTelFeatureConnection.createCallProfile(int,int) throws android.os.RemoteException
public com.android.ims.internal.IImsCallSession com.android.ims.MmTelFeatureConnection.createCallSession(android.telephony.ims.ImsCallProfile) throws android.os.RemoteException
public android.telephony.ims.aidl.IImsConfig com.android.ims.MmTelFeatureConnection.getConfigInterface()
public com.android.ims.internal.IImsEcbm com.android.ims.MmTelFeatureConnection.getEcbmInterface() throws android.os.RemoteException
public int com.android.ims.MmTelFeatureConnection.getFeatureState()
public com.android.ims.internal.IImsServiceFeatureCallback com.android.ims.MmTelFeatureConnection.getListener()
public com.android.ims.internal.IImsMultiEndpoint com.android.ims.MmTelFeatureConnection.getMultiEndpointInterface() throws android.os.RemoteException
public int com.android.ims.MmTelFeatureConnection.getRegistrationTech() throws android.os.RemoteException
public java.lang.String com.android.ims.MmTelFeatureConnection.getSmsFormat() throws android.os.RemoteException
public com.android.ims.internal.IImsUt com.android.ims.MmTelFeatureConnection.getUtInterface() throws android.os.RemoteException
public boolean com.android.ims.MmTelFeatureConnection.isBinderAlive()
public boolean com.android.ims.MmTelFeatureConnection.isBinderReady()
public boolean com.android.ims.MmTelFeatureConnection.isEmergencyMmTelAvailable()
public void com.android.ims.MmTelFeatureConnection.lambda$new$0$MmTelFeatureConnection()
public void com.android.ims.MmTelFeatureConnection.onSmsReady() throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.openConnection(android.telephony.ims.feature.MmTelFeature$Listener) throws android.os.RemoteException
public android.telephony.ims.feature.MmTelFeature$MmTelCapabilities com.android.ims.MmTelFeatureConnection.queryCapabilityStatus() throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.queryEnabledCapabilities(int,int,android.telephony.ims.aidl.IImsCapabilityCallback) throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)
public void com.android.ims.MmTelFeatureConnection.removeCapabilityCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback,int)
public void com.android.ims.MmTelFeatureConnection.removeProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback,int)
public void com.android.ims.MmTelFeatureConnection.removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)
public void com.android.ims.MmTelFeatureConnection.removeRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback,int)
public void com.android.ims.MmTelFeatureConnection.sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[]) throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.setBinder(android.os.IBinder)
public void com.android.ims.MmTelFeatureConnection.setSmsListener(android.telephony.ims.aidl.IImsSmsListener) throws android.os.RemoteException
public void com.android.ims.MmTelFeatureConnection.setStatusCallback(com.android.ims.MmTelFeatureConnection$IFeatureUpdate)
public void com.android.ims.MmTelFeatureConnection.setUiTTYMode(int,android.os.Message) throws android.os.RemoteException
public int com.android.ims.MmTelFeatureConnection.shouldProcessCall(boolean,java.lang.String[]) throws android.os.RemoteException
Tracing public com.android.ims.MmTelFeatureConnection(android.content.Context,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsManager$ExecutorFactory[39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$ExecutorFactory.executeRunnable [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void com.android.ims.ImsManager$ExecutorFactory.executeRunnable(java.lang.Runnable)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsManager$Connector$RetryTimeout[39;49;00m
[31;01mTracing Method : com.android.ims.ImsManager$Connector$RetryTimeout.get [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract int com.android.ims.ImsManager$Connector$RetryTimeout.get()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.MmTelFeatureConnection$1[39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$1.imsFeatureCreated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$1.imsFeatureRemoved [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$1.imsStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$1.lambda$imsFeatureCreated$0$MmTelFeatureConnection$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$1.lambda$imsFeatureRemoved$1$MmTelFeatureConnection$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$1.lambda$imsStatusChanged$2$MmTelFeatureConnection$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.MmTelFeatureConnection$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.MmTelFeatureConnection$1.imsFeatureCreated(int,int)
public void com.android.ims.MmTelFeatureConnection$1.imsFeatureRemoved(int,int)
public void com.android.ims.MmTelFeatureConnection$1.imsStatusChanged(int,int,int)
public void com.android.ims.MmTelFeatureConnection$1.lambda$imsFeatureCreated$0$MmTelFeatureConnection$1(int,int)
public void com.android.ims.MmTelFeatureConnection$1.lambda$imsFeatureRemoved$1$MmTelFeatureConnection$1(int,int)
public void com.android.ims.MmTelFeatureConnection$1.lambda$imsStatusChanged$2$MmTelFeatureConnection$1(int,int,int)
Tracing com.android.ims.MmTelFeatureConnection$1(com.android.ims.MmTelFeatureConnection)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsEcbmStateListener[39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbmStateListener.onECBMEntered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbmStateListener.onECBMExited [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsEcbmStateListener.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsEcbmStateListener.onECBMEntered()
public void com.android.ims.ImsEcbmStateListener.onECBMExited()
Tracing public com.android.ims.ImsEcbmStateListener()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.-$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c[39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.-$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.ims.-$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c.run()
Tracing public com.android.ims.-$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c(com.android.ims.ImsManager,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsExternalCallStateListener[39;49;00m
[31;01mTracing Method : com.android.ims.ImsExternalCallStateListener.onImsExternalCallStateUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsExternalCallStateListener.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsExternalCallStateListener.onImsExternalCallStateUpdate(java.util.List)
Tracing public com.android.ims.ImsExternalCallStateListener()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.ims.ImsUt$IImsUtListenerProxy[39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.onSupplementaryServiceIndication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationCallBarringQueried [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationCallForwardQueried [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationCallWaitingQueried [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationQueried [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationQueryFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationUpdateFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationUpdated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.ims.ImsUt$IImsUtListenerProxy.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.ims.ImsUt$IImsUtListenerProxy.onSupplementaryServiceIndication(android.telephony.ims.ImsSsData)
public void com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationCallBarringQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])
public void com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationCallForwardQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsCallForwardInfo[])
public void com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationCallWaitingQueried(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsSsInfo[])
public void com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationQueried(com.android.ims.internal.IImsUt,int,android.os.Bundle)
public void com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationQueryFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationUpdateFailed(com.android.ims.internal.IImsUt,int,android.telephony.ims.ImsReasonInfo)
public void com.android.ims.ImsUt$IImsUtListenerProxy.utConfigurationUpdated(com.android.ims.internal.IImsUt,int)
Tracing private com.android.ims.ImsUt$IImsUtListenerProxy(com.android.ims.ImsUt)
Tracing com.android.ims.ImsUt$IImsUtListenerProxy(com.android.ims.ImsUt,com.android.ims.ImsUt$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.net.sip.SipManager[39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.checkSipServiceConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.createIncomingCallBroadcast [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.createRelay [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.createSipService [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.getCallId [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.getOfferSessionDescription [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.isApiSupported [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.isIncomingCallIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.isSipWifiOnly [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.isVoipSupported [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.newInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.close [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.createSipSession [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.getListOfProfiles [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.getSessionFor [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.isOpened [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.isRegistered [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.makeAudioCall [2 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.open [2 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.register [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.setRegistrationListener [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.takeAudioCall [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.unregister [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.SipManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void android.net.sip.SipManager.checkSipServiceConnection() throws android.net.sip.SipException
public static android.content.Intent android.net.sip.SipManager.createIncomingCallBroadcast(java.lang.String,java.lang.String)
private static android.net.sip.ISipSessionListener android.net.sip.SipManager.createRelay(android.net.sip.SipRegistrationListener,java.lang.String)
private void android.net.sip.SipManager.createSipService()
public static java.lang.String android.net.sip.SipManager.getCallId(android.content.Intent)
public static java.lang.String android.net.sip.SipManager.getOfferSessionDescription(android.content.Intent)
public static boolean android.net.sip.SipManager.isApiSupported(android.content.Context)
public static boolean android.net.sip.SipManager.isIncomingCallIntent(android.content.Intent)
public static boolean android.net.sip.SipManager.isSipWifiOnly(android.content.Context)
public static boolean android.net.sip.SipManager.isVoipSupported(android.content.Context)
public static android.net.sip.SipManager android.net.sip.SipManager.newInstance(android.content.Context)
public void android.net.sip.SipManager.close(java.lang.String) throws android.net.sip.SipException
public android.net.sip.SipSession android.net.sip.SipManager.createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener) throws android.net.sip.SipException
public android.net.sip.SipProfile[] android.net.sip.SipManager.getListOfProfiles() throws android.net.sip.SipException
public android.net.sip.SipSession android.net.sip.SipManager.getSessionFor(android.content.Intent) throws android.net.sip.SipException
public boolean android.net.sip.SipManager.isOpened(java.lang.String) throws android.net.sip.SipException
public boolean android.net.sip.SipManager.isRegistered(java.lang.String) throws android.net.sip.SipException
public android.net.sip.SipAudioCall android.net.sip.SipManager.makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int) throws android.net.sip.SipException
public android.net.sip.SipAudioCall android.net.sip.SipManager.makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int) throws android.net.sip.SipException
public void android.net.sip.SipManager.open(android.net.sip.SipProfile) throws android.net.sip.SipException
public void android.net.sip.SipManager.open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
public void android.net.sip.SipManager.register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
public void android.net.sip.SipManager.setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
public android.net.sip.SipAudioCall android.net.sip.SipManager.takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener) throws android.net.sip.SipException
public void android.net.sip.SipManager.unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
Tracing private android.net.sip.SipManager(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.net.sip.ISipService[39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.close [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.createSession [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.getListOfProfiles [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.getPendingSession [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.isOpened [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.isRegistered [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.open [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.open3 [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService.setRegistrationListener [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void android.net.sip.ISipService.close(java.lang.String,java.lang.String) throws android.os.RemoteException
public abstract android.net.sip.ISipSession android.net.sip.ISipService.createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String) throws android.os.RemoteException
public abstract android.net.sip.SipProfile[] android.net.sip.ISipService.getListOfProfiles(java.lang.String) throws android.os.RemoteException
public abstract android.net.sip.ISipSession android.net.sip.ISipService.getPendingSession(java.lang.String,java.lang.String) throws android.os.RemoteException
public abstract boolean android.net.sip.ISipService.isOpened(java.lang.String,java.lang.String) throws android.os.RemoteException
public abstract boolean android.net.sip.ISipService.isRegistered(java.lang.String,java.lang.String) throws android.os.RemoteException
public abstract void android.net.sip.ISipService.open(android.net.sip.SipProfile,java.lang.String) throws android.os.RemoteException
public abstract void android.net.sip.ISipService.open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String) throws android.os.RemoteException
public abstract void android.net.sip.ISipService.setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String) throws android.os.RemoteException
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.net.sip.ISipService$Stub[39;49;00m
[31;01mTracing Method : android.net.sip.ISipService$Stub.asInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService$Stub.getDefaultImpl [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService$Stub.setDefaultImpl [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService$Stub.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService$Stub.onTransact [1 overload(s)][39;49;00m
[31;01mTracing Method : android.net.sip.ISipService$Stub.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static android.net.sip.ISipService android.net.sip.ISipService$Stub.asInterface(android.os.IBinder)
public static android.net.sip.ISipService android.net.sip.ISipService$Stub.getDefaultImpl()
public static boolean android.net.sip.ISipService$Stub.setDefaultImpl(android.net.sip.ISipService)
public android.os.IBinder android.net.sip.ISipService$Stub.asBinder()
public boolean android.net.sip.ISipService$Stub.onTransact(int,android.os.Parcel,android.os.Parcel,int) throws android.os.RemoteException
Tracing public android.net.sip.ISipService$Stub()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.server.sip.SipService[39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1002 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1800 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$1900 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$2000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$800 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$900 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.access$902 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.addPendingSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.callingSelf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.canUseSip [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.cleanUpPendingSessions [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.createGroup [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.createLooper [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.determineLocalIp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.getKeepAliveInterval [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.isAllowedCharacter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.isBehindNAT [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.isCallerCreator [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.isCallerCreatorOrRadio [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.isCallerRadio [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.notifyProfileAdded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.notifyProfileRemoved [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.obfuscateSipUri [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.onConnectivityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.onKeepAliveIntervalChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.registerReceivers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.restartPortMappingLifetimeMeasurement [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.slog [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.start [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.startPortMappingLifetimeMeasurement [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.stopPortMappingMeasurement [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.unregisterReceivers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.updateWakeLocks [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.close [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.createSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.getListOfProfiles [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.getPendingSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.isOpened [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.isRegistered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.open [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.open3 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.setRegistrationListener [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipService.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static int com.android.server.sip.SipService.access$1002(com.android.server.sip.SipService,int)
static void com.android.server.sip.SipService.access$1100(com.android.server.sip.SipService)
static int com.android.server.sip.SipService.access$1200(com.android.server.sip.SipService)
static void com.android.server.sip.SipService.access$1300(com.android.server.sip.SipService,android.net.sip.SipProfile,int)
static void com.android.server.sip.SipService.access$1400(com.android.server.sip.SipService,android.net.sip.SipProfile)
static java.lang.String com.android.server.sip.SipService.access$1500(com.android.server.sip.SipService)
static boolean com.android.server.sip.SipService.access$1600(com.android.server.sip.SipService,java.lang.String)
static void com.android.server.sip.SipService.access$1700(com.android.server.sip.SipService,android.net.NetworkInfo)
static android.os.Looper com.android.server.sip.SipService.access$1800()
static void com.android.server.sip.SipService.access$1900(com.android.server.sip.SipService,java.lang.String)
static com.android.server.sip.SipWakeupTimer com.android.server.sip.SipService.access$200(com.android.server.sip.SipService)
static void com.android.server.sip.SipService.access$2000(com.android.server.sip.SipService,java.lang.String,java.lang.Throwable)
static com.android.server.sip.SipWakeLock com.android.server.sip.SipService.access$300(com.android.server.sip.SipService)
static int com.android.server.sip.SipService.access$400(com.android.server.sip.SipService)
static boolean com.android.server.sip.SipService.access$500(com.android.server.sip.SipService,com.android.server.sip.SipService$SipSessionGroupExt,com.android.server.sip.SipSessionGroup$SipSessionImpl)
static void com.android.server.sip.SipService.access$600(com.android.server.sip.SipService,android.net.sip.ISipSession)
static android.content.Context com.android.server.sip.SipService.access$700(com.android.server.sip.SipService)
static com.android.server.sip.SipService$MyExecutor com.android.server.sip.SipService.access$800(com.android.server.sip.SipService)
static int com.android.server.sip.SipService.access$900(com.android.server.sip.SipService)
static int com.android.server.sip.SipService.access$902(com.android.server.sip.SipService,int)
private synchronized void com.android.server.sip.SipService.addPendingSession(android.net.sip.ISipSession)
private synchronized boolean com.android.server.sip.SipService.callingSelf(com.android.server.sip.SipService$SipSessionGroupExt,com.android.server.sip.SipSessionGroup$SipSessionImpl)
private boolean com.android.server.sip.SipService.canUseSip(java.lang.String,java.lang.String)
private void com.android.server.sip.SipService.cleanUpPendingSessions() throws android.os.RemoteException
private com.android.server.sip.SipService$SipSessionGroupExt com.android.server.sip.SipService.createGroup(android.net.sip.SipProfile) throws javax.sip.SipException
private com.android.server.sip.SipService$SipSessionGroupExt com.android.server.sip.SipService.createGroup(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener) throws javax.sip.SipException
private static android.os.Looper com.android.server.sip.SipService.createLooper()
private java.lang.String com.android.server.sip.SipService.determineLocalIp()
private int com.android.server.sip.SipService.getKeepAliveInterval()
private static boolean com.android.server.sip.SipService.isAllowedCharacter(char)
private boolean com.android.server.sip.SipService.isBehindNAT(java.lang.String)
private boolean com.android.server.sip.SipService.isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)
private boolean com.android.server.sip.SipService.isCallerCreatorOrRadio(com.android.server.sip.SipService$SipSessionGroupExt)
private boolean com.android.server.sip.SipService.isCallerRadio()
private void com.android.server.sip.SipService.log(java.lang.String)
private void com.android.server.sip.SipService.loge(java.lang.String,java.lang.Throwable)
private void com.android.server.sip.SipService.notifyProfileAdded(android.net.sip.SipProfile)
private void com.android.server.sip.SipService.notifyProfileRemoved(android.net.sip.SipProfile)
public static java.lang.String com.android.server.sip.SipService.obfuscateSipUri(java.lang.String)
private synchronized void com.android.server.sip.SipService.onConnectivityChanged(android.net.NetworkInfo)
private synchronized void com.android.server.sip.SipService.onKeepAliveIntervalChanged()
private void com.android.server.sip.SipService.registerReceivers()
private void com.android.server.sip.SipService.restartPortMappingLifetimeMeasurement(android.net.sip.SipProfile,int)
private static void com.android.server.sip.SipService.slog(java.lang.String)
public static void com.android.server.sip.SipService.start(android.content.Context)
private void com.android.server.sip.SipService.startPortMappingLifetimeMeasurement(android.net.sip.SipProfile)
private void com.android.server.sip.SipService.startPortMappingLifetimeMeasurement(android.net.sip.SipProfile,int)
private void com.android.server.sip.SipService.stopPortMappingMeasurement()
private void com.android.server.sip.SipService.unregisterReceivers()
private void com.android.server.sip.SipService.updateWakeLocks()
public synchronized void com.android.server.sip.SipService.close(java.lang.String,java.lang.String)
public synchronized android.net.sip.ISipSession com.android.server.sip.SipService.createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)
public synchronized android.net.sip.SipProfile[] com.android.server.sip.SipService.getListOfProfiles(java.lang.String)
public synchronized android.net.sip.ISipSession com.android.server.sip.SipService.getPendingSession(java.lang.String,java.lang.String)
public synchronized boolean com.android.server.sip.SipService.isOpened(java.lang.String,java.lang.String)
public synchronized boolean com.android.server.sip.SipService.isRegistered(java.lang.String,java.lang.String)
public synchronized void com.android.server.sip.SipService.open(android.net.sip.SipProfile,java.lang.String)
public synchronized void com.android.server.sip.SipService.open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)
public synchronized void com.android.server.sip.SipService.setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)
Tracing private com.android.server.sip.SipService(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.server.sip.SipWakeupTimer[39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.cancelAlarm [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.execute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.getAction [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.insertEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.printQueue [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.recalculatePeriods [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.scheduleNext [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.showTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.stopped [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.cancel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.set [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.stop [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.server.sip.SipWakeupTimer.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.server.sip.SipWakeupTimer.cancelAlarm()
private void com.android.server.sip.SipWakeupTimer.execute(long)
private java.lang.String com.android.server.sip.SipWakeupTimer.getAction()
private void com.android.server.sip.SipWakeupTimer.insertEvent(com.android.server.sip.SipWakeupTimer$MyEvent)
private void com.android.server.sip.SipWakeupTimer.log(java.lang.String)
private void com.android.server.sip.SipWakeupTimer.printQueue()
private void com.android.server.sip.SipWakeupTimer.recalculatePeriods()
private void com.android.server.sip.SipWakeupTimer.scheduleNext()
private java.lang.String com.android.server.sip.SipWakeupTimer.showTime(long)
private boolean com.android.server.sip.SipWakeupTimer.stopped()
public synchronized void com.android.server.sip.SipWakeupTimer.cancel(java.lang.Runnable)
public synchronized void com.android.server.sip.SipWakeupTimer.onReceive(android.content.Context,android.content.Intent)
public synchronized void com.android.server.sip.SipWakeupTimer.set(int,java.lang.Runnable)
public synchronized void com.android.server.sip.SipWakeupTimer.stop()
Tracing public com.android.server.sip.SipWakeupTimer(android.content.Context,java.util.concurrent.Executor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event[] com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.emptyArray()
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.clear()
protected int com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.computeSerializedSize()
public com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.-$$Lambda$TelephonyComponentFactory$InjectedComponents$DKjB_mCxFOHomOyKLPFU9-9Dywc[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$TelephonyComponentFactory$InjectedComponents$DKjB_mCxFOHomOyKLPFU9-9Dywc.accept [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$TelephonyComponentFactory$InjectedComponents$DKjB_mCxFOHomOyKLPFU9-9Dywc.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.internal.telephony.-$$Lambda$TelephonyComponentFactory$InjectedComponents$DKjB_mCxFOHomOyKLPFU9-9Dywc.accept(java.lang.Object)
Tracing public com.android.internal.telephony.-$$Lambda$TelephonyComponentFactory$InjectedComponents$DKjB_mCxFOHomOyKLPFU9-9Dywc(com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.metrics.InProgressCallSession[39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.metrics.InProgressCallSession.addEvent [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.InProgressCallSession.containsCsCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.InProgressCallSession.isEventsDropped [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.InProgressCallSession.isPhoneIdle [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.InProgressCallSession.setLastKnownPhoneState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.InProgressCallSession.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public synchronized void com.android.internal.telephony.metrics.InProgressCallSession.addEvent(long,com.android.internal.telephony.metrics.CallSessionEventBuilder)
public void com.android.internal.telephony.metrics.InProgressCallSession.addEvent(com.android.internal.telephony.metrics.CallSessionEventBuilder)
public boolean com.android.internal.telephony.metrics.InProgressCallSession.containsCsCalls()
public boolean com.android.internal.telephony.metrics.InProgressCallSession.isEventsDropped()
public boolean com.android.internal.telephony.metrics.InProgressCallSession.isPhoneIdle()
public void com.android.internal.telephony.metrics.InProgressCallSession.setLastKnownPhoneState(int)
Tracing public com.android.internal.telephony.metrics.InProgressCallSession(int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CommandsInterface[39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.acceptCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.acknowledgeIncomingGsmSmsWithPdu [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.acknowledgeLastIncomingCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.acknowledgeLastIncomingGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.cancelPendingUssd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.changeBarringPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.changeIccPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.changeIccPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.changeIccPin2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.changeIccPinForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.conference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.deactivateDataCall [1 overload(s)][39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.deleteSmsOnRuim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.deleteSmsOnSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.dial [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.enableModem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.exitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.explicitCallTransfer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getAllowedCarriers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getAvailableNetworks [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getBasebandVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getCDMASubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getCdmaBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getClientRequestStats [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getCurrentCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getDataCallList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getDataRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getDeviceIdentity [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getGsmBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getHardwareConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getIMEI [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getIMEISV [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getIMSI [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getIMSIForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getIccCardStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getIccSlotsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getImsRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getLastCallFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getLastDataCallFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getLastPdpFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getLteOnCdmaMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getModemActivityInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getModemStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getNetworkSelectionMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getOperator [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getPDPContextList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getPreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getPreferredVoicePrivacy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getRadioState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getRilVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getSignalStrength [1 overload(s)][39;49;00m
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getSmscAddress [1 overload(s)][39;49;00m
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getVoiceRadioTechnology [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.getVoiceRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.handleCallSetupRequestFromSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.hangupConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.hangupForegroundResumeBackground [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.hangupWaitingOrBackground [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.iccCloseLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.iccIO [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.iccIOForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.iccOpenLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.iccTransmitApduBasicChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.iccTransmitApduLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.invokeOemRilRequestRaw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.invokeOemRilRequestStrings [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.nvReadItem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.nvResetConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.nvWriteCdmaPrl [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.nvWriteItem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.pullLceData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryAvailableBandMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryCLIP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryCallForwardStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryCdmaRoamingPreference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryFacilityLockForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.queryTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerFoT53ClirlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForCallStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForCallWaitingInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForCarrierInfoForImsiEncryption [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForCdmaOtaProvision [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForCdmaPrlChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForCdmaSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForDataCallListChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForDisplayInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForEmergencyNumberList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForExitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForHardwareConfigChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForIccSlotStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForIccStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForImsNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForInCallVoicePrivacyOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForInCallVoicePrivacyOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForLceInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForLineControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForModemReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForNattKeepaliveStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForNetworkScanResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForOffOrNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForPcoData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForPhysicalChannelConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForRadioCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForRadioStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForRedirectedNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForResendIncallMute [1 overload(s)][39;49;00m
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForRilConnected [1 overload(s)][39;49;00m
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForRingbackTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForSignalInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForSrvccStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForSubscriptionStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForT53AudioControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.registerForVoiceRadioTechChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.rejectCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.reportSmsMemoryStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.reportStkServiceIsRunning [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.requestIccSimAuthentication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.requestShutdown [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.resetRadio [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendBurstDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendCDMAFeatureCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendDeviceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendEnvelope [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendEnvelopeWithStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendImsCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendImsGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendSMS [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendSMSExpectMore [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendTerminalResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.sendUSSD [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.separateConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setAllowedCarriers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setBandMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCallForward [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCarrierInfoForImsiEncryption [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCdmaBroadcastActivation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCdmaBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCdmaRoamingPreference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setCellInfoListRate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setDataAllowed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setDataProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setFacilityLockForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setGsmBroadcastActivation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setGsmBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setInitialAttachApn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setLinkCapacityReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setLocationUpdates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setLogicalToPhysicalSlotMapping [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setNetworkSelectionModeAutomatic [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setNetworkSelectionModeManual [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnCallRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnCatCallSetUp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnCatCcAlphaNotify [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnCatEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnCatProactiveCmd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnCatSessionEnd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnIccSmsFull [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnNITZTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnNewCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnNewGsmBroadcastSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnNewGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnRestrictedStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnSignalStrengthUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnSmsOnSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnSmsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnSs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnSuppServiceNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnUSSD [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setOnUnsolOemHookRaw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setPhoneType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setPreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setPreferredVoicePrivacy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setRadioPower [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setSignalStrengthReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setSimCardPower [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setSmscAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setSuppServiceNotifications [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setUiccSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setUnsolResponseFilter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.setupDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.startDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.startLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.startNattKeepalive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.startNetworkScan [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.stopDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.stopLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.stopNattKeepalive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.stopNetworkScan [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPin2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPinForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPuk [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPuk2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPuk2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyIccPukForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.supplyNetworkDepersonalization [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.switchWaitingOrHoldingAndActive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.testingEmergencyCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnCallRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnCatCallSetUp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnCatCcAlphaNotify [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnCatEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnCatProactiveCmd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnCatSessionEnd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnIccSmsFull [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnNITZTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnNewCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnNewGsmBroadcastSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnNewGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnRestrictedStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnSignalStrengthUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnSmsOnSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnSmsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnSs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnSuppServiceNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnUSSD [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unSetOnUnsolOemHookRaw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForCallStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForCallWaitingInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForCarrierInfoForImsiEncryption [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForCdmaOtaProvision [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForCdmaPrlChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForCdmaSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForDataCallListChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForDisplayInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForEmergencyNumberList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForExitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForHardwareConfigChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForIccSlotStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForIccStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForImsNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForInCallVoicePrivacyOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForInCallVoicePrivacyOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForLceInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForLineControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForModemReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForNattKeepaliveStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForNetworkScanResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForOffOrNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForPcoData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForPhysicalChannelConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForRadioCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForRadioStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForRedirectedNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForResendIncallMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForRilConnected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForRingbackTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForSignalInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForSrvccStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForSubscriptionStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForT53AudioControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForT53ClirInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unregisterForVoiceRadioTechChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.unsetOnIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.writeSmsToRuim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandsInterface.writeSmsToSim [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void com.android.internal.telephony.CommandsInterface.acceptCall(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.cancelPendingUssd(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.changeIccPin(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.changeIccPin2(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.conference(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.deactivateDataCall(int,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.deleteSmsOnRuim(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.deleteSmsOnSim(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.dial(java.lang.String,boolean,android.telephony.emergency.EmergencyNumber,boolean,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.dial(java.lang.String,boolean,android.telephony.emergency.EmergencyNumber,boolean,int,com.android.internal.telephony.UUSInfo,android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.enableModem(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.exitEmergencyCallbackMode(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.explicitCallTransfer(android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.getAllowedCarriers(android.os.Message,android.os.WorkSource)
public abstract void com.android.internal.telephony.CommandsInterface.getAvailableNetworks(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getBasebandVersion(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getCDMASubscription(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getCLIR(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getCdmaBroadcastConfig(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getCdmaSubscriptionSource(android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.getCellInfoList(android.os.Message,android.os.WorkSource)
public default java.util.List com.android.internal.telephony.CommandsInterface.getClientRequestStats()
public abstract void com.android.internal.telephony.CommandsInterface.getCurrentCalls(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getDataCallList(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getDataRegistrationState(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getDeviceIdentity(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getGsmBroadcastConfig(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getHardwareConfig(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getIMEI(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getIMEISV(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getIMSI(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getIMSIForApp(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getIccCardStatus(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getIccSlotsStatus(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getImsRegistrationState(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getLastCallFailCause(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getLastDataCallFailCause(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getLastPdpFailCause(android.os.Message)
public abstract int com.android.internal.telephony.CommandsInterface.getLteOnCdmaMode()
public default void com.android.internal.telephony.CommandsInterface.getModemActivityInfo(android.os.Message,android.os.WorkSource)
public default void com.android.internal.telephony.CommandsInterface.getModemStatus(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getMute(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getNetworkSelectionMode(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getOperator(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getPDPContextList(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getPreferredNetworkType(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getPreferredVoicePrivacy(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getRadioCapability(android.os.Message)
public abstract int com.android.internal.telephony.CommandsInterface.getRadioState()
public abstract int com.android.internal.telephony.CommandsInterface.getRilVersion()
public abstract void com.android.internal.telephony.CommandsInterface.getSignalStrength(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getSmscAddress(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getVoiceRadioTechnology(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.getVoiceRegistrationState(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.handleCallSetupRequestFromSim(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.hangupConnection(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.hangupForegroundResumeBackground(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.hangupWaitingOrBackground(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.iccCloseLogicalChannel(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.iccOpenLogicalChannel(java.lang.String,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.invokeOemRilRequestRaw(byte[],android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.invokeOemRilRequestStrings(java.lang.String[],android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.nvReadItem(int,android.os.Message,android.os.WorkSource)
public abstract void com.android.internal.telephony.CommandsInterface.nvResetConfig(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.nvWriteCdmaPrl(byte[],android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.nvWriteItem(int,java.lang.String,android.os.Message,android.os.WorkSource)
public abstract void com.android.internal.telephony.CommandsInterface.pullLceData(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryAvailableBandMode(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryCLIP(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryCallForwardStatus(int,int,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryCallWaiting(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryCdmaRoamingPreference(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.queryTTYMode(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.registerFoT53ClirlInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForAvailable(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForCallStateChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForCallWaitingInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForCarrierInfoForImsiEncryption(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForCdmaOtaProvision(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForCdmaPrlChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForCdmaSubscriptionChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForCellInfoList(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForDataCallListChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForDisplayInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForEmergencyNumberList(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForExitEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForHardwareConfigChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForIccRefresh(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForIccSlotStatusChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForIccStatusChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForImsNetworkStateChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForInCallVoicePrivacyOff(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForInCallVoicePrivacyOn(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForLceInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForLineControlInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForModemReset(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForNattKeepaliveStatus(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForNetworkScanResult(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForNetworkStateChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForNotAvailable(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForNumberInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForOffOrNotAvailable(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForOn(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForPcoData(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForPhysicalChannelConfiguration(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForRadioCapabilityChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForRadioStateChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForRedirectedNumberInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForResendIncallMute(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForRilConnected(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForRingbackTone(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForSignalInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForSrvccStateChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForSubscriptionStatusChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForT53AudioControlInfo(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.registerForVoiceRadioTechChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.rejectCall(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.reportSmsMemoryStatus(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.reportStkServiceIsRunning(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.requestIccSimAuthentication(int,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.requestShutdown(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.resetRadio(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendBurstDtmf(java.lang.String,int,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendCDMAFeatureCode(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendCdmaSms(byte[],android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendDeviceState(int,boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendDtmf(char,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendEnvelope(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendEnvelopeWithStatus(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendImsCdmaSms(byte[],int,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendImsGsmSms(java.lang.String,java.lang.String,int,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendSMS(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendSMSExpectMore(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendTerminalResponse(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.sendUSSD(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.separateConnection(int,android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.setAllowedCarriers(android.telephony.CarrierRestrictionRules,android.os.Message,android.os.WorkSource)
public abstract void com.android.internal.telephony.CommandsInterface.setBandMode(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCLIR(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCallForward(int,int,int,java.lang.String,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCallWaiting(boolean,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCarrierInfoForImsiEncryption(android.telephony.ImsiEncryptionInfo,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCdmaBroadcastActivation(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCdmaRoamingPreference(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setCdmaSubscriptionSource(int,android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.setCellInfoListRate(int,android.os.Message,android.os.WorkSource)
public abstract void com.android.internal.telephony.CommandsInterface.setDataAllowed(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setDataProfile(android.telephony.data.DataProfile[],boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setGsmBroadcastActivation(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setLinkCapacityReportingCriteria(int,int,int,int[],int[],int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setLocationUpdates(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setLogicalToPhysicalSlotMapping(int[],android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setMute(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setNetworkSelectionModeAutomatic(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setNetworkSelectionModeManual(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setOnCallRing(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnCatCcAlphaNotify(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnCatEvent(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnIccRefresh(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnIccSmsFull(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnNITZTime(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnNewGsmSms(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnSmsOnSim(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnSmsStatus(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnSs(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnUSSD(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)
public abstract void com.android.internal.telephony.CommandsInterface.setPhoneType(int)
public abstract void com.android.internal.telephony.CommandsInterface.setPreferredNetworkType(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setPreferredVoicePrivacy(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setRadioCapability(com.android.internal.telephony.RadioCapability,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setRadioPower(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setSignalStrengthReportingCriteria(int,int,int[],int,android.os.Message)
public default void com.android.internal.telephony.CommandsInterface.setSimCardPower(int,android.os.Message,android.os.WorkSource)
public abstract void com.android.internal.telephony.CommandsInterface.setSmscAddress(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setSuppServiceNotifications(boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setTTYMode(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setUiccSubscription(int,int,int,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setUnsolResponseFilter(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.startDtmf(char,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.startLceService(int,boolean,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.startNattKeepalive(int,android.net.KeepalivePacketData,int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.startNetworkScan(android.telephony.NetworkScanRequest,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.stopDtmf(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.stopLceService(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.stopNattKeepalive(int,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.stopNetworkScan(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPin(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPin2(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.supplyNetworkDepersonalization(java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.switchWaitingOrHoldingAndActive(android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.testingEmergencyCall()
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnCallRing(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnCatCallSetUp(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnCatCcAlphaNotify(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnCatEvent(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnCatProactiveCmd(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnCatSessionEnd(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnIccSmsFull(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnNITZTime(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnNewCdmaSms(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnNewGsmBroadcastSms(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnNewGsmSms(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnRestrictedStateChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnSignalStrengthUpdate(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnSmsOnSim(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnSmsStatus(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnSs(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnSuppServiceNotification(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnUSSD(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unSetOnUnsolOemHookRaw(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForAvailable(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForCallStateChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForCallWaitingInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForCarrierInfoForImsiEncryption(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForCdmaOtaProvision(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForCdmaPrlChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForCdmaSubscriptionChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForCellInfoList(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForDataCallListChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForDisplayInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForEmergencyNumberList(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForExitEmergencyCallbackMode(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForHardwareConfigChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForIccRefresh(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForIccSlotStatusChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForIccStatusChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForImsNetworkStateChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForInCallVoicePrivacyOff(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForInCallVoicePrivacyOn(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForLceInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForLineControlInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForModemReset(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForNattKeepaliveStatus(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForNetworkScanResult(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForNetworkStateChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForNotAvailable(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForNumberInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForOffOrNotAvailable(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForOn(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForPcoData(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForPhysicalChannelConfiguration(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForRadioCapabilityChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForRadioStateChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForRedirectedNumberInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForResendIncallMute(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForRilConnected(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForRingbackTone(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForSignalInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForSrvccStateChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForSubscriptionStatusChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForT53AudioControlInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForT53ClirInfo(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unregisterForVoiceRadioTechChanged(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.unsetOnIccRefresh(android.os.Handler)
public abstract void com.android.internal.telephony.CommandsInterface.writeSmsToRuim(int,java.lang.String,android.os.Message)
public abstract void com.android.internal.telephony.CommandsInterface.writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.PhoneFactory[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.addLocalLog [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.calculatePreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getDefaultPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getDefaultSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getImsResolver [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getNetworkFactory [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getPhones [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getSmsController [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.getSubscriptionInfoUpdater [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.isSMSPromptEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.localLog [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.makeDefaultPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.makeDefaultPhones [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.makeImsPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.makeSipPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.requestEmbeddedSubscriptionInfoListRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneFactory.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static void com.android.internal.telephony.PhoneFactory.addLocalLog(java.lang.String,int)
public static int com.android.internal.telephony.PhoneFactory.calculatePreferredNetworkType(android.content.Context,int)
public static void com.android.internal.telephony.PhoneFactory.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public static com.android.internal.telephony.Phone com.android.internal.telephony.PhoneFactory.getDefaultPhone()
public static int com.android.internal.telephony.PhoneFactory.getDefaultSubscription()
public static com.android.internal.telephony.ims.ImsResolver com.android.internal.telephony.PhoneFactory.getImsResolver()
public static com.android.internal.telephony.dataconnection.TelephonyNetworkFactory com.android.internal.telephony.PhoneFactory.getNetworkFactory(int)
public static com.android.internal.telephony.Phone com.android.internal.telephony.PhoneFactory.getPhone(int)
public static com.android.internal.telephony.Phone[] com.android.internal.telephony.PhoneFactory.getPhones()
public static com.android.internal.telephony.SmsController com.android.internal.telephony.PhoneFactory.getSmsController()
public static com.android.internal.telephony.SubscriptionInfoUpdater com.android.internal.telephony.PhoneFactory.getSubscriptionInfoUpdater()
public static boolean com.android.internal.telephony.PhoneFactory.isSMSPromptEnabled()
public static void com.android.internal.telephony.PhoneFactory.localLog(java.lang.String,java.lang.String)
public static void com.android.internal.telephony.PhoneFactory.makeDefaultPhone(android.content.Context)
public static void com.android.internal.telephony.PhoneFactory.makeDefaultPhones(android.content.Context)
public static com.android.internal.telephony.Phone com.android.internal.telephony.PhoneFactory.makeImsPhone(com.android.internal.telephony.PhoneNotifier,com.android.internal.telephony.Phone)
public static com.android.internal.telephony.sip.SipPhone com.android.internal.telephony.PhoneFactory.makeSipPhone(java.lang.String)
public static void com.android.internal.telephony.PhoneFactory.requestEmbeddedSubscriptionInfoListRefresh(int,java.lang.Runnable)
Tracing public com.android.internal.telephony.PhoneFactory()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RadioConfig[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.clearRequestList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.convertHalSlotStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.convertHalSlotStatus_1_2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.findAndRemoveRequestFromList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.logd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.obtainRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.primitiveArrayToArrayList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.requestToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.resetProxyAndRequestList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.updateRadioConfigProxy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.getPhoneCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.getRadioConfigProxy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.getSimSlotsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.isSetPreferredDataCommandSupported [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.processResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.registerForSimSlotStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.setModemsConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.setPreferredDataModem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.setSimSlotsMapping [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.unregisterForSimSlotStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioConfig.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.RadioConfig.access$000(java.lang.String)
private void com.android.internal.telephony.RadioConfig.clearRequestList(int,boolean)
static java.util.ArrayList com.android.internal.telephony.RadioConfig.convertHalSlotStatus(java.util.ArrayList)
static java.util.ArrayList com.android.internal.telephony.RadioConfig.convertHalSlotStatus_1_2(java.util.ArrayList)
private com.android.internal.telephony.RILRequest com.android.internal.telephony.RadioConfig.findAndRemoveRequestFromList(int)
public static com.android.internal.telephony.RadioConfig com.android.internal.telephony.RadioConfig.getInstance(android.content.Context)
private static void com.android.internal.telephony.RadioConfig.logd(java.lang.String)
private static void com.android.internal.telephony.RadioConfig.loge(java.lang.String)
private com.android.internal.telephony.RILRequest com.android.internal.telephony.RadioConfig.obtainRequest(int,android.os.Message,android.os.WorkSource)
private static java.util.ArrayList com.android.internal.telephony.RadioConfig.primitiveArrayToArrayList(int[])
static java.lang.String com.android.internal.telephony.RadioConfig.requestToString(int)
private void com.android.internal.telephony.RadioConfig.resetProxyAndRequestList(java.lang.String,java.lang.Exception)
private void com.android.internal.telephony.RadioConfig.updateRadioConfigProxy()
public void com.android.internal.telephony.RadioConfig.getPhoneCapability(android.os.Message)
public android.hardware.radio.config.V1_0.IRadioConfig com.android.internal.telephony.RadioConfig.getRadioConfigProxy(android.os.Message)
public void com.android.internal.telephony.RadioConfig.getSimSlotsStatus(android.os.Message)
public void com.android.internal.telephony.RadioConfig.handleMessage(android.os.Message)
public boolean com.android.internal.telephony.RadioConfig.isSetPreferredDataCommandSupported()
public com.android.internal.telephony.RILRequest com.android.internal.telephony.RadioConfig.processResponse(android.hardware.radio.V1_0.RadioResponseInfo)
public void com.android.internal.telephony.RadioConfig.registerForSimSlotStatusChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.RadioConfig.setModemsConfig(int,android.os.Message)
public void com.android.internal.telephony.RadioConfig.setPreferredDataModem(int,android.os.Message)
public void com.android.internal.telephony.RadioConfig.setSimSlotsMapping(int[],android.os.Message)
public void com.android.internal.telephony.RadioConfig.unregisterForSimSlotStatusChanged(android.os.Handler)
Tracing private com.android.internal.telephony.RadioConfig(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CommandException[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandException.fromRilErrno [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandException.getCommandError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CommandException.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.CommandException com.android.internal.telephony.CommandException.fromRilErrno(int)
public com.android.internal.telephony.CommandException$Error com.android.internal.telephony.CommandException.getCommandError()
Tracing public com.android.internal.telephony.CommandException(com.android.internal.telephony.CommandException$Error)
Tracing public com.android.internal.telephony.CommandException(com.android.internal.telephony.CommandException$Error,java.lang.String)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public java.lang.String com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams.toString()
Tracing com.android.internal.telephony.dataconnection.DataConnection$ConnectionParams(com.android.internal.telephony.dataconnection.ApnContext,int,int,android.os.Message,int,int,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute[] com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.emptyArray()
public static com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.clear()
protected int com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.computeSerializedSize()
public com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.CarrierIdProto$CarrierAttribute()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DcTesterDeactivateAll[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.access$000(java.lang.String)
static com.android.internal.telephony.Phone com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.access$100(com.android.internal.telephony.dataconnection.DcTesterDeactivateAll)
static com.android.internal.telephony.dataconnection.DcController com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.access$200(com.android.internal.telephony.dataconnection.DcTesterDeactivateAll)
private static void com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.log(java.lang.String)
void com.android.internal.telephony.dataconnection.DcTesterDeactivateAll.dispose()
Tracing com.android.internal.telephony.dataconnection.DcTesterDeactivateAll(com.android.internal.telephony.Phone,com.android.internal.telephony.dataconnection.DcController,android.os.Handler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.-$$Lambda$ImsPhoneCallTracker$Zw03itjXT6-LrhiYuD-9nKFg2Wg[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.-$$Lambda$ImsPhoneCallTracker$Zw03itjXT6-LrhiYuD-9nKFg2Wg.getDefaultSharedPreferences [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.-$$Lambda$ImsPhoneCallTracker$Zw03itjXT6-LrhiYuD-9nKFg2Wg.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final android.content.SharedPreferences com.android.internal.telephony.imsphone.-$$Lambda$ImsPhoneCallTracker$Zw03itjXT6-LrhiYuD-9nKFg2Wg.getDefaultSharedPreferences(android.content.Context)
Tracing private com.android.internal.telephony.imsphone.-$$Lambda$ImsPhoneCallTracker$Zw03itjXT6-LrhiYuD-9nKFg2Wg()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver$3[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$3.getSlotIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$3.getSubId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.ims.ImsResolver$3.getSlotIndex(int)
public int com.android.internal.telephony.ims.ImsResolver$3.getSubId(int)
Tracing com.android.internal.telephony.ims.ImsResolver$3(com.android.internal.telephony.ims.ImsResolver)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierServiceStateTracker$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$2.onChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.CarrierServiceStateTracker$2.onChange(boolean)
Tracing com.android.internal.telephony.CarrierServiceStateTracker$2(com.android.internal.telephony.CarrierServiceStateTracker,android.os.Handler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccProfile$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile$1.onChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.uicc.UiccProfile$1.onChange(boolean)
Tracing com.android.internal.telephony.uicc.UiccProfile$1(com.android.internal.telephony.uicc.UiccProfile,android.os.Handler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.IccCardApplicationStatus[39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus.AppStateFromRILInt [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus.AppTypeFromRILInt [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus.PersoSubstateFromRILInt [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus.PinStateFromRILInt [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.uicc.IccCardApplicationStatus.loge(java.lang.String)
public com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState com.android.internal.telephony.uicc.IccCardApplicationStatus.AppStateFromRILInt(int)
public com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType com.android.internal.telephony.uicc.IccCardApplicationStatus.AppTypeFromRILInt(int)
public com.android.internal.telephony.uicc.IccCardApplicationStatus$PersoSubState com.android.internal.telephony.uicc.IccCardApplicationStatus.PersoSubstateFromRILInt(int)
public com.android.internal.telephony.uicc.IccCardStatus$PinState com.android.internal.telephony.uicc.IccCardApplicationStatus.PinStateFromRILInt(int)
public java.lang.String com.android.internal.telephony.uicc.IccCardApplicationStatus.toString()
Tracing public com.android.internal.telephony.uicc.IccCardApplicationStatus()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.getDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.getNotificationBuilder [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.getTypeId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.sendMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.setDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.getDelay()
public android.app.Notification$Builder com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.getNotificationBuilder()
public int com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.getTypeId()
public boolean com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.sendMessage()
public void com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification.setDelay(android.os.PersistableBundle)
Tracing com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification(com.android.internal.telephony.CarrierServiceStateTracker,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cat.RilMessageDecoder$StateStart[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.RilMessageDecoder$StateStart.processMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.RilMessageDecoder$StateStart.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.internal.telephony.cat.RilMessageDecoder$StateStart.processMessage(android.os.Message)
Tracing private com.android.internal.telephony.cat.RilMessageDecoder$StateStart(com.android.internal.telephony.cat.RilMessageDecoder)
Tracing com.android.internal.telephony.cat.RilMessageDecoder$StateStart(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.cat.RilMessageDecoder$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SettingsObserver[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SettingsObserver.observe [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SettingsObserver.onChange [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SettingsObserver.unobserve [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SettingsObserver.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.SettingsObserver.observe(android.net.Uri,int)
public void com.android.internal.telephony.SettingsObserver.onChange(boolean)
public void com.android.internal.telephony.SettingsObserver.onChange(boolean,android.net.Uri)
public void com.android.internal.telephony.SettingsObserver.unobserve()
Tracing public com.android.internal.telephony.SettingsObserver(android.content.Context,android.os.Handler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UsimServiceTable[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimServiceTable.getTag [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimServiceTable.getValues [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimServiceTable.isAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimServiceTable.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
protected java.lang.String com.android.internal.telephony.uicc.UsimServiceTable.getTag()
protected java.lang.Object[] com.android.internal.telephony.uicc.UsimServiceTable.getValues()
public boolean com.android.internal.telephony.uicc.UsimServiceTable.isAvailable(com.android.internal.telephony.uicc.UsimServiceTable$UsimService)
Tracing public com.android.internal.telephony.uicc.UsimServiceTable(byte[])
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub[39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.debug [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.getDebugInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.getHashChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.interfaceChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.interfaceDescriptor [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.linkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.notifySyspropsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.onTransact [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.ping [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.queryLocalInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.registerAsService [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.setHALInstrumentation [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.unlinkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public android.os.IHwBinder android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.asBinder()
public void android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.debug(android.os.NativeHandle,java.util.ArrayList)
public final android.internal.hidl.base.V1_0.DebugInfo android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.getDebugInfo()
public final java.util.ArrayList android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.getHashChain()
public final java.util.ArrayList android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.interfaceChain()
public final java.lang.String android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.interfaceDescriptor()
public final boolean android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.linkToDeath(android.os.IHwBinder$DeathRecipient,long)
public final void android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.notifySyspropsChanged()
public void android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.onTransact(int,android.os.HwParcel,android.os.HwParcel,int) throws android.os.RemoteException
public final void android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.ping()
public android.os.IHwInterface android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.queryLocalInterface(java.lang.String)
public void android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.registerAsService(java.lang.String) throws android.os.RemoteException
public final void android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.setHALInstrumentation()
public java.lang.String android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.toString()
public final boolean android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub.unlinkToDeath(android.os.IHwBinder$DeathRecipient)
Tracing public android.hardware.radio.config.V1_2.IRadioConfigIndication$Stub()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver$4[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$4.create [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$4.getServiceInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$4.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver$4.create(android.content.Context,android.content.ComponentName,com.android.internal.telephony.ims.ImsServiceController$ImsServiceControllerCallbacks)
public java.lang.String com.android.internal.telephony.ims.ImsResolver$4.getServiceInterface()
Tracing com.android.internal.telephony.ims.ImsResolver$4(com.android.internal.telephony.ims.ImsResolver)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.phone.ecc.nano.InvalidProtocolBufferNanoException[39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.invalidEndTag [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.invalidTag [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.invalidWireType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.malformedVarint [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.negativeSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.recursionLimitExceeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.sizeLimitExceeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.truncatedMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.invalidEndTag()
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.invalidTag()
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.invalidWireType()
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.malformedVarint()
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.negativeSize()
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.recursionLimitExceeded()
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.sizeLimitExceeded()
static com.android.phone.ecc.nano.InvalidProtocolBufferNanoException com.android.phone.ecc.nano.InvalidProtocolBufferNanoException.truncatedMessage()
Tracing public com.android.phone.ecc.nano.InvalidProtocolBufferNanoException(java.lang.String)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.InstallCarrierAppUtils[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.getAppNameFromPackageName [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.getNotificationManager [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.getPlayStoreIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.hideAllNotifications [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.hideNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.isPackageInstallNotificationActive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.registerPackageInstallReceiver [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.showNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.showNotificationIfNotInstalledDelayed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.unregisterPackageInstallReceiver [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.InstallCarrierAppUtils.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static java.lang.String com.android.internal.telephony.uicc.InstallCarrierAppUtils.getAppNameFromPackageName(android.content.Context,java.lang.String)
public static java.lang.String com.android.internal.telephony.uicc.InstallCarrierAppUtils.getAppNameFromPackageName(java.lang.String,java.lang.String)
private static android.app.NotificationManager com.android.internal.telephony.uicc.InstallCarrierAppUtils.getNotificationManager(android.content.Context)
static android.content.Intent com.android.internal.telephony.uicc.InstallCarrierAppUtils.getPlayStoreIntent(java.lang.String)
static void com.android.internal.telephony.uicc.InstallCarrierAppUtils.hideAllNotifications(android.content.Context)
static void com.android.internal.telephony.uicc.InstallCarrierAppUtils.hideNotification(android.content.Context,java.lang.String)
static boolean com.android.internal.telephony.uicc.InstallCarrierAppUtils.isPackageInstallNotificationActive(android.content.Context)
static void com.android.internal.telephony.uicc.InstallCarrierAppUtils.registerPackageInstallReceiver(android.content.Context)
static void com.android.internal.telephony.uicc.InstallCarrierAppUtils.showNotification(android.content.Context,java.lang.String)
static void com.android.internal.telephony.uicc.InstallCarrierAppUtils.showNotificationIfNotInstalledDelayed(android.content.Context,java.lang.String,long)
static void com.android.internal.telephony.uicc.InstallCarrierAppUtils.unregisterPackageInstallReceiver(android.content.Context)
Tracing public com.android.internal.telephony.uicc.InstallCarrierAppUtils()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierServiceStateTracker$3[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$3.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.CarrierServiceStateTracker$3.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.CarrierServiceStateTracker$3(com.android.internal.telephony.CarrierServiceStateTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccProfile$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile$2.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.uicc.UiccProfile$2.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.uicc.UiccProfile$2(com.android.internal.telephony.uicc.UiccProfile)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.PhoneSwitcher$PhoneState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneSwitcher$PhoneState.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
Tracing private com.android.internal.telephony.PhoneSwitcher$PhoneState()
Tracing com.android.internal.telephony.PhoneSwitcher$PhoneState(com.android.internal.telephony.PhoneSwitcher$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccCardApplication[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.access$802 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.createIccFileHandler [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.createIccRecords [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getAuthContext [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.notifyNetworkLockedRegistrantsIfNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.notifyPinLockedRegistrantsIfNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.notifyReadyRegistrantsIfNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.onChangeFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.onChangeFdnDone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.onQueryFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.onQueryFdnEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.parsePinPukErrorResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.queryPin1State [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.changeIccFdnPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.changeIccLockPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getAid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getAppLabel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getIccFdnAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getIccFdnEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getIccFileHandler [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getIccLockEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getIccPin2Blocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getIccPuk2Blocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getIccRecords [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getPersoSubState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getPhoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getPin1State [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.getUiccProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.isAppIgnored [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.isReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.queryFdn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.registerForLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.registerForNetworkLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.registerForReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.setAppIgnoreState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.setIccFdnEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.setIccLockEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.supplyNetworkDepersonalization [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.supplyPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.supplyPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.supplyPuk [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.supplyPuk2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.unregisterForLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.unregisterForNetworkLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.unregisterForReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.update [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccCardApplication.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static boolean com.android.internal.telephony.uicc.UiccCardApplication.access$000(com.android.internal.telephony.uicc.UiccCardApplication)
static void com.android.internal.telephony.uicc.UiccCardApplication.access$100(com.android.internal.telephony.uicc.UiccCardApplication,java.lang.String)
static int com.android.internal.telephony.uicc.UiccCardApplication.access$200(com.android.internal.telephony.uicc.UiccCardApplication,android.os.AsyncResult)
static void com.android.internal.telephony.uicc.UiccCardApplication.access$300(com.android.internal.telephony.uicc.UiccCardApplication,android.os.AsyncResult)
static void com.android.internal.telephony.uicc.UiccCardApplication.access$400(com.android.internal.telephony.uicc.UiccCardApplication,android.os.AsyncResult)
static void com.android.internal.telephony.uicc.UiccCardApplication.access$500(com.android.internal.telephony.uicc.UiccCardApplication,android.os.AsyncResult)
static void com.android.internal.telephony.uicc.UiccCardApplication.access$600(com.android.internal.telephony.uicc.UiccCardApplication,android.os.AsyncResult)
static void com.android.internal.telephony.uicc.UiccCardApplication.access$700(com.android.internal.telephony.uicc.UiccCardApplication,java.lang.String)
static com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState com.android.internal.telephony.uicc.UiccCardApplication.access$802(com.android.internal.telephony.uicc.UiccCardApplication,com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState)
private com.android.internal.telephony.uicc.IccFileHandler com.android.internal.telephony.uicc.UiccCardApplication.createIccFileHandler(com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType)
private com.android.internal.telephony.uicc.IccRecords com.android.internal.telephony.uicc.UiccCardApplication.createIccRecords(com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType,android.content.Context,com.android.internal.telephony.CommandsInterface)
private static int com.android.internal.telephony.uicc.UiccCardApplication.getAuthContext(com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType)
private void com.android.internal.telephony.uicc.UiccCardApplication.log(java.lang.String)
private void com.android.internal.telephony.uicc.UiccCardApplication.loge(java.lang.String)
private void com.android.internal.telephony.uicc.UiccCardApplication.notifyNetworkLockedRegistrantsIfNeeded(android.os.Registrant)
private void com.android.internal.telephony.uicc.UiccCardApplication.notifyPinLockedRegistrantsIfNeeded(android.os.Registrant)
private void com.android.internal.telephony.uicc.UiccCardApplication.notifyReadyRegistrantsIfNeeded(android.os.Registrant)
private void com.android.internal.telephony.uicc.UiccCardApplication.onChangeFacilityLock(android.os.AsyncResult)
private void com.android.internal.telephony.uicc.UiccCardApplication.onChangeFdnDone(android.os.AsyncResult)
private void com.android.internal.telephony.uicc.UiccCardApplication.onQueryFacilityLock(android.os.AsyncResult)
private void com.android.internal.telephony.uicc.UiccCardApplication.onQueryFdnEnabled(android.os.AsyncResult)
private int com.android.internal.telephony.uicc.UiccCardApplication.parsePinPukErrorResult(android.os.AsyncResult)
private void com.android.internal.telephony.uicc.UiccCardApplication.queryPin1State()
public void com.android.internal.telephony.uicc.UiccCardApplication.changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccCardApplication.changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)
void com.android.internal.telephony.uicc.UiccCardApplication.dispose()
public void com.android.internal.telephony.uicc.UiccCardApplication.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public java.lang.String com.android.internal.telephony.uicc.UiccCardApplication.getAid()
public java.lang.String com.android.internal.telephony.uicc.UiccCardApplication.getAppLabel()
public int com.android.internal.telephony.uicc.UiccCardApplication.getAuthContext()
public boolean com.android.internal.telephony.uicc.UiccCardApplication.getIccFdnAvailable()
public boolean com.android.internal.telephony.uicc.UiccCardApplication.getIccFdnEnabled()
public com.android.internal.telephony.uicc.IccFileHandler com.android.internal.telephony.uicc.UiccCardApplication.getIccFileHandler()
public boolean com.android.internal.telephony.uicc.UiccCardApplication.getIccLockEnabled()
public boolean com.android.internal.telephony.uicc.UiccCardApplication.getIccPin2Blocked()
public boolean com.android.internal.telephony.uicc.UiccCardApplication.getIccPuk2Blocked()
public com.android.internal.telephony.uicc.IccRecords com.android.internal.telephony.uicc.UiccCardApplication.getIccRecords()
public com.android.internal.telephony.uicc.IccCardApplicationStatus$PersoSubState com.android.internal.telephony.uicc.UiccCardApplication.getPersoSubState()
public int com.android.internal.telephony.uicc.UiccCardApplication.getPhoneId()
public com.android.internal.telephony.uicc.IccCardStatus$PinState com.android.internal.telephony.uicc.UiccCardApplication.getPin1State()
public com.android.internal.telephony.uicc.IccCardApplicationStatus$AppState com.android.internal.telephony.uicc.UiccCardApplication.getState()
public com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType com.android.internal.telephony.uicc.UiccCardApplication.getType()
protected com.android.internal.telephony.uicc.UiccProfile com.android.internal.telephony.uicc.UiccCardApplication.getUiccProfile()
public boolean com.android.internal.telephony.uicc.UiccCardApplication.isAppIgnored()
public boolean com.android.internal.telephony.uicc.UiccCardApplication.isReady()
public void com.android.internal.telephony.uicc.UiccCardApplication.queryFdn()
protected void com.android.internal.telephony.uicc.UiccCardApplication.registerForLocked(android.os.Handler,int,java.lang.Object)
protected void com.android.internal.telephony.uicc.UiccCardApplication.registerForNetworkLocked(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.uicc.UiccCardApplication.registerForReady(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.uicc.UiccCardApplication.setAppIgnoreState(boolean)
public void com.android.internal.telephony.uicc.UiccCardApplication.setIccFdnEnabled(boolean,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccCardApplication.setIccLockEnabled(boolean,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccCardApplication.supplyNetworkDepersonalization(java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccCardApplication.supplyPin(java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccCardApplication.supplyPin2(java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccCardApplication.supplyPuk(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccCardApplication.supplyPuk2(java.lang.String,java.lang.String,android.os.Message)
protected void com.android.internal.telephony.uicc.UiccCardApplication.unregisterForLocked(android.os.Handler)
protected void com.android.internal.telephony.uicc.UiccCardApplication.unregisterForNetworkLocked(android.os.Handler)
public void com.android.internal.telephony.uicc.UiccCardApplication.unregisterForReady(android.os.Handler)
public void com.android.internal.telephony.uicc.UiccCardApplication.update(com.android.internal.telephony.uicc.IccCardApplicationStatus,android.content.Context,com.android.internal.telephony.CommandsInterface)
Tracing public com.android.internal.telephony.uicc.UiccCardApplication(com.android.internal.telephony.uicc.UiccProfile,com.android.internal.telephony.uicc.IccCardApplicationStatus,android.content.Context,com.android.internal.telephony.CommandsInterface)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.-$$Lambda$PhoneSwitcher$WfAxZbJDpCUxBytiUchQ87aGijQ[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$PhoneSwitcher$WfAxZbJDpCUxBytiUchQ87aGijQ.onValidationResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$PhoneSwitcher$WfAxZbJDpCUxBytiUchQ87aGijQ.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final void com.android.internal.telephony.-$$Lambda$PhoneSwitcher$WfAxZbJDpCUxBytiUchQ87aGijQ.onValidationResult(boolean,int)
Tracing public com.android.internal.telephony.-$$Lambda$PhoneSwitcher$WfAxZbJDpCUxBytiUchQ87aGijQ(com.android.internal.telephony.PhoneSwitcher)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.euicc.EuiccConnector$BaseEuiccCommandCallback[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$BaseEuiccCommandCallback.onEuiccServiceUnavailable [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void com.android.internal.telephony.euicc.EuiccConnector$BaseEuiccCommandCallback.onEuiccServiceUnavailable()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SubscriptionInfoUpdater$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater$1.onUserSwitching [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.SubscriptionInfoUpdater$1.onUserSwitching(int,android.os.IRemoteCallback) throws android.os.RemoteException
Tracing com.android.internal.telephony.SubscriptionInfoUpdater$1(com.android.internal.telephony.SubscriptionInfoUpdater)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cat.CatService[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.broadcastAlphaMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.broadcastCardStateAndIccRefreshResp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.broadcastCatCmdIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.changeLanguage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.encodeOptionalTags [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.eventDownload [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.getInKeyResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.getInstance [3 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.getPliResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.handleCmdResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.handleCommand [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.handleRilMsg [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.handleSessionEnd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.isStkAppInstalled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.isSupportedSetupEventCommand [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.removeMenu [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.sendMenuSelection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.sendTerminalResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.validateResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.finalize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.onCmdResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.update [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.updateIccAvailability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatService.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.cat.CatService.broadcastAlphaMessage(java.lang.String)
private void com.android.internal.telephony.cat.CatService.broadcastCardStateAndIccRefreshResp(com.android.internal.telephony.uicc.IccCardStatus$CardState,com.android.internal.telephony.uicc.IccRefreshResponse)
private void com.android.internal.telephony.cat.CatService.broadcastCatCmdIntent(com.android.internal.telephony.cat.CatCmdMessage)
private void com.android.internal.telephony.cat.CatService.changeLanguage(java.lang.String) throws android.os.RemoteException
private void com.android.internal.telephony.cat.CatService.encodeOptionalTags(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.Input,java.io.ByteArrayOutputStream)
private void com.android.internal.telephony.cat.CatService.eventDownload(int,int,int,byte[],boolean)
private void com.android.internal.telephony.cat.CatService.getInKeyResponse(java.io.ByteArrayOutputStream,com.android.internal.telephony.cat.Input)
public static com.android.internal.telephony.cat.AppInterface com.android.internal.telephony.cat.CatService.getInstance()
public static com.android.internal.telephony.cat.AppInterface com.android.internal.telephony.cat.CatService.getInstance(int)
public static com.android.internal.telephony.cat.CatService com.android.internal.telephony.cat.CatService.getInstance(com.android.internal.telephony.CommandsInterface,android.content.Context,com.android.internal.telephony.uicc.UiccProfile,int)
private void com.android.internal.telephony.cat.CatService.getPliResponse(java.io.ByteArrayOutputStream)
private void com.android.internal.telephony.cat.CatService.handleCmdResponse(com.android.internal.telephony.cat.CatResponseMessage)
private void com.android.internal.telephony.cat.CatService.handleCommand(com.android.internal.telephony.cat.CommandParams,boolean)
private void com.android.internal.telephony.cat.CatService.handleRilMsg(com.android.internal.telephony.cat.RilMessage)
private void com.android.internal.telephony.cat.CatService.handleSessionEnd()
private boolean com.android.internal.telephony.cat.CatService.isStkAppInstalled()
private boolean com.android.internal.telephony.cat.CatService.isSupportedSetupEventCommand(com.android.internal.telephony.cat.CatCmdMessage)
private boolean com.android.internal.telephony.cat.CatService.removeMenu(com.android.internal.telephony.cat.Menu)
private void com.android.internal.telephony.cat.CatService.sendMenuSelection(int,boolean)
private void com.android.internal.telephony.cat.CatService.sendTerminalResponse(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.ResultCode,boolean,int,com.android.internal.telephony.cat.ResponseData)
private boolean com.android.internal.telephony.cat.CatService.validateResponse(com.android.internal.telephony.cat.CatResponseMessage)
public void com.android.internal.telephony.cat.CatService.dispose()
protected void com.android.internal.telephony.cat.CatService.finalize()
public void com.android.internal.telephony.cat.CatService.handleMessage(android.os.Message)
public synchronized void com.android.internal.telephony.cat.CatService.onCmdResponse(com.android.internal.telephony.cat.CatResponseMessage)
public void com.android.internal.telephony.cat.CatService.update(com.android.internal.telephony.CommandsInterface,android.content.Context,com.android.internal.telephony.uicc.UiccProfile)
void com.android.internal.telephony.cat.CatService.updateIccAvailability()
Tracing private com.android.internal.telephony.cat.CatService(com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.UiccCardApplication,com.android.internal.telephony.uicc.IccRecords,android.content.Context,com.android.internal.telephony.uicc.IccFileHandler,com.android.internal.telephony.uicc.UiccProfile,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.util.NotificationChannelController[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.util.NotificationChannelController.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.util.NotificationChannelController.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.util.NotificationChannelController.createAll [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.util.NotificationChannelController.getChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.util.NotificationChannelController.migrateCallFowardNotificationChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.util.NotificationChannelController.migrateVoicemailNotificationSettings [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.util.NotificationChannelController.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.util.NotificationChannelController.access$000(android.content.Context)
static void com.android.internal.telephony.util.NotificationChannelController.access$100(android.content.Context)
private static void com.android.internal.telephony.util.NotificationChannelController.createAll(android.content.Context)
public static android.app.NotificationChannel com.android.internal.telephony.util.NotificationChannelController.getChannel(java.lang.String,android.content.Context)
private static void com.android.internal.telephony.util.NotificationChannelController.migrateCallFowardNotificationChannel(android.content.Context,android.app.NotificationChannel)
private static void com.android.internal.telephony.util.NotificationChannelController.migrateVoicemailNotificationSettings(android.content.Context)
Tracing public com.android.internal.telephony.util.NotificationChannelController(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver$5[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$5.create [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$5.getServiceInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$5.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver$5.create(android.content.Context,android.content.ComponentName,com.android.internal.telephony.ims.ImsServiceController$ImsServiceControllerCallbacks)
public java.lang.String com.android.internal.telephony.ims.ImsResolver$5.getServiceInterface()
Tracing com.android.internal.telephony.ims.ImsResolver$5(com.android.internal.telephony.ims.ImsResolver)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType.valueOf [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType.values [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType.valueOf(java.lang.String)
public static com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType[] com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType.values()
Tracing private com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType(java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub[39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.debug [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.getDebugInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.getHashChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.interfaceChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.interfaceDescriptor [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.linkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.notifySyspropsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.onTransact [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.ping [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.queryLocalInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.registerAsService [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.setHALInstrumentation [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.unlinkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public android.os.IHwBinder android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.asBinder()
public void android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.debug(android.os.NativeHandle,java.util.ArrayList)
public final android.internal.hidl.base.V1_0.DebugInfo android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.getDebugInfo()
public final java.util.ArrayList android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.getHashChain()
public final java.util.ArrayList android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.interfaceChain()
public final java.lang.String android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.interfaceDescriptor()
public final boolean android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.linkToDeath(android.os.IHwBinder$DeathRecipient,long)
public final void android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.notifySyspropsChanged()
public void android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.onTransact(int,android.os.HwParcel,android.os.HwParcel,int) throws android.os.RemoteException
public final void android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.ping()
public android.os.IHwInterface android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.queryLocalInterface(java.lang.String)
public void android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.registerAsService(java.lang.String) throws android.os.RemoteException
public final void android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.setHALInstrumentation()
public java.lang.String android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.toString()
public final boolean android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub.unlinkToDeath(android.os.IHwBinder$DeathRecipient)
Tracing public android.hardware.radio.deprecated.V1_0.IOemHookResponse$Stub()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccProfile[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$1000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$1100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$1200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$1300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$800 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.access$900 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.areAllApplicationsReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.areAllRecordsLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.checkAndUpdateIfAnyAppToBeIgnored [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.checkIndexLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.createAndUpdateCatServiceLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeRules [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccStateReason [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getUninstalledCarrierPackages [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.handleCarrierNameOverride [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.handleSimCountryIsoOverride [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.isPackageInstalled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.isSupportedApplication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.loglocal [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.onCarrierPrivilegesLoadedMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.parseToCertificateToPackageMap [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.promptInstallCarrierApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.registerAllAppEvents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.registerCurrAppEvents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.sanitizeApplicationIndexesLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.setCurrentAppType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.setExternalState [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.unregisterAllAppEvents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.unregisterCurrAppEvents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.updateCarrierNameForSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.updateIccAvailability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.areCarrierPriviligeRulesLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.changeIccFdnPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.changeIccLockPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.finalize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getApplication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getApplicationByType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getApplicationIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getCarrierPackageNamesForIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatus [3 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatusForCurrentTransaction [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatusForUid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getCertsFromCarrierPrivilegeAccessRules [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccFdnAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccFdnEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccLockEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccPin2Blocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccPuk2Blocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccRecords [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getIccRecordsLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getNumApplications [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getOperatorBrandOverride [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getPhoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getServiceProviderName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.getUniversalPinState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.hasCarrierPrivilegeRules [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.hasIccCard [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.iccCloseLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.iccExchangeSimIO [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.iccOpenLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.iccTransmitApduBasicChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.iccTransmitApduLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.isApplicationOnIcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.isEmptyProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.refresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.registerForCarrierPrivilegeRulesLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.registerForNetworkLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.registerForOpertorBrandOverride [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.resetAppWithAid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.resetProperties [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.sendEnvelopeWithStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.setIccFdnEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.setIccLockEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.setOperatorBrandOverride [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.setVoiceRadioTech [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.supplyNetworkDepersonalization [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.supplyPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.supplyPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.supplyPuk [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.supplyPuk2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.unregisterForCarrierPrivilegeRulesLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.unregisterForNetworkLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.unregisterForOperatorBrandOverride [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.update [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.updateExternalState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static android.content.Context com.android.internal.telephony.uicc.UiccProfile.access$000(com.android.internal.telephony.uicc.UiccProfile)
static java.util.Set com.android.internal.telephony.uicc.UiccProfile.access$100(com.android.internal.telephony.uicc.UiccProfile)
static void com.android.internal.telephony.uicc.UiccProfile.access$1000(com.android.internal.telephony.uicc.UiccProfile)
static void com.android.internal.telephony.uicc.UiccProfile.access$1100(com.android.internal.telephony.uicc.UiccProfile)
static void com.android.internal.telephony.uicc.UiccProfile.access$1200(com.android.internal.telephony.uicc.UiccProfile)
static void com.android.internal.telephony.uicc.UiccProfile.access$1300(java.lang.String)
static boolean com.android.internal.telephony.uicc.UiccProfile.access$200(com.android.internal.telephony.uicc.UiccProfile)
static void com.android.internal.telephony.uicc.UiccProfile.access$300(java.lang.String)
static int com.android.internal.telephony.uicc.UiccProfile.access$400(com.android.internal.telephony.uicc.UiccProfile)
static void com.android.internal.telephony.uicc.UiccProfile.access$500(com.android.internal.telephony.uicc.UiccProfile,java.lang.String)
static android.os.RegistrantList com.android.internal.telephony.uicc.UiccProfile.access$600(com.android.internal.telephony.uicc.UiccProfile)
static int com.android.internal.telephony.uicc.UiccProfile.access$700(com.android.internal.telephony.uicc.UiccProfile)
static com.android.internal.telephony.uicc.IccRecords com.android.internal.telephony.uicc.UiccProfile.access$800(com.android.internal.telephony.uicc.UiccProfile)
static android.telephony.TelephonyManager com.android.internal.telephony.uicc.UiccProfile.access$900(com.android.internal.telephony.uicc.UiccProfile)
private boolean com.android.internal.telephony.uicc.UiccProfile.areAllApplicationsReady()
private boolean com.android.internal.telephony.uicc.UiccProfile.areAllRecordsLoaded()
private void com.android.internal.telephony.uicc.UiccProfile.checkAndUpdateIfAnyAppToBeIgnored()
private int com.android.internal.telephony.uicc.UiccProfile.checkIndexLocked(int,com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType,com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType)
private void com.android.internal.telephony.uicc.UiccProfile.createAndUpdateCatServiceLocked()
private com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeRules()
private java.lang.String com.android.internal.telephony.uicc.UiccProfile.getIccStateReason(com.android.internal.telephony.IccCardConstants$State)
private java.util.Set com.android.internal.telephony.uicc.UiccProfile.getUninstalledCarrierPackages()
private void com.android.internal.telephony.uicc.UiccProfile.handleCarrierNameOverride()
private void com.android.internal.telephony.uicc.UiccProfile.handleSimCountryIsoOverride()
static boolean com.android.internal.telephony.uicc.UiccProfile.isPackageInstalled(android.content.Context,java.lang.String)
private boolean com.android.internal.telephony.uicc.UiccProfile.isSupportedApplication(com.android.internal.telephony.uicc.UiccCardApplication)
private static void com.android.internal.telephony.uicc.UiccProfile.log(java.lang.String)
private static void com.android.internal.telephony.uicc.UiccProfile.loge(java.lang.String)
private void com.android.internal.telephony.uicc.UiccProfile.loglocal(java.lang.String)
private void com.android.internal.telephony.uicc.UiccProfile.onCarrierPrivilegesLoadedMessage()
public static java.util.Map com.android.internal.telephony.uicc.UiccProfile.parseToCertificateToPackageMap(java.lang.String)
private void com.android.internal.telephony.uicc.UiccProfile.promptInstallCarrierApp(java.lang.String)
private void com.android.internal.telephony.uicc.UiccProfile.registerAllAppEvents()
private void com.android.internal.telephony.uicc.UiccProfile.registerCurrAppEvents()
private void com.android.internal.telephony.uicc.UiccProfile.sanitizeApplicationIndexesLocked()
private void com.android.internal.telephony.uicc.UiccProfile.setCurrentAppType(boolean)
private void com.android.internal.telephony.uicc.UiccProfile.setExternalState(com.android.internal.telephony.IccCardConstants$State)
private void com.android.internal.telephony.uicc.UiccProfile.setExternalState(com.android.internal.telephony.IccCardConstants$State,boolean)
private void com.android.internal.telephony.uicc.UiccProfile.unregisterAllAppEvents()
private void com.android.internal.telephony.uicc.UiccProfile.unregisterCurrAppEvents()
private void com.android.internal.telephony.uicc.UiccProfile.updateCarrierNameForSubscription(com.android.internal.telephony.SubscriptionController,int,int)
private void com.android.internal.telephony.uicc.UiccProfile.updateIccAvailability(boolean)
public boolean com.android.internal.telephony.uicc.UiccProfile.areCarrierPriviligeRulesLoaded()
public void com.android.internal.telephony.uicc.UiccProfile.changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.dispose()
public void com.android.internal.telephony.uicc.UiccProfile.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
protected void com.android.internal.telephony.uicc.UiccProfile.finalize()
public com.android.internal.telephony.uicc.UiccCardApplication com.android.internal.telephony.uicc.UiccProfile.getApplication(int)
public com.android.internal.telephony.uicc.UiccCardApplication com.android.internal.telephony.uicc.UiccProfile.getApplicationByType(int)
public com.android.internal.telephony.uicc.UiccCardApplication com.android.internal.telephony.uicc.UiccProfile.getApplicationIndex(int)
public java.util.List com.android.internal.telephony.uicc.UiccProfile.getCarrierPackageNamesForIntent(android.content.pm.PackageManager,android.content.Intent)
public int com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatus(android.content.pm.PackageInfo)
public int com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatus(android.content.pm.PackageManager,java.lang.String)
public int com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatus(android.content.pm.Signature,java.lang.String)
public int com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatusForCurrentTransaction(android.content.pm.PackageManager)
public int com.android.internal.telephony.uicc.UiccProfile.getCarrierPrivilegeStatusForUid(android.content.pm.PackageManager,int)
public java.util.List com.android.internal.telephony.uicc.UiccProfile.getCertsFromCarrierPrivilegeAccessRules()
public boolean com.android.internal.telephony.uicc.UiccProfile.getIccFdnAvailable()
public boolean com.android.internal.telephony.uicc.UiccProfile.getIccFdnEnabled()
public java.lang.String com.android.internal.telephony.uicc.UiccProfile.getIccId()
public boolean com.android.internal.telephony.uicc.UiccProfile.getIccLockEnabled()
public boolean com.android.internal.telephony.uicc.UiccProfile.getIccPin2Blocked()
public boolean com.android.internal.telephony.uicc.UiccProfile.getIccPuk2Blocked()
public com.android.internal.telephony.uicc.IccRecords com.android.internal.telephony.uicc.UiccProfile.getIccRecords()
public boolean com.android.internal.telephony.uicc.UiccProfile.getIccRecordsLoaded()
public int com.android.internal.telephony.uicc.UiccProfile.getNumApplications()
public java.lang.String com.android.internal.telephony.uicc.UiccProfile.getOperatorBrandOverride()
public int com.android.internal.telephony.uicc.UiccProfile.getPhoneId()
public java.lang.String com.android.internal.telephony.uicc.UiccProfile.getServiceProviderName()
public com.android.internal.telephony.IccCardConstants$State com.android.internal.telephony.uicc.UiccProfile.getState()
public com.android.internal.telephony.uicc.IccCardStatus$PinState com.android.internal.telephony.uicc.UiccProfile.getUniversalPinState()
public boolean com.android.internal.telephony.uicc.UiccProfile.hasCarrierPrivilegeRules()
public boolean com.android.internal.telephony.uicc.UiccProfile.hasIccCard()
public void com.android.internal.telephony.uicc.UiccProfile.iccCloseLogicalChannel(int,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.iccExchangeSimIO(int,int,int,int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.iccOpenLogicalChannel(java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String,android.os.Message)
public boolean com.android.internal.telephony.uicc.UiccProfile.isApplicationOnIcc(com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType)
public boolean com.android.internal.telephony.uicc.UiccProfile.isEmptyProfile()
public void com.android.internal.telephony.uicc.UiccProfile.refresh()
public void com.android.internal.telephony.uicc.UiccProfile.registerForCarrierPrivilegeRulesLoaded(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.uicc.UiccProfile.registerForNetworkLocked(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.uicc.UiccProfile.registerForOpertorBrandOverride(android.os.Handler,int,java.lang.Object)
public boolean com.android.internal.telephony.uicc.UiccProfile.resetAppWithAid(java.lang.String,boolean)
void com.android.internal.telephony.uicc.UiccProfile.resetProperties()
public void com.android.internal.telephony.uicc.UiccProfile.sendEnvelopeWithStatus(java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.setIccFdnEnabled(boolean,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.setIccLockEnabled(boolean,java.lang.String,android.os.Message)
public boolean com.android.internal.telephony.uicc.UiccProfile.setOperatorBrandOverride(java.lang.String)
public void com.android.internal.telephony.uicc.UiccProfile.setVoiceRadioTech(int)
public void com.android.internal.telephony.uicc.UiccProfile.supplyNetworkDepersonalization(java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.supplyPin(java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.supplyPin2(java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.supplyPuk(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.supplyPuk2(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.uicc.UiccProfile.unregisterForCarrierPrivilegeRulesLoaded(android.os.Handler)
public void com.android.internal.telephony.uicc.UiccProfile.unregisterForNetworkLocked(android.os.Handler)
public void com.android.internal.telephony.uicc.UiccProfile.unregisterForOperatorBrandOverride(android.os.Handler)
public void com.android.internal.telephony.uicc.UiccProfile.update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)
public void com.android.internal.telephony.uicc.UiccProfile.updateExternalState()
Tracing public com.android.internal.telephony.uicc.UiccProfile(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus,int,com.android.internal.telephony.uicc.UiccCard,java.lang.Object)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.getFromServiceCategory [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.getLanguage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.getToServiceCategory [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.isSelected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.getFromServiceCategory()
public int com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.getLanguage()
public int com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.getToServiceCategory()
public boolean com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.isSelected()
public java.lang.String com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo.toString()
Tracing public com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo(int,int,int,boolean)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccProfile$3[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile$3.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccProfile$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.uicc.UiccProfile$3.handleMessage(android.os.Message)
Tracing com.android.internal.telephony.uicc.UiccProfile$3(com.android.internal.telephony.uicc.UiccProfile)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RIL$RadioProxyDeathRecipient[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL$RadioProxyDeathRecipient.serviceDied [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL$RadioProxyDeathRecipient.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.RIL$RadioProxyDeathRecipient.serviceDied(long)
Tracing com.android.internal.telephony.RIL$RadioProxyDeathRecipient(com.android.internal.telephony.RIL)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ServiceStateTracker[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$202 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$302 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$800 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.access$902 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.cancelAllNotifications [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.combinePsRegistrationStates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.containsEarfcnInEarfcnRange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.currentMccEqualsSimMcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.dumpCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.dumpEarfcnPairList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.fixUnknownMcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getBandwidthsFromConfigs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCarrierConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCellLocationFromCellInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCidFromCellIdentity [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getLteEarfcn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getOperatorBrandOverride [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getOperatorNameFromEri [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getSubscriptionInfoAndStartPollingThreads [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getUiccCardApplication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.handleCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.iccCardExists [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isGprsConsistent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isHomeSid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isInHomeSidNid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isInNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isInvalidOperatorNumeric [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isNrPhysicalChannelConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isNrStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isOperatorConsideredNonRoaming [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isOperatorConsideredRoaming [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isRoamIndForHomeSystem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isRoamingBetweenOperators [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isSameNamedOperators [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isSameOperatorNameFromSimAndSS [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isSimAbsent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isValidLteBandwidthKhz [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.logAttachChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.logPhoneTypeChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.logRatChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.logRoamingChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.modemTriggeredPollState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.networkCountryIsoChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.notifyCdmaSubscriptionInfoReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.notifySpnDisplayUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.onCarrierConfigChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.onRestrictedStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.pollStateDone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.processIwlanRegistrationInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.queueNextSignalStrengthPoll [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.regCodeIsRoaming [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.regCodeToServiceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.saveCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.selectResourceForRejectCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setPhyCellInfoFromCellIdentity [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setRoamingOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setRoamingOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setSignalStrengthDefaultValues [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setTimeFromNITZString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateLteEarfcnLists [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateNrFrequencyRangeFromPhysicalChannelConfigs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateNrStateFromPhysicalChannelConfigs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateOperatorNameForCellIdentity [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateOperatorNameForServiceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateOperatorNameFromCarrierConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateOperatorNamePattern [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateServiceStateLteEarfcnBoost [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateSpnDisplayCdnr [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateSpnDisplayLegacy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.alwaysOnHomeNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.cancelPollState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.checkCorrectThread [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.convertEarfcnStringArrayToPairList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.disableLocationUpdates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.disableSingleLocationUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.enableLocationUpdates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.enableSingleLocationUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.filterOperatorNameByPattern [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getAllCellInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCarrierNameDisplayBitmask [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCdmaEriText [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCdmaMin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCellLocation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCombinedRegState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getCurrentDataConnectionState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getDesiredPowerState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getHomeOperatorNumeric [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getImsi [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getLocaleTracker [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getMdnNumber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getOtasp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getPhoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getPowerStateFromCarrier [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getPrlVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getServiceProviderName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getServiceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getSignalStrength [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.getSystemProperty [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.handlePollStateResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.handlePollStateResultMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.hangupAndPowerOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.inSameCountry [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isCallerOnDifferentThread [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isConcurrentVoiceAndDataAllowed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isDeviceShuttingDown [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isImsRegistered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isMinInfoReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isNonRoamingInCdmaNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isNonRoamingInGsmNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isRadioOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isRoamingInCdmaNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isRoamingInGsmNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.isSidsAllZeros [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.notifyDataRegStateRilRadioTechnologyChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.notifySignalStrength [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.notifyVoiceRegStateRilRadioTechnologyChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.onImsCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.onImsServiceStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.onSignalStrengthResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.onUpdateIccAvailability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.parseSidNid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.pollState [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.powerOffRadioSafely [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.processPendingRadioPowerOffAfterDataOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.reRegisterNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForDataConnectionAttached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForDataConnectionDetached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForDataRegStateOrRatChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForDataRoamingOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForDataRoamingOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForImsCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForNetworkAttached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForNetworkDetached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForPsRestrictedDisabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForPsRestrictedEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForSubscriptionInfoReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForVoiceRegStateOrRatChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForVoiceRoamingOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.registerForVoiceRoamingOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.requestAllCellInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.requestCellLocation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.requestShutdown [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setCellInfoMinInterval [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setImsRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setOperatorIdd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setPowerStateToDesired [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setRadioPower [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setRadioPowerFromCarrier [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.setRoamingType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForDataConnectionAttached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForDataConnectionDetached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForDataRegStateOrRatChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForDataRoamingOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForDataRoamingOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForImsCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForNetworkAttached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForNetworkDetached [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForPsRestrictedDisabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForPsRestrictedEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForSubscriptionInfoReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForVoiceRegStateOrRatChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForVoiceRoamingOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.unregisterForVoiceRoamingOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateOperatorNameForCellInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateOtaspState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updatePhoneObject [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updatePhoneType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateRoamingState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.updateSpnDisplay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.useDataRegStateForDataOnlyDevices [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ServiceStateTracker.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static com.android.internal.telephony.GsmCdmaPhone com.android.internal.telephony.ServiceStateTracker.access$100(com.android.internal.telephony.ServiceStateTracker)
static int com.android.internal.telephony.ServiceStateTracker.access$202(com.android.internal.telephony.ServiceStateTracker,int)
static boolean com.android.internal.telephony.ServiceStateTracker.access$300(com.android.internal.telephony.ServiceStateTracker)
static boolean com.android.internal.telephony.ServiceStateTracker.access$302(com.android.internal.telephony.ServiceStateTracker,boolean)
static boolean com.android.internal.telephony.ServiceStateTracker.access$400(com.android.internal.telephony.ServiceStateTracker)
static java.lang.String com.android.internal.telephony.ServiceStateTracker.access$500(com.android.internal.telephony.ServiceStateTracker)
static boolean com.android.internal.telephony.ServiceStateTracker.access$600(com.android.internal.telephony.ServiceStateTracker)
static java.lang.String com.android.internal.telephony.ServiceStateTracker.access$700(com.android.internal.telephony.ServiceStateTracker)
static com.android.internal.telephony.SubscriptionController com.android.internal.telephony.ServiceStateTracker.access$800(com.android.internal.telephony.ServiceStateTracker)
static boolean com.android.internal.telephony.ServiceStateTracker.access$902(com.android.internal.telephony.ServiceStateTracker,boolean)
private void com.android.internal.telephony.ServiceStateTracker.cancelAllNotifications()
private void com.android.internal.telephony.ServiceStateTracker.combinePsRegistrationStates(android.telephony.ServiceState)
private boolean com.android.internal.telephony.ServiceStateTracker.containsEarfcnInEarfcnRange(java.util.ArrayList,int)
private boolean com.android.internal.telephony.ServiceStateTracker.currentMccEqualsSimMcc(android.telephony.ServiceState)
private void com.android.internal.telephony.ServiceStateTracker.dumpCellInfoList(java.io.PrintWriter)
private void com.android.internal.telephony.ServiceStateTracker.dumpEarfcnPairList(java.io.PrintWriter)
private java.lang.String com.android.internal.telephony.ServiceStateTracker.fixUnknownMcc(java.lang.String,int)
private int[] com.android.internal.telephony.ServiceStateTracker.getBandwidthsFromConfigs(java.util.List)
private android.os.PersistableBundle com.android.internal.telephony.ServiceStateTracker.getCarrierConfig()
private static android.telephony.CellLocation com.android.internal.telephony.ServiceStateTracker.getCellLocationFromCellInfo(java.util.List)
private static int com.android.internal.telephony.ServiceStateTracker.getCidFromCellIdentity(android.telephony.CellIdentity)
private int com.android.internal.telephony.ServiceStateTracker.getLteEarfcn(android.telephony.CellIdentity)
private java.lang.String com.android.internal.telephony.ServiceStateTracker.getOperatorBrandOverride()
private java.lang.String com.android.internal.telephony.ServiceStateTracker.getOperatorNameFromEri()
private void com.android.internal.telephony.ServiceStateTracker.getSubscriptionInfoAndStartPollingThreads()
private com.android.internal.telephony.uicc.UiccCardApplication com.android.internal.telephony.ServiceStateTracker.getUiccCardApplication()
private void com.android.internal.telephony.ServiceStateTracker.handleCdmaSubscriptionSource(int)
private boolean com.android.internal.telephony.ServiceStateTracker.iccCardExists()
private boolean com.android.internal.telephony.ServiceStateTracker.isGprsConsistent(int,int)
private boolean com.android.internal.telephony.ServiceStateTracker.isHomeSid(int)
private boolean com.android.internal.telephony.ServiceStateTracker.isInHomeSidNid(int,int)
private boolean com.android.internal.telephony.ServiceStateTracker.isInNetwork(android.os.BaseBundle,java.lang.String,java.lang.String)
private boolean com.android.internal.telephony.ServiceStateTracker.isInvalidOperatorNumeric(java.lang.String)
private boolean com.android.internal.telephony.ServiceStateTracker.isNrPhysicalChannelConfig(android.telephony.PhysicalChannelConfig)
private boolean com.android.internal.telephony.ServiceStateTracker.isNrStateChanged(android.telephony.NetworkRegistrationInfo,android.telephony.NetworkRegistrationInfo)
private boolean com.android.internal.telephony.ServiceStateTracker.isOperatorConsideredNonRoaming(android.telephony.ServiceState)
private boolean com.android.internal.telephony.ServiceStateTracker.isOperatorConsideredRoaming(android.telephony.ServiceState)
private boolean com.android.internal.telephony.ServiceStateTracker.isRoamIndForHomeSystem(int)
private boolean com.android.internal.telephony.ServiceStateTracker.isRoamingBetweenOperators(boolean,android.telephony.ServiceState)
private boolean com.android.internal.telephony.ServiceStateTracker.isSameNamedOperators(android.telephony.ServiceState)
private boolean com.android.internal.telephony.ServiceStateTracker.isSameOperatorNameFromSimAndSS(android.telephony.ServiceState)
private boolean com.android.internal.telephony.ServiceStateTracker.isSimAbsent()
private static boolean com.android.internal.telephony.ServiceStateTracker.isValidLteBandwidthKhz(int)
private void com.android.internal.telephony.ServiceStateTracker.logAttachChange()
private void com.android.internal.telephony.ServiceStateTracker.logPhoneTypeChange()
private void com.android.internal.telephony.ServiceStateTracker.logRatChange()
private void com.android.internal.telephony.ServiceStateTracker.logRoamingChange()
private void com.android.internal.telephony.ServiceStateTracker.modemTriggeredPollState()
private boolean com.android.internal.telephony.ServiceStateTracker.networkCountryIsoChanged(java.lang.String,java.lang.String)
private void com.android.internal.telephony.ServiceStateTracker.notifyCdmaSubscriptionInfoReady()
private void com.android.internal.telephony.ServiceStateTracker.notifySpnDisplayUpdate(com.android.internal.telephony.cdnr.CarrierDisplayNameData)
private void com.android.internal.telephony.ServiceStateTracker.onCarrierConfigChanged()
private void com.android.internal.telephony.ServiceStateTracker.onRestrictedStateChanged(android.os.AsyncResult)
private void com.android.internal.telephony.ServiceStateTracker.pollStateDone()
private void com.android.internal.telephony.ServiceStateTracker.processIwlanRegistrationInfo()
private void com.android.internal.telephony.ServiceStateTracker.queueNextSignalStrengthPoll()
private boolean com.android.internal.telephony.ServiceStateTracker.regCodeIsRoaming(int)
private int com.android.internal.telephony.ServiceStateTracker.regCodeToServiceState(int)
private void com.android.internal.telephony.ServiceStateTracker.saveCdmaSubscriptionSource(int)
private int com.android.internal.telephony.ServiceStateTracker.selectResourceForRejectCode(int,boolean)
private void com.android.internal.telephony.ServiceStateTracker.setPhyCellInfoFromCellIdentity(android.telephony.ServiceState,android.telephony.CellIdentity)
private void com.android.internal.telephony.ServiceStateTracker.setRoamingOff()
private void com.android.internal.telephony.ServiceStateTracker.setRoamingOn()
private void com.android.internal.telephony.ServiceStateTracker.setSignalStrengthDefaultValues()
private void com.android.internal.telephony.ServiceStateTracker.setTimeFromNITZString(java.lang.String,long)
private void com.android.internal.telephony.ServiceStateTracker.updateLteEarfcnLists(android.os.PersistableBundle)
private boolean com.android.internal.telephony.ServiceStateTracker.updateNrFrequencyRangeFromPhysicalChannelConfigs(java.util.List,android.telephony.ServiceState)
private boolean com.android.internal.telephony.ServiceStateTracker.updateNrStateFromPhysicalChannelConfigs(java.util.List,android.telephony.ServiceState)
private void com.android.internal.telephony.ServiceStateTracker.updateOperatorNameForCellIdentity(android.telephony.CellIdentity)
private void com.android.internal.telephony.ServiceStateTracker.updateOperatorNameForServiceState(android.telephony.ServiceState)
private void com.android.internal.telephony.ServiceStateTracker.updateOperatorNameFromCarrierConfig()
private void com.android.internal.telephony.ServiceStateTracker.updateOperatorNamePattern(android.os.PersistableBundle)
private void com.android.internal.telephony.ServiceStateTracker.updateReportingCriteria(android.os.PersistableBundle)
private void com.android.internal.telephony.ServiceStateTracker.updateServiceStateLteEarfcnBoost(android.telephony.ServiceState,int)
private void com.android.internal.telephony.ServiceStateTracker.updateSpnDisplayCdnr()
private void com.android.internal.telephony.ServiceStateTracker.updateSpnDisplayLegacy()
protected final boolean com.android.internal.telephony.ServiceStateTracker.alwaysOnHomeNetwork(android.os.BaseBundle)
protected void com.android.internal.telephony.ServiceStateTracker.cancelPollState()
protected void com.android.internal.telephony.ServiceStateTracker.checkCorrectThread()
java.util.ArrayList com.android.internal.telephony.ServiceStateTracker.convertEarfcnStringArrayToPairList(java.lang.String[])
public void com.android.internal.telephony.ServiceStateTracker.disableLocationUpdates()
protected void com.android.internal.telephony.ServiceStateTracker.disableSingleLocationUpdate()
public void com.android.internal.telephony.ServiceStateTracker.dispose()
public void com.android.internal.telephony.ServiceStateTracker.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.ServiceStateTracker.enableLocationUpdates()
public void com.android.internal.telephony.ServiceStateTracker.enableSingleLocationUpdate()
public java.lang.String com.android.internal.telephony.ServiceStateTracker.filterOperatorNameByPattern(java.lang.String)
public java.util.List com.android.internal.telephony.ServiceStateTracker.getAllCellInfo()
public int com.android.internal.telephony.ServiceStateTracker.getCarrierNameDisplayBitmask(android.telephony.ServiceState)
java.lang.String com.android.internal.telephony.ServiceStateTracker.getCdmaEriText(int,int)
public java.lang.String com.android.internal.telephony.ServiceStateTracker.getCdmaMin()
public android.telephony.CellLocation com.android.internal.telephony.ServiceStateTracker.getCellLocation()
protected int com.android.internal.telephony.ServiceStateTracker.getCombinedRegState(android.telephony.ServiceState)
public int com.android.internal.telephony.ServiceStateTracker.getCurrentDataConnectionState()
public boolean com.android.internal.telephony.ServiceStateTracker.getDesiredPowerState()
protected java.lang.String com.android.internal.telephony.ServiceStateTracker.getHomeOperatorNumeric()
public java.lang.String com.android.internal.telephony.ServiceStateTracker.getImsi()
public com.android.internal.telephony.LocaleTracker com.android.internal.telephony.ServiceStateTracker.getLocaleTracker()
public java.lang.String com.android.internal.telephony.ServiceStateTracker.getMdnNumber()
public int com.android.internal.telephony.ServiceStateTracker.getOtasp()
protected com.android.internal.telephony.Phone com.android.internal.telephony.ServiceStateTracker.getPhone()
protected int com.android.internal.telephony.ServiceStateTracker.getPhoneId()
public boolean com.android.internal.telephony.ServiceStateTracker.getPowerStateFromCarrier()
public java.lang.String com.android.internal.telephony.ServiceStateTracker.getPrlVersion()
public java.lang.String com.android.internal.telephony.ServiceStateTracker.getServiceProviderName()
public android.telephony.ServiceState com.android.internal.telephony.ServiceStateTracker.getServiceState()
public android.telephony.SignalStrength com.android.internal.telephony.ServiceStateTracker.getSignalStrength()
public java.lang.String com.android.internal.telephony.ServiceStateTracker.getSystemProperty(java.lang.String,java.lang.String)
public void com.android.internal.telephony.ServiceStateTracker.handleMessage(android.os.Message)
protected void com.android.internal.telephony.ServiceStateTracker.handlePollStateResult(int,android.os.AsyncResult)
void com.android.internal.telephony.ServiceStateTracker.handlePollStateResultMessage(int,android.os.AsyncResult)
protected void com.android.internal.telephony.ServiceStateTracker.hangupAndPowerOff()
protected boolean com.android.internal.telephony.ServiceStateTracker.inSameCountry(java.lang.String)
protected boolean com.android.internal.telephony.ServiceStateTracker.isCallerOnDifferentThread()
public boolean com.android.internal.telephony.ServiceStateTracker.isConcurrentVoiceAndDataAllowed()
public boolean com.android.internal.telephony.ServiceStateTracker.isDeviceShuttingDown()
public boolean com.android.internal.telephony.ServiceStateTracker.isImsRegistered()
public boolean com.android.internal.telephony.ServiceStateTracker.isMinInfoReady()
protected final boolean com.android.internal.telephony.ServiceStateTracker.isNonRoamingInCdmaNetwork(android.os.BaseBundle,java.lang.String)
protected final boolean com.android.internal.telephony.ServiceStateTracker.isNonRoamingInGsmNetwork(android.os.BaseBundle,java.lang.String)
public boolean com.android.internal.telephony.ServiceStateTracker.isRadioOn()
protected final boolean com.android.internal.telephony.ServiceStateTracker.isRoamingInCdmaNetwork(android.os.BaseBundle,java.lang.String)
protected final boolean com.android.internal.telephony.ServiceStateTracker.isRoamingInGsmNetwork(android.os.BaseBundle,java.lang.String)
protected boolean com.android.internal.telephony.ServiceStateTracker.isSidsAllZeros()
protected final void com.android.internal.telephony.ServiceStateTracker.log(java.lang.String)
protected final void com.android.internal.telephony.ServiceStateTracker.loge(java.lang.String)
protected void com.android.internal.telephony.ServiceStateTracker.notifyDataRegStateRilRadioTechnologyChanged(int)
protected boolean com.android.internal.telephony.ServiceStateTracker.notifySignalStrength()
protected void com.android.internal.telephony.ServiceStateTracker.notifyVoiceRegStateRilRadioTechnologyChanged()
public void com.android.internal.telephony.ServiceStateTracker.onImsCapabilityChanged()
public void com.android.internal.telephony.ServiceStateTracker.onImsServiceStateChanged()
protected boolean com.android.internal.telephony.ServiceStateTracker.onSignalStrengthResult(android.os.AsyncResult)
protected void com.android.internal.telephony.ServiceStateTracker.onUpdateIccAvailability()
protected void com.android.internal.telephony.ServiceStateTracker.parseSidNid(java.lang.String,java.lang.String)
public void com.android.internal.telephony.ServiceStateTracker.pollState()
public void com.android.internal.telephony.ServiceStateTracker.pollState(boolean)
public void com.android.internal.telephony.ServiceStateTracker.powerOffRadioSafely()
public boolean com.android.internal.telephony.ServiceStateTracker.processPendingRadioPowerOffAfterDataOff()
public void com.android.internal.telephony.ServiceStateTracker.reRegisterNetwork(android.os.Message)
public void com.android.internal.telephony.ServiceStateTracker.registerForDataConnectionAttached(int,android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForDataConnectionDetached(int,android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForDataRegStateOrRatChanged(int,android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForDataRoamingOff(android.os.Handler,int,java.lang.Object,boolean)
public void com.android.internal.telephony.ServiceStateTracker.registerForDataRoamingOn(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForImsCapabilityChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForNetworkAttached(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForNetworkDetached(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForPsRestrictedDisabled(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForPsRestrictedEnabled(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForSubscriptionInfoReady(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForVoiceRegStateOrRatChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForVoiceRoamingOff(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.registerForVoiceRoamingOn(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.ServiceStateTracker.requestAllCellInfo(android.os.WorkSource,android.os.Message)
public void com.android.internal.telephony.ServiceStateTracker.requestCellLocation(android.os.WorkSource,android.os.Message)
public void com.android.internal.telephony.ServiceStateTracker.requestShutdown()
public void com.android.internal.telephony.ServiceStateTracker.setCellInfoMinInterval(int)
public void com.android.internal.telephony.ServiceStateTracker.setImsRegistrationState(boolean)
public void com.android.internal.telephony.ServiceStateTracker.setNotification(int)
protected void com.android.internal.telephony.ServiceStateTracker.setOperatorIdd(java.lang.String)
protected void com.android.internal.telephony.ServiceStateTracker.setPowerStateToDesired()
public void com.android.internal.telephony.ServiceStateTracker.setRadioPower(boolean)
public void com.android.internal.telephony.ServiceStateTracker.setRadioPowerFromCarrier(boolean)
protected void com.android.internal.telephony.ServiceStateTracker.setRoamingType(android.telephony.ServiceState)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForDataConnectionAttached(int,android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForDataConnectionDetached(int,android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForDataRegStateOrRatChanged(int,android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForDataRoamingOff(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForDataRoamingOn(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForImsCapabilityChanged(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForNetworkAttached(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForNetworkDetached(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForPsRestrictedDisabled(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForPsRestrictedEnabled(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForSubscriptionInfoReady(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForVoiceRegStateOrRatChanged(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForVoiceRoamingOff(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.unregisterForVoiceRoamingOn(android.os.Handler)
public void com.android.internal.telephony.ServiceStateTracker.updateOperatorNameForCellInfo(java.util.List)
protected void com.android.internal.telephony.ServiceStateTracker.updateOtaspState()
protected void com.android.internal.telephony.ServiceStateTracker.updatePhoneObject()
public void com.android.internal.telephony.ServiceStateTracker.updatePhoneType()
protected void com.android.internal.telephony.ServiceStateTracker.updateRoamingState()
public void com.android.internal.telephony.ServiceStateTracker.updateSpnDisplay()
protected void com.android.internal.telephony.ServiceStateTracker.useDataRegStateForDataOnlyDevices()
Tracing public com.android.internal.telephony.ServiceStateTracker(com.android.internal.telephony.GsmCdmaPhone,com.android.internal.telephony.CommandsInterface)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.getDefault [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.handleGetCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.logw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.registerForCdmaSubscriptionSourceChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.getCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static int com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.getDefault(android.content.Context)
public static com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.getInstance(android.content.Context,com.android.internal.telephony.CommandsInterface,android.os.Handler,int,java.lang.Object)
private void com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.handleGetCdmaSubscriptionSource(android.os.AsyncResult)
private void com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.log(java.lang.String)
private void com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.logw(java.lang.String)
private void com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.registerForCdmaSubscriptionSourceChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.dispose(android.os.Handler)
public int com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.getCdmaSubscriptionSource()
public void com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager.handleMessage(android.os.Message)
Tracing private com.android.internal.telephony.cdma.CdmaSubscriptionSourceManager(android.content.Context,com.android.internal.telephony.CommandsInterface)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.getValidatedPaths [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.isComponentInjected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$getValidatedPaths$0 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$getValidatedPaths$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.makeInjectedInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseComponent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseComponents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseInjection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseXml [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseXmlByTag [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.setAttributes [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$parseComponents$4$TelephonyComponentFactory$InjectedComponents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$parseInjection$3$TelephonyComponentFactory$InjectedComponents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$parseXml$2$TelephonyComponentFactory$InjectedComponents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$200(com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents,org.xmlpull.v1.XmlPullParser)
static void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$300(com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents)
static java.lang.String com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$400(com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents)
static java.util.Set com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$500(com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents)
static boolean com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$600(com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents,java.lang.String)
static com.android.internal.telephony.TelephonyComponentFactory com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.access$700(com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents)
private java.lang.String com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.getValidatedPaths()
private boolean com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.isComponentInjected(java.lang.String)
static boolean com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$getValidatedPaths$0(java.lang.String)
static boolean com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$getValidatedPaths$1(java.lang.String)
private void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.makeInjectedInstance()
private void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseComponent(org.xmlpull.v1.XmlPullParser)
private void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseComponents(org.xmlpull.v1.XmlPullParser)
private void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseInjection(org.xmlpull.v1.XmlPullParser)
private void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseXml(org.xmlpull.v1.XmlPullParser)
private void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.parseXmlByTag(org.xmlpull.v1.XmlPullParser,boolean,java.util.function.Consumer,java.lang.String)
private void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.setAttributes(org.xmlpull.v1.XmlPullParser)
public void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$parseComponents$4$TelephonyComponentFactory$InjectedComponents(org.xmlpull.v1.XmlPullParser)
public void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$parseInjection$3$TelephonyComponentFactory$InjectedComponents(org.xmlpull.v1.XmlPullParser)
public void com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents.lambda$parseXml$2$TelephonyComponentFactory$InjectedComponents(org.xmlpull.v1.XmlPullParser)
Tracing private com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents()
Tracing com.android.internal.telephony.TelephonyComponentFactory$InjectedComponents(com.android.internal.telephony.TelephonyComponentFactory$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.AdnRecord[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.parseRecord [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.stringCompareNullEqualsEmpty [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.appendExtRecord [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.buildAdnString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.describeContents [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.getAlphaTag [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.getEfid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.getEmails [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.getNumber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.getRecId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.hasExtendedRecord [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.isEmpty [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.isEqual [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.setEmails [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.setNumber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.writeToParcel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecord.$init [6 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.uicc.AdnRecord.parseRecord(byte[])
private static boolean com.android.internal.telephony.uicc.AdnRecord.stringCompareNullEqualsEmpty(java.lang.String,java.lang.String)
public void com.android.internal.telephony.uicc.AdnRecord.appendExtRecord(byte[])
public byte[] com.android.internal.telephony.uicc.AdnRecord.buildAdnString(int)
public int com.android.internal.telephony.uicc.AdnRecord.describeContents()
public java.lang.String com.android.internal.telephony.uicc.AdnRecord.getAlphaTag()
public int com.android.internal.telephony.uicc.AdnRecord.getEfid()
public java.lang.String[] com.android.internal.telephony.uicc.AdnRecord.getEmails()
public java.lang.String com.android.internal.telephony.uicc.AdnRecord.getNumber()
public int com.android.internal.telephony.uicc.AdnRecord.getRecId()
public boolean com.android.internal.telephony.uicc.AdnRecord.hasExtendedRecord()
public boolean com.android.internal.telephony.uicc.AdnRecord.isEmpty()
public boolean com.android.internal.telephony.uicc.AdnRecord.isEqual(com.android.internal.telephony.uicc.AdnRecord)
public void com.android.internal.telephony.uicc.AdnRecord.setEmails(java.lang.String[])
public void com.android.internal.telephony.uicc.AdnRecord.setNumber(java.lang.String)
public java.lang.String com.android.internal.telephony.uicc.AdnRecord.toString()
public void com.android.internal.telephony.uicc.AdnRecord.writeToParcel(android.os.Parcel,int)
Tracing public com.android.internal.telephony.uicc.AdnRecord(int,int,java.lang.String,java.lang.String)
Tracing public com.android.internal.telephony.uicc.AdnRecord(int,int,java.lang.String,java.lang.String,java.lang.String[])
Tracing public com.android.internal.telephony.uicc.AdnRecord(int,int,byte[])
Tracing public com.android.internal.telephony.uicc.AdnRecord(java.lang.String,java.lang.String)
Tracing public com.android.internal.telephony.uicc.AdnRecord(java.lang.String,java.lang.String,java.lang.String[])
Tracing public com.android.internal.telephony.uicc.AdnRecord(byte[])
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.NitzStateMachine[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.dumpLogs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.dumpState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.getCachedNitzData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.getSavedTimeZoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.handleNetworkAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.handleNetworkCountryCodeSet [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.handleNetworkCountryCodeUnavailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzStateMachine.handleNitzReceived [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void com.android.internal.telephony.NitzStateMachine.dumpLogs(java.io.FileDescriptor,com.android.internal.util.IndentingPrintWriter,java.lang.String[])
public abstract void com.android.internal.telephony.NitzStateMachine.dumpState(java.io.PrintWriter)
public abstract com.android.internal.telephony.NitzData com.android.internal.telephony.NitzStateMachine.getCachedNitzData()
public abstract java.lang.String com.android.internal.telephony.NitzStateMachine.getSavedTimeZoneId()
public abstract void com.android.internal.telephony.NitzStateMachine.handleNetworkAvailable()
public abstract void com.android.internal.telephony.NitzStateMachine.handleNetworkCountryCodeSet(boolean)
public abstract void com.android.internal.telephony.NitzStateMachine.handleNetworkCountryCodeUnavailable()
public abstract void com.android.internal.telephony.NitzStateMachine.handleNitzReceived(android.util.TimestampedValue)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.hardware.radio.config.V1_2.IRadioConfigIndication[39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.asInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.castFrom [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.getService [4 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.debug [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.getDebugInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.getHashChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.interfaceChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.interfaceDescriptor [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.linkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.notifySyspropsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.ping [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.setHALInstrumentation [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.simSlotsStatusChanged_1_2 [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigIndication.unlinkToDeath [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static android.hardware.radio.config.V1_2.IRadioConfigIndication android.hardware.radio.config.V1_2.IRadioConfigIndication.asInterface(android.os.IHwBinder)
public static android.hardware.radio.config.V1_2.IRadioConfigIndication android.hardware.radio.config.V1_2.IRadioConfigIndication.castFrom(android.os.IHwInterface)
public static android.hardware.radio.config.V1_2.IRadioConfigIndication android.hardware.radio.config.V1_2.IRadioConfigIndication.getService() throws android.os.RemoteException
public static android.hardware.radio.config.V1_2.IRadioConfigIndication android.hardware.radio.config.V1_2.IRadioConfigIndication.getService(java.lang.String) throws android.os.RemoteException
public static android.hardware.radio.config.V1_2.IRadioConfigIndication android.hardware.radio.config.V1_2.IRadioConfigIndication.getService(java.lang.String,boolean) throws android.os.RemoteException
public static android.hardware.radio.config.V1_2.IRadioConfigIndication android.hardware.radio.config.V1_2.IRadioConfigIndication.getService(boolean) throws android.os.RemoteException
public abstract android.os.IHwBinder android.hardware.radio.config.V1_2.IRadioConfigIndication.asBinder()
public abstract void android.hardware.radio.config.V1_2.IRadioConfigIndication.debug(android.os.NativeHandle,java.util.ArrayList) throws android.os.RemoteException
public abstract android.internal.hidl.base.V1_0.DebugInfo android.hardware.radio.config.V1_2.IRadioConfigIndication.getDebugInfo() throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.config.V1_2.IRadioConfigIndication.getHashChain() throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.config.V1_2.IRadioConfigIndication.interfaceChain() throws android.os.RemoteException
public abstract java.lang.String android.hardware.radio.config.V1_2.IRadioConfigIndication.interfaceDescriptor() throws android.os.RemoteException
public abstract boolean android.hardware.radio.config.V1_2.IRadioConfigIndication.linkToDeath(android.os.IHwBinder$DeathRecipient,long) throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigIndication.notifySyspropsChanged() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigIndication.ping() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigIndication.setHALInstrumentation() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigIndication.simSlotsStatusChanged_1_2(int,java.util.ArrayList) throws android.os.RemoteException
public abstract boolean android.hardware.radio.config.V1_2.IRadioConfigIndication.unlinkToDeath(android.os.IHwBinder$DeathRecipient) throws android.os.RemoteException
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver$ImsServiceControllerFactory[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceControllerFactory.create [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceControllerFactory.getServiceInterface [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver$ImsServiceControllerFactory.create(android.content.Context,android.content.ComponentName,com.android.internal.telephony.ims.ImsServiceController$ImsServiceControllerCallbacks)
public abstract java.lang.String com.android.internal.telephony.ims.ImsResolver$ImsServiceControllerFactory.getServiceInterface()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient.binderDied [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient.binderDied()
Tracing com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient(com.android.internal.telephony.NetworkRegistrationManager,android.content.ComponentName)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.MccTable[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.countryCodeForMcc [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.defaultLanguageForMcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.defaultTimeZoneForMcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.entryForMcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.getLocaleForLanguageCountry [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.getLocaleFromMcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.lookupFallback [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.setTimezoneFromMccIfNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.smallestDigitsMccForMnc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.updateMccMncConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static java.lang.String com.android.internal.telephony.MccTable.countryCodeForMcc(int)
public static java.lang.String com.android.internal.telephony.MccTable.countryCodeForMcc(java.lang.String)
public static java.lang.String com.android.internal.telephony.MccTable.defaultLanguageForMcc(int)
public static java.lang.String com.android.internal.telephony.MccTable.defaultTimeZoneForMcc(int)
private static com.android.internal.telephony.MccTable$MccEntry com.android.internal.telephony.MccTable.entryForMcc(int)
private static java.util.Locale com.android.internal.telephony.MccTable.getLocaleForLanguageCountry(android.content.Context,java.lang.String,java.lang.String)
public static java.util.Locale com.android.internal.telephony.MccTable.getLocaleFromMcc(android.content.Context,int,java.lang.String)
private static java.util.Locale com.android.internal.telephony.MccTable.lookupFallback(java.util.Locale,java.util.List)
private static void com.android.internal.telephony.MccTable.setTimezoneFromMccIfNeeded(android.content.Context,int)
public static int com.android.internal.telephony.MccTable.smallestDigitsMccForMnc(int)
public static void com.android.internal.telephony.MccTable.updateMccMncConfiguration(android.content.Context,java.lang.String)
Tracing public com.android.internal.telephony.MccTable()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.InboundSmsHandler$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.InboundSmsHandler$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
Tracing com.android.internal.telephony.InboundSmsHandler$1()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver$6[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$6.create [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$6.getServiceInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$6.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver$6.create(android.content.Context,android.content.ComponentName,com.android.internal.telephony.ims.ImsServiceController$ImsServiceControllerCallbacks)
public java.lang.String com.android.internal.telephony.ims.ImsResolver$6.getServiceInterface()
Tracing com.android.internal.telephony.ims.ImsResolver$6(com.android.internal.telephony.ims.ImsResolver)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccController[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.addCardId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.eidIsNotSupported [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getCiIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getIccStateIntentString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.isCdmaSupported [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.isValidPhoneIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.isValidSlotIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.loadCardStrings [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.logPhoneIdToSlotIdMapping [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.make [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.onEidReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.onGetIccCardStatusDone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.onGetSlotStatusDone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.onSimRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.saveCardStrings [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.slotStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.updateInternalIccState [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.addCardLog [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.convertToPublicCardId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getAllUiccCardInfos [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getCardIdForDefaultEuicc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getIccFileHandler [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getIccRecords [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getPhoneIdFromSlotId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getSlotIdFromPhoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccCard [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccCardApplication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccCardForPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccCardForSlot [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccProfileForPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccSlot [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccSlotForCardId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccSlotForPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.getUiccSlots [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.registerForIccChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.switchSlots [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.unregisterForIccChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccController.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.uicc.UiccController.addCardId(java.lang.String)
private boolean com.android.internal.telephony.uicc.UiccController.eidIsNotSupported(com.android.internal.telephony.uicc.IccCardStatus)
private java.lang.Integer com.android.internal.telephony.uicc.UiccController.getCiIndex(android.os.Message)
static java.lang.String com.android.internal.telephony.uicc.UiccController.getIccStateIntentString(com.android.internal.telephony.IccCardConstants$State)
public static com.android.internal.telephony.uicc.UiccController com.android.internal.telephony.uicc.UiccController.getInstance()
public static boolean com.android.internal.telephony.uicc.UiccController.isCdmaSupported(android.content.Context)
private boolean com.android.internal.telephony.uicc.UiccController.isValidPhoneIndex(int)
private boolean com.android.internal.telephony.uicc.UiccController.isValidSlotIndex(int)
private java.util.ArrayList com.android.internal.telephony.uicc.UiccController.loadCardStrings()
private void com.android.internal.telephony.uicc.UiccController.log(java.lang.String)
private void com.android.internal.telephony.uicc.UiccController.logPhoneIdToSlotIdMapping()
public static com.android.internal.telephony.uicc.UiccController com.android.internal.telephony.uicc.UiccController.make(android.content.Context,com.android.internal.telephony.CommandsInterface[])
private void com.android.internal.telephony.uicc.UiccController.onEidReady(android.os.AsyncResult,java.lang.Integer)
private synchronized void com.android.internal.telephony.uicc.UiccController.onGetIccCardStatusDone(android.os.AsyncResult,java.lang.Integer)
private synchronized void com.android.internal.telephony.uicc.UiccController.onGetSlotStatusDone(android.os.AsyncResult)
private void com.android.internal.telephony.uicc.UiccController.onSimRefresh(android.os.AsyncResult,java.lang.Integer)
private void com.android.internal.telephony.uicc.UiccController.saveCardStrings()
private boolean com.android.internal.telephony.uicc.UiccController.slotStatusChanged(java.util.ArrayList)
static void com.android.internal.telephony.uicc.UiccController.updateInternalIccState(android.content.Context,com.android.internal.telephony.IccCardConstants$State,java.lang.String,int)
static void com.android.internal.telephony.uicc.UiccController.updateInternalIccState(android.content.Context,com.android.internal.telephony.IccCardConstants$State,java.lang.String,int,boolean)
public void com.android.internal.telephony.uicc.UiccController.addCardLog(java.lang.String)
public int com.android.internal.telephony.uicc.UiccController.convertToPublicCardId(java.lang.String)
public void com.android.internal.telephony.uicc.UiccController.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public java.util.ArrayList com.android.internal.telephony.uicc.UiccController.getAllUiccCardInfos()
public int com.android.internal.telephony.uicc.UiccController.getCardIdForDefaultEuicc()
public com.android.internal.telephony.uicc.IccFileHandler com.android.internal.telephony.uicc.UiccController.getIccFileHandler(int,int)
public com.android.internal.telephony.uicc.IccRecords com.android.internal.telephony.uicc.UiccController.getIccRecords(int,int)
public int com.android.internal.telephony.uicc.UiccController.getPhoneIdFromSlotId(int)
public int com.android.internal.telephony.uicc.UiccController.getSlotIdFromPhoneId(int)
public com.android.internal.telephony.uicc.UiccCard com.android.internal.telephony.uicc.UiccController.getUiccCard(int)
public com.android.internal.telephony.uicc.UiccCardApplication com.android.internal.telephony.uicc.UiccController.getUiccCardApplication(int,int)
public com.android.internal.telephony.uicc.UiccCard com.android.internal.telephony.uicc.UiccController.getUiccCardForPhone(int)
public com.android.internal.telephony.uicc.UiccCard com.android.internal.telephony.uicc.UiccController.getUiccCardForSlot(int)
public com.android.internal.telephony.uicc.UiccProfile com.android.internal.telephony.uicc.UiccController.getUiccProfileForPhone(int)
public com.android.internal.telephony.uicc.UiccSlot com.android.internal.telephony.uicc.UiccController.getUiccSlot(int)
public int com.android.internal.telephony.uicc.UiccController.getUiccSlotForCardId(java.lang.String)
public com.android.internal.telephony.uicc.UiccSlot com.android.internal.telephony.uicc.UiccController.getUiccSlotForPhone(int)
public com.android.internal.telephony.uicc.UiccSlot[] com.android.internal.telephony.uicc.UiccController.getUiccSlots()
public void com.android.internal.telephony.uicc.UiccController.handleMessage(android.os.Message)
public void com.android.internal.telephony.uicc.UiccController.registerForIccChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.uicc.UiccController.switchSlots(int[],android.os.Message)
public void com.android.internal.telephony.uicc.UiccController.unregisterForIccChanged(android.os.Handler)
Tracing private com.android.internal.telephony.uicc.UiccController(android.content.Context,com.android.internal.telephony.CommandsInterface[])
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierActionAgent$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.CarrierActionAgent$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.CarrierActionAgent$1(com.android.internal.telephony.CarrierActionAgent)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo[] com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.emptyArray()
public static com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.clear()
protected int com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.computeSerializedSize()
public com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SmsStorageMonitor[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor.createWakelock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor.handleIccFull [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor.isStorageAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.SmsStorageMonitor.createWakelock()
private void com.android.internal.telephony.SmsStorageMonitor.handleIccFull()
public void com.android.internal.telephony.SmsStorageMonitor.dispose()
public void com.android.internal.telephony.SmsStorageMonitor.handleMessage(android.os.Message)
public boolean com.android.internal.telephony.SmsStorageMonitor.isStorageAvailable()
Tracing public com.android.internal.telephony.SmsStorageMonitor(com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccProfile$4[39;49;00m
[32;01m	Spec: => 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.phone.ecc.nano.MessageNano[39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.mergeFrom [3 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.messageNanoEquals [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.toByteArray [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.clone [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.getCachedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.getSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.MessageNano.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static final com.android.phone.ecc.nano.MessageNano com.android.phone.ecc.nano.MessageNano.mergeFrom(com.android.phone.ecc.nano.MessageNano,byte[]) throws com.android.phone.ecc.nano.InvalidProtocolBufferNanoException
public static final com.android.phone.ecc.nano.MessageNano com.android.phone.ecc.nano.MessageNano.mergeFrom(com.android.phone.ecc.nano.MessageNano,byte[],int,int) throws com.android.phone.ecc.nano.InvalidProtocolBufferNanoException
public static final boolean com.android.phone.ecc.nano.MessageNano.messageNanoEquals(com.android.phone.ecc.nano.MessageNano,com.android.phone.ecc.nano.MessageNano)
public static final void com.android.phone.ecc.nano.MessageNano.toByteArray(com.android.phone.ecc.nano.MessageNano,byte[],int,int)
public static final byte[] com.android.phone.ecc.nano.MessageNano.toByteArray(com.android.phone.ecc.nano.MessageNano)
public com.android.phone.ecc.nano.MessageNano com.android.phone.ecc.nano.MessageNano.clone() throws java.lang.CloneNotSupportedException
public java.lang.Object com.android.phone.ecc.nano.MessageNano.clone() throws java.lang.CloneNotSupportedException
protected int com.android.phone.ecc.nano.MessageNano.computeSerializedSize()
public int com.android.phone.ecc.nano.MessageNano.getCachedSize()
public int com.android.phone.ecc.nano.MessageNano.getSerializedSize()
public abstract com.android.phone.ecc.nano.MessageNano com.android.phone.ecc.nano.MessageNano.mergeFrom(com.android.phone.ecc.nano.CodedInputByteBufferNano) throws java.io.IOException
public java.lang.String com.android.phone.ecc.nano.MessageNano.toString()
public void com.android.phone.ecc.nano.MessageNano.writeTo(com.android.phone.ecc.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.phone.ecc.nano.MessageNano()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.IccCard[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.sendMessageWithCardAbsentException [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.changeIccFdnPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.changeIccLockPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getIccFdnAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getIccFdnEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getIccLockEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getIccPin2Blocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getIccPuk2Blocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getIccRecords [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getServiceProviderName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.getState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.hasIccCard [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.isApplicationOnIcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.isEmptyProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.registerForNetworkLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.setIccFdnEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.setIccLockEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.supplyNetworkDepersonalization [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.supplyPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.supplyPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.supplyPuk [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.supplyPuk2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.unregisterForNetworkLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccCard.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.IccCard.sendMessageWithCardAbsentException(android.os.Message)
public void com.android.internal.telephony.IccCard.changeIccFdnPassword(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.changeIccLockPassword(java.lang.String,java.lang.String,android.os.Message)
public boolean com.android.internal.telephony.IccCard.getIccFdnAvailable()
public boolean com.android.internal.telephony.IccCard.getIccFdnEnabled()
public boolean com.android.internal.telephony.IccCard.getIccLockEnabled()
public boolean com.android.internal.telephony.IccCard.getIccPin2Blocked()
public boolean com.android.internal.telephony.IccCard.getIccPuk2Blocked()
public com.android.internal.telephony.uicc.IccRecords com.android.internal.telephony.IccCard.getIccRecords()
public java.lang.String com.android.internal.telephony.IccCard.getServiceProviderName()
public com.android.internal.telephony.IccCardConstants$State com.android.internal.telephony.IccCard.getState()
public boolean com.android.internal.telephony.IccCard.hasIccCard()
public boolean com.android.internal.telephony.IccCard.isApplicationOnIcc(com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType)
public boolean com.android.internal.telephony.IccCard.isEmptyProfile()
public void com.android.internal.telephony.IccCard.registerForNetworkLocked(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.IccCard.setIccFdnEnabled(boolean,java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.setIccLockEnabled(boolean,java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.supplyNetworkDepersonalization(java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.supplyPin(java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.supplyPin2(java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.supplyPuk(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.supplyPuk2(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.IccCard.unregisterForNetworkLocked(android.os.Handler)
Tracing public com.android.internal.telephony.IccCard()
Tracing public com.android.internal.telephony.IccCard(com.android.internal.telephony.IccCardConstants$State)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.PlmnActRecord$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.PlmnActRecord$1.createFromParcel [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.PlmnActRecord$1.newArray [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.PlmnActRecord$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public com.android.internal.telephony.uicc.PlmnActRecord com.android.internal.telephony.uicc.PlmnActRecord$1.createFromParcel(android.os.Parcel)
public java.lang.Object com.android.internal.telephony.uicc.PlmnActRecord$1.createFromParcel(android.os.Parcel)
public com.android.internal.telephony.uicc.PlmnActRecord[] com.android.internal.telephony.uicc.PlmnActRecord$1.newArray(int)
public java.lang.Object[] com.android.internal.telephony.uicc.PlmnActRecord$1.newArray(int)
Tracing com.android.internal.telephony.uicc.PlmnActRecord$1()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.parseHistoricalBytes [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.parseLtvNode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.getCategory [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.getRawData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.getValue [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.access$100(byte[],int,int)
private static com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.parseHistoricalBytes(byte[],int,int)
private static int com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.parseLtvNode(int,android.util.ArrayMap,byte[],int)
public byte com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.getCategory()
public byte[] com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.getRawData()
public byte[] com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes.getValue(int)
Tracing private com.android.internal.telephony.uicc.AnswerToReset$HistoricalBytes(byte[],android.util.ArrayMap,byte)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.AdnRecordLoader[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecordLoader.getEFPath [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecordLoader.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecordLoader.loadAllFromEF [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecordLoader.loadFromEF [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecordLoader.updateEF [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.AdnRecordLoader.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private java.lang.String com.android.internal.telephony.uicc.AdnRecordLoader.getEFPath(int)
public void com.android.internal.telephony.uicc.AdnRecordLoader.handleMessage(android.os.Message)
public void com.android.internal.telephony.uicc.AdnRecordLoader.loadAllFromEF(int,int,android.os.Message)
public void com.android.internal.telephony.uicc.AdnRecordLoader.loadFromEF(int,int,int,android.os.Message)
public void com.android.internal.telephony.uicc.AdnRecordLoader.updateEF(com.android.internal.telephony.uicc.AdnRecord,int,int,int,java.lang.String,android.os.Message)
Tracing com.android.internal.telephony.uicc.AdnRecordLoader(com.android.internal.telephony.uicc.IccFileHandler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$1(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$AjZFvwh3Ujx5W3fleFNksc6bLf0[39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$AjZFvwh3Ujx5W3fleFNksc6bLf0.callMethod [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$AjZFvwh3Ujx5W3fleFNksc6bLf0.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final java.lang.Object com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$AjZFvwh3Ujx5W3fleFNksc6bLf0.callMethod(com.android.internal.telephony.Phone)
Tracing public com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$AjZFvwh3Ujx5W3fleFNksc6bLf0(int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.WapPushOverSms$BindServiceThread[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WapPushOverSms$BindServiceThread.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WapPushOverSms$BindServiceThread.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.WapPushOverSms$BindServiceThread.run()
Tracing private com.android.internal.telephony.WapPushOverSms$BindServiceThread(com.android.internal.telephony.WapPushOverSms,android.content.Context)
Tracing com.android.internal.telephony.WapPushOverSms$BindServiceThread(com.android.internal.telephony.WapPushOverSms,android.content.Context,com.android.internal.telephony.WapPushOverSms$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.InboundSmsHandler$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.InboundSmsHandler$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
Tracing com.android.internal.telephony.InboundSmsHandler$2()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.ApnContext[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getApnTypeFromNetworkRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getApnTypeFromNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isFastRetryReason [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.logl [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getApnSetting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getApnType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getApnTypeBitmask [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getConnectionGeneration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getDataConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getDelayForNextApn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getNetworkRequests [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getNextApnSetting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getReason [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getReconnectIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getRetryAfterDisconnectDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.getWaitingApns [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.hasRestrictedRequests [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.incAndGetConnectionGeneration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isConcurrentVoiceAndDataAllowed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isConnectable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isConnectedOrConnecting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isDependencyMet [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isDisconnected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isEnabled [1 overload(s)][39;49;00m
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isProvisioningApn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.isReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.markApnPermanentFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.releaseDataConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.releaseNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.requestLog [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.requestNetwork [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.resetErrorCodeRetries [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.restartOnError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setApnSetting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setConcurrentVoiceAndDataAllowed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setDataConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setModemSuggestedDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setReason [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setReconnectIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.setWaitingApns [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnContext.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static int com.android.internal.telephony.dataconnection.ApnContext.getApnTypeFromNetworkRequest(android.net.NetworkRequest)
public static int com.android.internal.telephony.dataconnection.ApnContext.getApnTypeFromNetworkType(int)
private boolean com.android.internal.telephony.dataconnection.ApnContext.isFastRetryReason()
private void com.android.internal.telephony.dataconnection.ApnContext.log(java.lang.String)
private void com.android.internal.telephony.dataconnection.ApnContext.logl(java.lang.String)
public void com.android.internal.telephony.dataconnection.ApnContext.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public synchronized android.telephony.data.ApnSetting com.android.internal.telephony.dataconnection.ApnContext.getApnSetting()
public java.lang.String com.android.internal.telephony.dataconnection.ApnContext.getApnType()
public int com.android.internal.telephony.dataconnection.ApnContext.getApnTypeBitmask()
public int com.android.internal.telephony.dataconnection.ApnContext.getConnectionGeneration()
public synchronized com.android.internal.telephony.dataconnection.DataConnection com.android.internal.telephony.dataconnection.ApnContext.getDataConnection()
public long com.android.internal.telephony.dataconnection.ApnContext.getDelayForNextApn(boolean)
public java.util.List com.android.internal.telephony.dataconnection.ApnContext.getNetworkRequests()
public android.telephony.data.ApnSetting com.android.internal.telephony.dataconnection.ApnContext.getNextApnSetting()
public synchronized java.lang.String com.android.internal.telephony.dataconnection.ApnContext.getReason()
public synchronized android.app.PendingIntent com.android.internal.telephony.dataconnection.ApnContext.getReconnectIntent()
long com.android.internal.telephony.dataconnection.ApnContext.getRetryAfterDisconnectDelay()
public synchronized com.android.internal.telephony.DctConstants$State com.android.internal.telephony.dataconnection.ApnContext.getState()
public java.util.ArrayList com.android.internal.telephony.dataconnection.ApnContext.getWaitingApns()
public boolean com.android.internal.telephony.dataconnection.ApnContext.hasRestrictedRequests(boolean)
public int com.android.internal.telephony.dataconnection.ApnContext.incAndGetConnectionGeneration()
public synchronized boolean com.android.internal.telephony.dataconnection.ApnContext.isConcurrentVoiceAndDataAllowed()
public boolean com.android.internal.telephony.dataconnection.ApnContext.isConnectable()
public boolean com.android.internal.telephony.dataconnection.ApnContext.isConnectedOrConnecting()
public boolean com.android.internal.telephony.dataconnection.ApnContext.isDependencyMet()
public boolean com.android.internal.telephony.dataconnection.ApnContext.isDisconnected()
public boolean com.android.internal.telephony.dataconnection.ApnContext.isEnabled()
public boolean com.android.internal.telephony.dataconnection.ApnContext.isProvisioningApn()
public boolean com.android.internal.telephony.dataconnection.ApnContext.isReady()
public void com.android.internal.telephony.dataconnection.ApnContext.markApnPermanentFailed(android.telephony.data.ApnSetting)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.releaseDataConnection(java.lang.String)
public void com.android.internal.telephony.dataconnection.ApnContext.releaseNetwork(android.net.NetworkRequest,int)
public void com.android.internal.telephony.dataconnection.ApnContext.requestLog(java.lang.String)
public void com.android.internal.telephony.dataconnection.ApnContext.requestNetwork(android.net.NetworkRequest,int,android.os.Message)
public void com.android.internal.telephony.dataconnection.ApnContext.resetErrorCodeRetries()
public boolean com.android.internal.telephony.dataconnection.ApnContext.restartOnError(int)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.setApnSetting(android.telephony.data.ApnSetting)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.setConcurrentVoiceAndDataAllowed(boolean)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.setDataConnection(com.android.internal.telephony.dataconnection.DataConnection)
public void com.android.internal.telephony.dataconnection.ApnContext.setEnabled(boolean)
public void com.android.internal.telephony.dataconnection.ApnContext.setModemSuggestedDelay(long)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.setReason(java.lang.String)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.setReconnectIntent(android.app.PendingIntent)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.setState(com.android.internal.telephony.DctConstants$State)
public synchronized void com.android.internal.telephony.dataconnection.ApnContext.setWaitingApns(java.util.ArrayList)
public synchronized java.lang.String com.android.internal.telephony.dataconnection.ApnContext.toString()
Tracing public com.android.internal.telephony.dataconnection.ApnContext(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,android.net.NetworkConfig,com.android.internal.telephony.dataconnection.DcTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver$7[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$7.onComplete [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$7.onError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$7.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.ims.ImsResolver$7.onComplete(android.content.ComponentName,java.util.Set)
public void com.android.internal.telephony.ims.ImsResolver$7.onError(android.content.ComponentName)
Tracing com.android.internal.telephony.ims.ImsResolver$7(com.android.internal.telephony.ims.ImsResolver)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.PhoneSubInfoController$CallPhoneMethodHelper[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneSubInfoController$CallPhoneMethodHelper.callMethod [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract java.lang.Object com.android.internal.telephony.PhoneSubInfoController$CallPhoneMethodHelper.callMethod(com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.IntentBroadcaster[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IntentBroadcaster.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IntentBroadcaster.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IntentBroadcaster.getInstance [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IntentBroadcaster.logd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IntentBroadcaster.broadcastStickyIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IntentBroadcaster.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static java.util.Map com.android.internal.telephony.IntentBroadcaster.access$000(com.android.internal.telephony.IntentBroadcaster)
static void com.android.internal.telephony.IntentBroadcaster.access$100(com.android.internal.telephony.IntentBroadcaster,java.lang.String)
public static com.android.internal.telephony.IntentBroadcaster com.android.internal.telephony.IntentBroadcaster.getInstance()
public static com.android.internal.telephony.IntentBroadcaster com.android.internal.telephony.IntentBroadcaster.getInstance(android.content.Context)
private void com.android.internal.telephony.IntentBroadcaster.logd(java.lang.String)
public void com.android.internal.telephony.IntentBroadcaster.broadcastStickyIntent(android.content.Intent,int)
Tracing private com.android.internal.telephony.IntentBroadcaster(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.-$$Lambda$ImsResolver$SIkPixr-qGLIK-usUJIKu6S5BBs[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.-$$Lambda$ImsResolver$SIkPixr-qGLIK-usUJIKu6S5BBs.test [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.-$$Lambda$ImsResolver$SIkPixr-qGLIK-usUJIKu6S5BBs.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final boolean com.android.internal.telephony.ims.-$$Lambda$ImsResolver$SIkPixr-qGLIK-usUJIKu6S5BBs.test(java.lang.Object)
Tracing private com.android.internal.telephony.ims.-$$Lambda$ImsResolver$SIkPixr-qGLIK-usUJIKu6S5BBs()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.NitzData[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.createForTests [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.parse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.equals [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.getCurrentTimeInMillis [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.getDstAdjustmentMillis [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.getEmulatorHostTimeZone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.getLocalOffsetMillis [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.hashCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.isDst [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NitzData.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.NitzData com.android.internal.telephony.NitzData.createForTests(int,java.lang.Integer,long,java.util.TimeZone)
public static com.android.internal.telephony.NitzData com.android.internal.telephony.NitzData.parse(java.lang.String)
public boolean com.android.internal.telephony.NitzData.equals(java.lang.Object)
public long com.android.internal.telephony.NitzData.getCurrentTimeInMillis()
public java.lang.Integer com.android.internal.telephony.NitzData.getDstAdjustmentMillis()
public java.util.TimeZone com.android.internal.telephony.NitzData.getEmulatorHostTimeZone()
public int com.android.internal.telephony.NitzData.getLocalOffsetMillis()
public int com.android.internal.telephony.NitzData.hashCode()
public boolean com.android.internal.telephony.NitzData.isDst()
public java.lang.String com.android.internal.telephony.NitzData.toString()
Tracing private com.android.internal.telephony.NitzData(java.lang.String,int,java.lang.Integer,long,java.util.TimeZone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CallManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.canDial [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getContext [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getFirstActiveCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getFirstCallOfState [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getFirstNonIdleCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.hasMoreThanOneHoldingCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.hasMoreThanOneRingingCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForPhoneStates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForPhoneStates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.canConference [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.canTransfer [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.clearDisconnected [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.conference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.dial [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.explicitCallTransfer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getActiveFgCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getActiveFgCallState [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getBackgroundCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getBgCallConnections [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getBgPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getDefaultPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getFgCallConnections [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getFgPhone [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getFirstActiveBgCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getFirstActiveRingingCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getForegroundCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getPendingMmiCodes [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getPhoneInCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getRegistrantIdentifier [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getRingingCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getRingingPhone [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getServiceState [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.getState [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.hasActiveBgCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.hasActiveFgCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.hasActiveRingingCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.hasDisconnectedBgCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.hasDisconnectedFgCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForCdmaOtaStatusChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForDisconnect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForDisplayInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForEcmTimerReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForInCallVoicePrivacyOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForInCallVoicePrivacyOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForIncomingRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForMmiComplete [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForMmiInitiate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForNewRingingConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForOnHoldTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForPostDialCharacter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForPreciseCallStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForResendIncallMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForRingbackTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForServiceStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForSignalInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForSubscriptionInfoReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForSuppServiceFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForTtyModeReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerForUnknownConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.registerPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.rejectCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.sendBurstDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.sendDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.sendUssdResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.setEchoSuppressionEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.setMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.startDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.stopDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForCdmaOtaStatusChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForDisconnect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForDisplayInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForEcmTimerReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForInCallVoicePrivacyOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForInCallVoicePrivacyOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForIncomingRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForMmiComplete [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForMmiInitiate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForNewRingingConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForOnHoldTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForPostDialCharacter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForPreciseCallStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForResendIncallMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForRingbackTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForServiceStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForSignalInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForSubscriptionInfoReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForSuppServiceFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForTtyModeReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterForUnknownConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.unregisterPhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static boolean com.android.internal.telephony.CallManager.access$100(com.android.internal.telephony.CallManager)
private boolean com.android.internal.telephony.CallManager.canDial(com.android.internal.telephony.Phone)
private android.content.Context com.android.internal.telephony.CallManager.getContext()
private com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstActiveCall(java.util.ArrayList)
private com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstActiveCall(java.util.ArrayList,int)
private com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstCallOfState(java.util.ArrayList,com.android.internal.telephony.Call$State)
private com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstCallOfState(java.util.ArrayList,com.android.internal.telephony.Call$State,int)
private com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstNonIdleCall(java.util.List)
private com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstNonIdleCall(java.util.List,int)
public static com.android.internal.telephony.CallManager com.android.internal.telephony.CallManager.getInstance()
private com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getPhone(int)
private boolean com.android.internal.telephony.CallManager.hasMoreThanOneHoldingCall(int)
private boolean com.android.internal.telephony.CallManager.hasMoreThanOneRingingCall()
private boolean com.android.internal.telephony.CallManager.hasMoreThanOneRingingCall(int)
private void com.android.internal.telephony.CallManager.registerForPhoneStates(com.android.internal.telephony.Phone)
private void com.android.internal.telephony.CallManager.unregisterForPhoneStates(com.android.internal.telephony.Phone)
public boolean com.android.internal.telephony.CallManager.canConference(com.android.internal.telephony.Call)
public boolean com.android.internal.telephony.CallManager.canConference(com.android.internal.telephony.Call,int)
public boolean com.android.internal.telephony.CallManager.canTransfer(com.android.internal.telephony.Call)
public boolean com.android.internal.telephony.CallManager.canTransfer(com.android.internal.telephony.Call,int)
public void com.android.internal.telephony.CallManager.clearDisconnected()
public void com.android.internal.telephony.CallManager.clearDisconnected(int)
public void com.android.internal.telephony.CallManager.conference(com.android.internal.telephony.Call) throws com.android.internal.telephony.CallStateException
public com.android.internal.telephony.Connection com.android.internal.telephony.CallManager.dial(com.android.internal.telephony.Phone,java.lang.String,int) throws com.android.internal.telephony.CallStateException
public com.android.internal.telephony.Connection com.android.internal.telephony.CallManager.dial(com.android.internal.telephony.Phone,java.lang.String,com.android.internal.telephony.UUSInfo,int) throws com.android.internal.telephony.CallStateException
public void com.android.internal.telephony.CallManager.explicitCallTransfer(com.android.internal.telephony.Call) throws com.android.internal.telephony.CallStateException
public com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getActiveFgCall()
public com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getActiveFgCall(int)
public com.android.internal.telephony.Call$State com.android.internal.telephony.CallManager.getActiveFgCallState()
public com.android.internal.telephony.Call$State com.android.internal.telephony.CallManager.getActiveFgCallState(int)
public java.util.List com.android.internal.telephony.CallManager.getBackgroundCalls()
public java.util.List com.android.internal.telephony.CallManager.getBgCallConnections()
public com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getBgPhone()
public com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getDefaultPhone()
public java.util.List com.android.internal.telephony.CallManager.getFgCallConnections()
public java.util.List com.android.internal.telephony.CallManager.getFgCallConnections(int)
public com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getFgPhone()
public com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getFgPhone(int)
public com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstActiveBgCall()
public com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstActiveBgCall(int)
public com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstActiveRingingCall()
public com.android.internal.telephony.Call com.android.internal.telephony.CallManager.getFirstActiveRingingCall(int)
public java.util.List com.android.internal.telephony.CallManager.getForegroundCalls()
public boolean com.android.internal.telephony.CallManager.getMute()
public java.util.List com.android.internal.telephony.CallManager.getPendingMmiCodes(com.android.internal.telephony.Phone)
public com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getPhoneInCall()
public java.lang.Object com.android.internal.telephony.CallManager.getRegistrantIdentifier()
public java.util.List com.android.internal.telephony.CallManager.getRingingCalls()
public com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getRingingPhone()
public com.android.internal.telephony.Phone com.android.internal.telephony.CallManager.getRingingPhone(int)
public int com.android.internal.telephony.CallManager.getServiceState()
public int com.android.internal.telephony.CallManager.getServiceState(int)
public com.android.internal.telephony.PhoneConstants$State com.android.internal.telephony.CallManager.getState()
public com.android.internal.telephony.PhoneConstants$State com.android.internal.telephony.CallManager.getState(int)
public boolean com.android.internal.telephony.CallManager.hasActiveBgCall()
public boolean com.android.internal.telephony.CallManager.hasActiveBgCall(int)
public boolean com.android.internal.telephony.CallManager.hasActiveFgCall()
public boolean com.android.internal.telephony.CallManager.hasActiveFgCall(int)
public boolean com.android.internal.telephony.CallManager.hasActiveRingingCall()
public boolean com.android.internal.telephony.CallManager.hasActiveRingingCall(int)
public boolean com.android.internal.telephony.CallManager.hasDisconnectedBgCall()
public boolean com.android.internal.telephony.CallManager.hasDisconnectedBgCall(int)
public boolean com.android.internal.telephony.CallManager.hasDisconnectedFgCall()
public boolean com.android.internal.telephony.CallManager.hasDisconnectedFgCall(int)
public void com.android.internal.telephony.CallManager.registerForCallWaiting(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForCdmaOtaStatusChange(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForDisconnect(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForDisplayInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForEcmTimerReset(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForInCallVoicePrivacyOff(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForInCallVoicePrivacyOn(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForIncomingRing(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForMmiComplete(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForMmiInitiate(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForNewRingingConnection(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForOnHoldTone(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForPostDialCharacter(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForPreciseCallStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForResendIncallMute(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForRingbackTone(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForServiceStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForSignalInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForSubscriptionInfoReady(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForSuppServiceFailed(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForTtyModeReceived(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.CallManager.registerForUnknownConnection(android.os.Handler,int,java.lang.Object)
public boolean com.android.internal.telephony.CallManager.registerPhone(com.android.internal.telephony.Phone)
public void com.android.internal.telephony.CallManager.rejectCall(com.android.internal.telephony.Call) throws com.android.internal.telephony.CallStateException
public boolean com.android.internal.telephony.CallManager.sendBurstDtmf(java.lang.String,int,int,android.os.Message)
public boolean com.android.internal.telephony.CallManager.sendDtmf(char)
public boolean com.android.internal.telephony.CallManager.sendUssdResponse(com.android.internal.telephony.Phone,java.lang.String)
public void com.android.internal.telephony.CallManager.setEchoSuppressionEnabled()
public void com.android.internal.telephony.CallManager.setMute(boolean)
public boolean com.android.internal.telephony.CallManager.startDtmf(char)
public void com.android.internal.telephony.CallManager.stopDtmf()
public void com.android.internal.telephony.CallManager.unregisterForCallWaiting(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForCdmaOtaStatusChange(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForDisconnect(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForDisplayInfo(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForEcmTimerReset(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForInCallVoicePrivacyOff(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForInCallVoicePrivacyOn(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForIncomingRing(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForMmiComplete(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForMmiInitiate(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForNewRingingConnection(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForOnHoldTone(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForPostDialCharacter(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForPreciseCallStateChanged(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForResendIncallMute(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForRingbackTone(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForServiceStateChanged(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForSignalInfo(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForSubscriptionInfoReady(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForSuppServiceFailed(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForTtyModeReceived(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterForUnknownConnection(android.os.Handler)
public void com.android.internal.telephony.CallManager.unregisterPhone(com.android.internal.telephony.Phone)
Tracing private com.android.internal.telephony.CallManager()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.-$$Lambda$RILRequest$VaC9ddQXT8qxCl7rcNKtUadFQoI[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$RILRequest$VaC9ddQXT8qxCl7rcNKtUadFQoI.applyAsInt [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$RILRequest$VaC9ddQXT8qxCl7rcNKtUadFQoI.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final int com.android.internal.telephony.-$$Lambda$RILRequest$VaC9ddQXT8qxCl7rcNKtUadFQoI.applyAsInt(int)
Tracing private com.android.internal.telephony.-$$Lambda$RILRequest$VaC9ddQXT8qxCl7rcNKtUadFQoI()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.bindImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.bindImsServiceWithFeatures [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.calculateFeaturesToCreate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.carrierConfigChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.dynamicQueryComplete [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getControllerByServiceInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsServiceControllers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsServiceInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getInfoByComponentName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getInfoByPackageName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getSlotForActiveCarrierService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getStaticImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.handleFeaturesChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.isActiveCarrierService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.isDeviceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.lambda$calculateFeaturesToCreate$3 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.lambda$calculateFeaturesToCreate$4 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.lambda$calculateFeaturesToCreate$5 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.lambda$getControllerByServiceInfo$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.lambda$getInfoByPackageName$2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.lambda$shouldFeaturesCauseBind$6 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.maybeAddedImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.maybeRebindService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.maybeRemovedImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.printFeatures [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.putImsController [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.removeImsController [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.scheduleQueryForFeatures [3 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.searchForImsServices [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.shouldFeaturesCauseBind [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.startDynamicQuery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.unbindImsService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.updateBoundCarrierServices [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.updateImsServiceFeatures [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.disableIms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.enableIms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getHandler [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsRegistration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsServiceConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsServiceController [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsServiceControllerAndListen [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getImsServiceInfoFromCache [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getMmTelFeatureAndListen [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.getRcsFeatureAndListen [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.imsServiceFeatureCreated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.imsServiceFeatureRemoved [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.imsServiceFeaturesChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.initPopulateCacheAndStartBind [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.lambda$new$0$ImsResolver [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.overrideImsServiceConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.setImsDynamicQueryManagerFactory [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.setImsServiceControllerFactory [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.setSubscriptionManagerProxy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static android.os.Handler com.android.internal.telephony.ims.ImsResolver.access$000(com.android.internal.telephony.ims.ImsResolver)
static java.lang.String com.android.internal.telephony.ims.ImsResolver.access$100(com.android.internal.telephony.ims.ImsResolver,java.util.Set)
static void com.android.internal.telephony.ims.ImsResolver.access$200(com.android.internal.telephony.ims.ImsResolver,android.content.ComponentName,java.util.Set)
static void com.android.internal.telephony.ims.ImsResolver.access$300(com.android.internal.telephony.ims.ImsResolver,android.content.ComponentName,int)
private void com.android.internal.telephony.ims.ImsResolver.bindImsService(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private void com.android.internal.telephony.ims.ImsResolver.bindImsServiceWithFeatures(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo,java.util.HashSet)
private java.util.HashSet com.android.internal.telephony.ims.ImsResolver.calculateFeaturesToCreate(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private void com.android.internal.telephony.ims.ImsResolver.carrierConfigChanged(int)
private void com.android.internal.telephony.ims.ImsResolver.dynamicQueryComplete(android.content.ComponentName,java.util.Set)
private com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver.getControllerByServiceInfo(java.util.Map,com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private android.util.SparseArray com.android.internal.telephony.ims.ImsResolver.getImsServiceControllers(int)
private java.util.List com.android.internal.telephony.ims.ImsResolver.getImsServiceInfo(java.lang.String)
private com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo com.android.internal.telephony.ims.ImsResolver.getInfoByComponentName(java.util.Map,android.content.ComponentName)
private com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo com.android.internal.telephony.ims.ImsResolver.getInfoByPackageName(java.util.Map,java.lang.String)
private int com.android.internal.telephony.ims.ImsResolver.getSlotForActiveCarrierService(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private java.util.List com.android.internal.telephony.ims.ImsResolver.getStaticImsService()
private void com.android.internal.telephony.ims.ImsResolver.handleFeaturesChanged(android.content.ComponentName,java.util.Set)
private boolean com.android.internal.telephony.ims.ImsResolver.isActiveCarrierService(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private boolean com.android.internal.telephony.ims.ImsResolver.isDeviceService(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
static boolean com.android.internal.telephony.ims.ImsResolver.lambda$calculateFeaturesToCreate$3(int,android.telephony.ims.stub.ImsFeatureConfiguration$FeatureSlotPair)
static boolean com.android.internal.telephony.ims.ImsResolver.lambda$calculateFeaturesToCreate$4(int,android.telephony.ims.stub.ImsFeatureConfiguration$FeatureSlotPair)
static boolean com.android.internal.telephony.ims.ImsResolver.lambda$calculateFeaturesToCreate$5(int,android.telephony.ims.stub.ImsFeatureConfiguration$FeatureSlotPair)
static boolean com.android.internal.telephony.ims.ImsResolver.lambda$getControllerByServiceInfo$1(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo,com.android.internal.telephony.ims.ImsServiceController)
static boolean com.android.internal.telephony.ims.ImsResolver.lambda$getInfoByPackageName$2(java.lang.String,com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
static boolean com.android.internal.telephony.ims.ImsResolver.lambda$shouldFeaturesCauseBind$6(android.telephony.ims.stub.ImsFeatureConfiguration$FeatureSlotPair)
private void com.android.internal.telephony.ims.ImsResolver.maybeAddedImsService(java.lang.String)
private void com.android.internal.telephony.ims.ImsResolver.maybeRebindService(int,java.lang.String)
private boolean com.android.internal.telephony.ims.ImsResolver.maybeRemovedImsService(java.lang.String)
private java.lang.String com.android.internal.telephony.ims.ImsResolver.printFeatures(java.util.Set)
private void com.android.internal.telephony.ims.ImsResolver.putImsController(int,int,com.android.internal.telephony.ims.ImsServiceController)
private com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver.removeImsController(int,int)
private void com.android.internal.telephony.ims.ImsResolver.scheduleQueryForFeatures(android.content.ComponentName,int)
private void com.android.internal.telephony.ims.ImsResolver.scheduleQueryForFeatures(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private void com.android.internal.telephony.ims.ImsResolver.scheduleQueryForFeatures(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo,int)
private java.util.List com.android.internal.telephony.ims.ImsResolver.searchForImsServices(java.lang.String,com.android.internal.telephony.ims.ImsResolver$ImsServiceControllerFactory)
private boolean com.android.internal.telephony.ims.ImsResolver.shouldFeaturesCauseBind(java.util.HashSet)
private void com.android.internal.telephony.ims.ImsResolver.startDynamicQuery(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private void com.android.internal.telephony.ims.ImsResolver.unbindImsService(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
private void com.android.internal.telephony.ims.ImsResolver.updateBoundCarrierServices(int,java.lang.String)
private void com.android.internal.telephony.ims.ImsResolver.updateImsServiceFeatures(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
public void com.android.internal.telephony.ims.ImsResolver.disableIms(int)
public void com.android.internal.telephony.ims.ImsResolver.enableIms(int)
public android.os.Handler com.android.internal.telephony.ims.ImsResolver.getHandler()
public android.telephony.ims.aidl.IImsConfig com.android.internal.telephony.ims.ImsResolver.getImsConfig(int,int) throws android.os.RemoteException
public android.telephony.ims.aidl.IImsRegistration com.android.internal.telephony.ims.ImsResolver.getImsRegistration(int,int) throws android.os.RemoteException
public java.lang.String com.android.internal.telephony.ims.ImsResolver.getImsServiceConfiguration(int,boolean)
public com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver.getImsServiceController(int,int)
public com.android.internal.telephony.ims.ImsServiceController com.android.internal.telephony.ims.ImsResolver.getImsServiceControllerAndListen(int,int,com.android.ims.internal.IImsServiceFeatureCallback)
public com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo com.android.internal.telephony.ims.ImsResolver.getImsServiceInfoFromCache(java.lang.String)
public android.telephony.ims.aidl.IImsMmTelFeature com.android.internal.telephony.ims.ImsResolver.getMmTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)
public android.telephony.ims.aidl.IImsRcsFeature com.android.internal.telephony.ims.ImsResolver.getRcsFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)
public void com.android.internal.telephony.ims.ImsResolver.imsServiceFeatureCreated(int,int,com.android.internal.telephony.ims.ImsServiceController)
public void com.android.internal.telephony.ims.ImsResolver.imsServiceFeatureRemoved(int,int,com.android.internal.telephony.ims.ImsServiceController)
public void com.android.internal.telephony.ims.ImsResolver.imsServiceFeaturesChanged(android.telephony.ims.stub.ImsFeatureConfiguration,com.android.internal.telephony.ims.ImsServiceController)
public void com.android.internal.telephony.ims.ImsResolver.initPopulateCacheAndStartBind()
public boolean com.android.internal.telephony.ims.ImsResolver.lambda$new$0$ImsResolver(android.os.Message)
public boolean com.android.internal.telephony.ims.ImsResolver.overrideImsServiceConfiguration(int,boolean,java.lang.String)
public void com.android.internal.telephony.ims.ImsResolver.setImsDynamicQueryManagerFactory(com.android.internal.telephony.ims.ImsResolver$ImsDynamicQueryManagerFactory)
public void com.android.internal.telephony.ims.ImsResolver.setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsResolver$ImsServiceControllerFactory)
public void com.android.internal.telephony.ims.ImsResolver.setSubscriptionManagerProxy(com.android.internal.telephony.ims.ImsResolver$SubscriptionManagerProxy)
Tracing public com.android.internal.telephony.ims.ImsResolver(android.content.Context,java.lang.String,int,boolean)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$2.onAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$2.onAvailable(android.net.Network)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$2(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager.addRange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager.finishUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager.startUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
protected void com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager.addRange(int,int,boolean)
protected boolean com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager.finishUpdate()
protected void com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager.startUpdate()
Tracing com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager(com.android.internal.telephony.IccSmsInterfaceManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.metrics.TelephonyMetrics[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.addTelephonyEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.annotateInProgressCallSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.annotateInProgressSmsSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.buildProto [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.callQualityLevelToProtoEnum [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.callSessionEventToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.convertConnectionToRilCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.convertConnectionsToRilCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.convertEmergencyNumberToEmergencyNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.convertGsmCdmaCodec [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.convertImsCodec [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.convertProtoToBase64String [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.convertSmsFormat [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.disconnectReasonsKnown [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.finishCallSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.finishSmsSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.finishSmsSessionIfNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.getCallId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.getSamplePercentageForEmergencyCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.lambda$convertEmergencyNumberToEmergencyNumberInfo$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.lambda$updateActiveSubscriptionInfoList$0 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.lambda$writeCarrierIdMatchingEvent$2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.logv [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.makeInvalidSubscriptionInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.mapSimStateToProto [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.printAllMetrics [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.reset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.roundSessionStart [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.smsSessionEventToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.startNewCallSessionIfNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.startNewSmsSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.startNewSmsSessionIfNeeded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.telephonyEventToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.toCallQualityProto [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.toCallSessionRilRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.toImsReasonInfoProto [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.toPdpType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.toPrivacyFuzzedTimeInterval [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.toServiceStateProto [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsSessionWithType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsWithType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnCallSolicitedResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnDeactivateDataCallResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnSetupDataCallResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnSmsSolicitedResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.updateActiveSubscriptionInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.updateEnabledModemBitmap [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.updateSimState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeAudioCodecGsmCdma [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeAudioCodecIms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeCarrierIdMatchingEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeCarrierKeyEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeDataStallEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeDataSwitch [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeDroppedIncomingMultipartSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeEmergencyNumberUpdateEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeImsCallState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeImsServiceSendSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeImsSetFeatureValue [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSMSPP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsTypeZero [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingVoiceMailSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingWapPush [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeModemRestartEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeNITZEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeNetworkValidate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeNewCBSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnDemandDataSwitch [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHandoverEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHeld [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHoldFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHoldReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallProgressing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallResumeFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallResumeReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallResumed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallStart [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallStartFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallStarted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallTerminated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCapabilities [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCommand [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsConnectionState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsServiceSmsSolicitedResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnRilSolicitedResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeOnRilTimeoutResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writePhoneState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilAnswer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilCallList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilCallRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilDataCallEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilDeactivateDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilDial [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilHangup [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilSendSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeRilSrvcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeServiceStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeSetPreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.writeSetupDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.metrics.TelephonyMetrics.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.addTelephonyEvent(com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent)
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.annotateInProgressCallSession(long,int,com.android.internal.telephony.metrics.CallSessionEventBuilder)
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.annotateInProgressSmsSession(long,int,com.android.internal.telephony.metrics.SmsSessionEventBuilder)
private synchronized com.android.internal.telephony.nano.TelephonyProto$TelephonyLog com.android.internal.telephony.metrics.TelephonyMetrics.buildProto()
private static int com.android.internal.telephony.metrics.TelephonyMetrics.callQualityLevelToProtoEnum(int)
private static java.lang.String com.android.internal.telephony.metrics.TelephonyMetrics.callSessionEventToString(int)
private void com.android.internal.telephony.metrics.TelephonyMetrics.convertConnectionToRilCall(com.android.internal.telephony.GsmCdmaConnection,com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event$RilCall,java.lang.String)
private com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event$RilCall[] com.android.internal.telephony.metrics.TelephonyMetrics.convertConnectionsToRilCalls(java.util.ArrayList,java.lang.String)
private com.android.internal.telephony.nano.TelephonyProto$EmergencyNumberInfo com.android.internal.telephony.metrics.TelephonyMetrics.convertEmergencyNumberToEmergencyNumberInfo(android.telephony.emergency.EmergencyNumber)
private int com.android.internal.telephony.metrics.TelephonyMetrics.convertGsmCdmaCodec(int)
private static int com.android.internal.telephony.metrics.TelephonyMetrics.convertImsCodec(int)
private static java.lang.String com.android.internal.telephony.metrics.TelephonyMetrics.convertProtoToBase64String(com.android.internal.telephony.nano.TelephonyProto$TelephonyLog)
private int com.android.internal.telephony.metrics.TelephonyMetrics.convertSmsFormat(java.lang.String)
private boolean com.android.internal.telephony.metrics.TelephonyMetrics.disconnectReasonsKnown(com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event$RilCall[])
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.finishCallSession(com.android.internal.telephony.metrics.InProgressCallSession)
private com.android.internal.telephony.nano.TelephonyProto$SmsSession com.android.internal.telephony.metrics.TelephonyMetrics.finishSmsSession(com.android.internal.telephony.metrics.InProgressSmsSession)
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.finishSmsSessionIfNeeded(com.android.internal.telephony.metrics.InProgressSmsSession)
private int com.android.internal.telephony.metrics.TelephonyMetrics.getCallId(android.telephony.ims.ImsCallSession)
public static synchronized com.android.internal.telephony.metrics.TelephonyMetrics com.android.internal.telephony.metrics.TelephonyMetrics.getInstance()
private double com.android.internal.telephony.metrics.TelephonyMetrics.getSamplePercentageForEmergencyCall(java.lang.String)
static java.lang.String[] com.android.internal.telephony.metrics.TelephonyMetrics.lambda$convertEmergencyNumberToEmergencyNumberInfo$1(int)
static boolean com.android.internal.telephony.metrics.TelephonyMetrics.lambda$updateActiveSubscriptionInfoList$0(int,java.lang.Integer)
static java.lang.String[] com.android.internal.telephony.metrics.TelephonyMetrics.lambda$writeCarrierIdMatchingEvent$2(int)
private void com.android.internal.telephony.metrics.TelephonyMetrics.logv(java.lang.String)
private static com.android.internal.telephony.nano.TelephonyProto$ActiveSubscriptionInfo com.android.internal.telephony.metrics.TelephonyMetrics.makeInvalidSubscriptionInfo(int)
private static int com.android.internal.telephony.metrics.TelephonyMetrics.mapSimStateToProto(int)
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.printAllMetrics(java.io.PrintWriter)
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.reset()
static int com.android.internal.telephony.metrics.TelephonyMetrics.roundSessionStart(long)
private static java.lang.String com.android.internal.telephony.metrics.TelephonyMetrics.smsSessionEventToString(int)
private synchronized com.android.internal.telephony.metrics.InProgressCallSession com.android.internal.telephony.metrics.TelephonyMetrics.startNewCallSessionIfNeeded(int)
private com.android.internal.telephony.metrics.InProgressSmsSession com.android.internal.telephony.metrics.TelephonyMetrics.startNewSmsSession(int)
private synchronized com.android.internal.telephony.metrics.InProgressSmsSession com.android.internal.telephony.metrics.TelephonyMetrics.startNewSmsSessionIfNeeded(int)
private static java.lang.String com.android.internal.telephony.metrics.TelephonyMetrics.telephonyEventToString(int)
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyCallSession$Event$CallQuality com.android.internal.telephony.metrics.TelephonyMetrics.toCallQualityProto(android.telephony.CallQuality)
private int com.android.internal.telephony.metrics.TelephonyMetrics.toCallSessionRilRequest(int)
private com.android.internal.telephony.nano.TelephonyProto$ImsReasonInfo com.android.internal.telephony.metrics.TelephonyMetrics.toImsReasonInfoProto(android.telephony.ims.ImsReasonInfo)
private int com.android.internal.telephony.metrics.TelephonyMetrics.toPdpType(java.lang.String)
static int com.android.internal.telephony.metrics.TelephonyMetrics.toPrivacyFuzzedTimeInterval(long,long)
private com.android.internal.telephony.nano.TelephonyProto$TelephonyServiceState com.android.internal.telephony.metrics.TelephonyMetrics.toServiceStateProto(android.telephony.ServiceState)
private void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsSessionWithType(int,int,boolean,java.lang.String,long[],boolean,boolean)
private void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsWithType(int,int,java.lang.String,boolean)
private void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnCallSolicitedResponse(int,int,int,int)
private void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnDeactivateDataCallResponse(int,int)
private void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnSetupDataCallResponse(int,int,int,int,android.telephony.data.DataCallResponse)
private synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnSmsSolicitedResponse(int,int,int,com.android.internal.telephony.SmsResponse)
public void com.android.internal.telephony.metrics.TelephonyMetrics.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.updateActiveSubscriptionInfoList(java.util.List)
public void com.android.internal.telephony.metrics.TelephonyMetrics.updateEnabledModemBitmap(int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.updateSimState(int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeAudioCodecGsmCdma(int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeAudioCodecIms(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeCarrierIdMatchingEvent(int,int,int,java.lang.String,java.lang.String,com.android.internal.telephony.CarrierResolver$CarrierMatchingRule)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeCarrierKeyEvent(int,int,boolean)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeDataStallEvent(int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeDataSwitch(int,com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$DataSwitch)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeDroppedIncomingMultipartSms(int,java.lang.String,int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeEmergencyNumberUpdateEvent(int,android.telephony.emergency.EmergencyNumber)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeImsCallState(int,android.telephony.ims.ImsCallSession,com.android.internal.telephony.Call$State)
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeImsServiceSendSms(int,java.lang.String,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeImsSetFeatureValue(int,int,int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSMSPP(int,java.lang.String,boolean)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsError(int,boolean,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsSession(int,boolean,java.lang.String,long[],boolean)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingSmsTypeZero(int,java.lang.String)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingVoiceMailSms(int,java.lang.String)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeIncomingWapPush(int,boolean,java.lang.String,long[],boolean)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeModemRestartEvent(int,java.lang.String)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeNITZEvent(int,long)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeNetworkValidate(int)
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeNewCBSms(int,int,int,boolean,boolean,int,int,long)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnDemandDataSwitch(com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$OnDemandDataSwitch)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHandoverEvent(int,int,android.telephony.ims.ImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHeld(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHoldFailed(int,android.telephony.ims.ImsCallSession,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallHoldReceived(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallProgressing(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallReceive(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallResumeFailed(int,android.telephony.ims.ImsCallSession,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallResumeReceived(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallResumed(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallStart(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallStartFailed(int,android.telephony.ims.ImsCallSession,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallStarted(int,android.telephony.ims.ImsCallSession)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCallTerminated(int,android.telephony.ims.ImsCallSession,android.telephony.ims.ImsReasonInfo,com.android.internal.telephony.metrics.CallQualityMetrics,android.telephony.emergency.EmergencyNumber,java.lang.String)
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCapabilities(int,int,android.telephony.ims.feature.MmTelFeature$MmTelCapabilities)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsCommand(int,android.telephony.ims.ImsCallSession,int)
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsConnectionState(int,int,android.telephony.ims.ImsReasonInfo)
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnImsServiceSmsSolicitedResponse(int,int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnRilSolicitedResponse(int,int,int,int,java.lang.Object)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeOnRilTimeoutResponse(int,int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writePhoneState(int,com.android.internal.telephony.PhoneConstants$State)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilAnswer(int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilCallList(int,java.util.ArrayList,java.lang.String)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilCallRing(int,char[])
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilDataCallEvent(int,int,int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilDeactivateDataCall(int,int,int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilDial(int,com.android.internal.telephony.GsmCdmaConnection,int,com.android.internal.telephony.UUSInfo)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilHangup(int,com.android.internal.telephony.GsmCdmaConnection,int,java.lang.String)
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilSendSms(int,int,int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeRilSrvcc(int,int)
public synchronized void com.android.internal.telephony.metrics.TelephonyMetrics.writeServiceStateChanged(int,android.telephony.ServiceState)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeSetPreferredNetworkType(int,int)
public void com.android.internal.telephony.metrics.TelephonyMetrics.writeSetupDataCall(int,int,int,java.lang.String,int)
Tracing public com.android.internal.telephony.metrics.TelephonyMetrics()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1.sendScpResults [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1.sendScpResults()
public void com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler$1(com.android.internal.telephony.cdma.CdmaServiceCategoryProgramHandler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierSignalAgent[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.access$202 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.broadcast [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.loadCarrierConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.logv [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.parseAndCache [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.hasRegisteredReceivers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.notifyCarrierSignalReceivers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierSignalAgent.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.CarrierSignalAgent.access$000(com.android.internal.telephony.CarrierSignalAgent,java.lang.String)
static void com.android.internal.telephony.CarrierSignalAgent.access$100(com.android.internal.telephony.CarrierSignalAgent)
static boolean com.android.internal.telephony.CarrierSignalAgent.access$200(com.android.internal.telephony.CarrierSignalAgent)
static boolean com.android.internal.telephony.CarrierSignalAgent.access$202(com.android.internal.telephony.CarrierSignalAgent,boolean)
private void com.android.internal.telephony.CarrierSignalAgent.broadcast(android.content.Intent,java.util.Set,boolean)
private void com.android.internal.telephony.CarrierSignalAgent.loadCarrierConfig()
private void com.android.internal.telephony.CarrierSignalAgent.log(java.lang.String)
private void com.android.internal.telephony.CarrierSignalAgent.loge(java.lang.String)
private void com.android.internal.telephony.CarrierSignalAgent.logv(java.lang.String)
private java.util.Map com.android.internal.telephony.CarrierSignalAgent.parseAndCache(java.lang.String[])
public void com.android.internal.telephony.CarrierSignalAgent.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.CarrierSignalAgent.handleMessage(android.os.Message)
public boolean com.android.internal.telephony.CarrierSignalAgent.hasRegisteredReceivers(java.lang.String)
public void com.android.internal.telephony.CarrierSignalAgent.notifyCarrierSignalReceivers(android.content.Intent)
Tracing public com.android.internal.telephony.CarrierSignalAgent(com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.NewTimeServiceHelper$Listener[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NewTimeServiceHelper$Listener.onTimeZoneDetectionChange [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract void com.android.internal.telephony.NewTimeServiceHelper$Listener.onTimeZoneDetectionChange(boolean)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SubscriptionMonitor$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor$1.onSubscriptionsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.SubscriptionMonitor$1.onSubscriptionsChanged()
Tracing com.android.internal.telephony.SubscriptionMonitor$1(com.android.internal.telephony.SubscriptionMonitor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.LocaleTracker[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.getCellInfoDelayTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.getMccFromCellInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.onServiceStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.onSimCardStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.processCellInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.requestNextCellInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.resetCellInfoRetry [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.startTracking [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.stopTracking [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.updateLocale [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.updateTrackingStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.getCurrentCountry [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.isTracking [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.updateOperatorNumeric [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static com.android.internal.telephony.Phone com.android.internal.telephony.LocaleTracker.access$000(com.android.internal.telephony.LocaleTracker)
public static long com.android.internal.telephony.LocaleTracker.getCellInfoDelayTime(int)
private java.lang.String com.android.internal.telephony.LocaleTracker.getMccFromCellInfo()
private void com.android.internal.telephony.LocaleTracker.log(java.lang.String)
private void com.android.internal.telephony.LocaleTracker.loge(java.lang.String)
private void com.android.internal.telephony.LocaleTracker.onServiceStateChanged(android.telephony.ServiceState)
private synchronized void com.android.internal.telephony.LocaleTracker.onSimCardStateChanged(int)
private void com.android.internal.telephony.LocaleTracker.processCellInfo(android.os.AsyncResult)
private void com.android.internal.telephony.LocaleTracker.requestNextCellInfo(boolean)
private void com.android.internal.telephony.LocaleTracker.resetCellInfoRetry()
private void com.android.internal.telephony.LocaleTracker.startTracking()
private void com.android.internal.telephony.LocaleTracker.stopTracking()
private synchronized void com.android.internal.telephony.LocaleTracker.updateLocale()
private void com.android.internal.telephony.LocaleTracker.updateTrackingStatus()
public void com.android.internal.telephony.LocaleTracker.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public java.lang.String com.android.internal.telephony.LocaleTracker.getCurrentCountry()
public void com.android.internal.telephony.LocaleTracker.handleMessage(android.os.Message)
public boolean com.android.internal.telephony.LocaleTracker.isTracking()
public void com.android.internal.telephony.LocaleTracker.updateOperatorNumeric(java.lang.String)
Tracing public com.android.internal.telephony.LocaleTracker(com.android.internal.telephony.Phone,com.android.internal.telephony.NitzStateMachine,android.os.Looper)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.InboundSmsHandler$StartupState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.InboundSmsHandler$StartupState.enter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.InboundSmsHandler$StartupState.processMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.InboundSmsHandler$StartupState.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.InboundSmsHandler$StartupState.enter()
public boolean com.android.internal.telephony.InboundSmsHandler$StartupState.processMessage(android.os.Message)
Tracing private com.android.internal.telephony.InboundSmsHandler$StartupState(com.android.internal.telephony.InboundSmsHandler)
Tracing com.android.internal.telephony.InboundSmsHandler$StartupState(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent[] com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.emptyArray()
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.clear()
protected int com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.computeSerializedSize()
public com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.RcsThreadQueryHelper[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.get1To1ThreadUri [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.getAllParticipantsInThreadUri [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.getGroupThreadUri [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.getParticipantInThreadUri [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.create1To1Thread [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.createGroupThread [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.performThreadQuery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.RcsThreadQueryHelper.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static android.net.Uri com.android.internal.telephony.ims.RcsThreadQueryHelper.get1To1ThreadUri(int)
static android.net.Uri com.android.internal.telephony.ims.RcsThreadQueryHelper.getAllParticipantsInThreadUri(int)
static android.net.Uri com.android.internal.telephony.ims.RcsThreadQueryHelper.getGroupThreadUri(int)
static android.net.Uri com.android.internal.telephony.ims.RcsThreadQueryHelper.getParticipantInThreadUri(int,int)
int com.android.internal.telephony.ims.RcsThreadQueryHelper.create1To1Thread(int) throws android.os.RemoteException
int com.android.internal.telephony.ims.RcsThreadQueryHelper.createGroupThread(java.lang.String,android.net.Uri) throws android.os.RemoteException
android.telephony.ims.RcsThreadQueryResultParcelable com.android.internal.telephony.ims.RcsThreadQueryHelper.performThreadQuery(android.os.Bundle) throws android.os.RemoteException
Tracing com.android.internal.telephony.ims.RcsThreadQueryHelper(android.content.ContentResolver,com.android.internal.telephony.ims.RcsParticipantQueryHelper)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.hardware.radio.config.V1_2.IRadioConfigResponse[39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.asInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.castFrom [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.getService [4 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.debug [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.getDebugInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.getHashChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.getSimSlotsStatusResponse_1_2 [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.interfaceChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.interfaceDescriptor [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.linkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.notifySyspropsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.ping [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.setHALInstrumentation [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_2.IRadioConfigResponse.unlinkToDeath [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static android.hardware.radio.config.V1_2.IRadioConfigResponse android.hardware.radio.config.V1_2.IRadioConfigResponse.asInterface(android.os.IHwBinder)
public static android.hardware.radio.config.V1_2.IRadioConfigResponse android.hardware.radio.config.V1_2.IRadioConfigResponse.castFrom(android.os.IHwInterface)
public static android.hardware.radio.config.V1_2.IRadioConfigResponse android.hardware.radio.config.V1_2.IRadioConfigResponse.getService() throws android.os.RemoteException
public static android.hardware.radio.config.V1_2.IRadioConfigResponse android.hardware.radio.config.V1_2.IRadioConfigResponse.getService(java.lang.String) throws android.os.RemoteException
public static android.hardware.radio.config.V1_2.IRadioConfigResponse android.hardware.radio.config.V1_2.IRadioConfigResponse.getService(java.lang.String,boolean) throws android.os.RemoteException
public static android.hardware.radio.config.V1_2.IRadioConfigResponse android.hardware.radio.config.V1_2.IRadioConfigResponse.getService(boolean) throws android.os.RemoteException
public abstract android.os.IHwBinder android.hardware.radio.config.V1_2.IRadioConfigResponse.asBinder()
public abstract void android.hardware.radio.config.V1_2.IRadioConfigResponse.debug(android.os.NativeHandle,java.util.ArrayList) throws android.os.RemoteException
public abstract android.internal.hidl.base.V1_0.DebugInfo android.hardware.radio.config.V1_2.IRadioConfigResponse.getDebugInfo() throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.config.V1_2.IRadioConfigResponse.getHashChain() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigResponse.getSimSlotsStatusResponse_1_2(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList) throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.config.V1_2.IRadioConfigResponse.interfaceChain() throws android.os.RemoteException
public abstract java.lang.String android.hardware.radio.config.V1_2.IRadioConfigResponse.interfaceDescriptor() throws android.os.RemoteException
public abstract boolean android.hardware.radio.config.V1_2.IRadioConfigResponse.linkToDeath(android.os.IHwBinder$DeathRecipient,long) throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigResponse.notifySyspropsChanged() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigResponse.ping() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_2.IRadioConfigResponse.setHALInstrumentation() throws android.os.RemoteException
public abstract boolean android.hardware.radio.config.V1_2.IRadioConfigResponse.unlinkToDeath(android.os.IHwBinder$DeathRecipient) throws android.os.RemoteException
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.DeviceStateMonitor[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.deviceTypeToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.isDeviceCharging [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.isLowDataExpected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.isPowerSaveModeOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.isScreenOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.onReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.onSetIndicationUpdateMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.onUpdateDeviceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.sendDeviceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.setCellInfoMinInterval [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.setLinkCapacityReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.setSignalStrengthReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.setUnsolResponseFilter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffDormancyUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffFullNetworkUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffLinkCapacityEstimate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffPhysicalChannelConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffSignalStrength [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.computeCellInfoMinInterval [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.setIndicationUpdateMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.DeviceStateMonitor.access$000(com.android.internal.telephony.DeviceStateMonitor,java.lang.String,boolean)
static boolean com.android.internal.telephony.DeviceStateMonitor.access$100(com.android.internal.telephony.DeviceStateMonitor)
static boolean com.android.internal.telephony.DeviceStateMonitor.access$200(com.android.internal.telephony.DeviceStateMonitor)
private java.lang.String com.android.internal.telephony.DeviceStateMonitor.deviceTypeToString(int)
private boolean com.android.internal.telephony.DeviceStateMonitor.isDeviceCharging()
private boolean com.android.internal.telephony.DeviceStateMonitor.isLowDataExpected()
private boolean com.android.internal.telephony.DeviceStateMonitor.isPowerSaveModeOn()
private boolean com.android.internal.telephony.DeviceStateMonitor.isScreenOn()
private void com.android.internal.telephony.DeviceStateMonitor.log(java.lang.String,boolean)
private void com.android.internal.telephony.DeviceStateMonitor.onReset()
private void com.android.internal.telephony.DeviceStateMonitor.onSetIndicationUpdateMode(int,int)
private void com.android.internal.telephony.DeviceStateMonitor.onUpdateDeviceState(int,boolean)
private void com.android.internal.telephony.DeviceStateMonitor.sendDeviceState(int,boolean)
private void com.android.internal.telephony.DeviceStateMonitor.setCellInfoMinInterval(int)
private void com.android.internal.telephony.DeviceStateMonitor.setLinkCapacityReportingCriteria()
private void com.android.internal.telephony.DeviceStateMonitor.setSignalStrengthReportingCriteria()
private void com.android.internal.telephony.DeviceStateMonitor.setUnsolResponseFilter(int,boolean)
private boolean com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffDormancyUpdate()
private boolean com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffFullNetworkUpdate()
private boolean com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffLinkCapacityEstimate()
private boolean com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffPhysicalChannelConfig()
private boolean com.android.internal.telephony.DeviceStateMonitor.shouldTurnOffSignalStrength()
public int com.android.internal.telephony.DeviceStateMonitor.computeCellInfoMinInterval()
public void com.android.internal.telephony.DeviceStateMonitor.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.DeviceStateMonitor.handleMessage(android.os.Message)
public void com.android.internal.telephony.DeviceStateMonitor.setIndicationUpdateMode(int,int)
Tracing public com.android.internal.telephony.DeviceStateMonitor(com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SubscriptionMonitor[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$502 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$702 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.access$800 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.invalidPhoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.registerForDefaultDataSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.registerForSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.unregisterForDefaultDataSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.unregisterForSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
static java.lang.Object com.android.internal.telephony.SubscriptionMonitor.access$000(com.android.internal.telephony.SubscriptionMonitor)
static int[] com.android.internal.telephony.SubscriptionMonitor.access$100(com.android.internal.telephony.SubscriptionMonitor)
static com.android.internal.telephony.SubscriptionController com.android.internal.telephony.SubscriptionMonitor.access$200(com.android.internal.telephony.SubscriptionMonitor)
static android.os.RegistrantList[] com.android.internal.telephony.SubscriptionMonitor.access$300(com.android.internal.telephony.SubscriptionMonitor)
static void com.android.internal.telephony.SubscriptionMonitor.access$400(com.android.internal.telephony.SubscriptionMonitor,java.lang.String)
static int com.android.internal.telephony.SubscriptionMonitor.access$500(com.android.internal.telephony.SubscriptionMonitor)
static int com.android.internal.telephony.SubscriptionMonitor.access$502(com.android.internal.telephony.SubscriptionMonitor,int)
static android.os.RegistrantList[] com.android.internal.telephony.SubscriptionMonitor.access$600(com.android.internal.telephony.SubscriptionMonitor)
static int com.android.internal.telephony.SubscriptionMonitor.access$700(com.android.internal.telephony.SubscriptionMonitor)
static int com.android.internal.telephony.SubscriptionMonitor.access$702(com.android.internal.telephony.SubscriptionMonitor,int)
static boolean com.android.internal.telephony.SubscriptionMonitor.access$800(com.android.internal.telephony.SubscriptionMonitor,int)
private boolean com.android.internal.telephony.SubscriptionMonitor.invalidPhoneId(int)
private void com.android.internal.telephony.SubscriptionMonitor.log(java.lang.String)
public void com.android.internal.telephony.SubscriptionMonitor.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.SubscriptionMonitor.registerForDefaultDataSubscriptionChanged(int,android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.SubscriptionMonitor.registerForSubscriptionChanged(int,android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.SubscriptionMonitor.unregisterForDefaultDataSubscriptionChanged(int,android.os.Handler)
public void com.android.internal.telephony.SubscriptionMonitor.unregisterForSubscriptionChanged(int,android.os.Handler)
Tracing public com.android.internal.telephony.SubscriptionMonitor()
Tracing public com.android.internal.telephony.SubscriptionMonitor(com.android.internal.telephony.ITelephonyRegistry,android.content.Context,com.android.internal.telephony.SubscriptionController,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities[] com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.emptyArray()
public static com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.clear()
protected int com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.computeSerializedSize()
public com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.TelephonyProto$ImsCapabilities()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.WakeLockStateMachine$WaitingState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WakeLockStateMachine$WaitingState.processMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WakeLockStateMachine$WaitingState.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.internal.telephony.WakeLockStateMachine$WaitingState.processMessage(android.os.Message)
Tracing com.android.internal.telephony.WakeLockStateMachine$WaitingState(com.android.internal.telephony.WakeLockStateMachine)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.addFeatureForAllSlots [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.equals [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.getSupportedFeatures [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.hashCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.replaceFeatures [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
void com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.addFeatureForAllSlots(int)
public boolean com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.equals(java.lang.Object)
public java.util.HashSet com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.getSupportedFeatures()
public int com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.hashCode()
void com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.replaceFeatures(java.util.Set)
public java.lang.String com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo.toString()
Tracing public com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo(int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$3[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$3.connectionReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$3.connectionUnavailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$3.connectionReady(com.android.ims.ImsManager) throws com.android.ims.ImsException
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$3.connectionUnavailable()
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$3(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsServiceController$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$1.onUpdateSupportedImsFeatures [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.ims.ImsServiceController$1.onUpdateSupportedImsFeatures(android.telephony.ims.stub.ImsFeatureConfiguration)
Tracing com.android.internal.telephony.ims.ImsServiceController$1(com.android.internal.telephony.ims.ImsServiceController)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.close [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.deactivateDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.requestDataCallList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.setDataProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.setInitialAttachApn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.setupDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
static java.util.Map com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.access$000(com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider)
public void com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.close()
public void com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.deactivateDataCall(int,int,android.telephony.data.DataServiceCallback)
public void com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.requestDataCallList(android.telephony.data.DataServiceCallback)
public void com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.setDataProfile(java.util.List,boolean,android.telephony.data.DataServiceCallback)
public void com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.telephony.data.DataServiceCallback)
public void com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider.setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.telephony.data.DataServiceCallback)
Tracing private com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider(com.android.internal.telephony.dataconnection.CellularDataService,int)
Tracing com.android.internal.telephony.dataconnection.CellularDataService$CellularDataServiceProvider(com.android.internal.telephony.dataconnection.CellularDataService,int,com.android.internal.telephony.dataconnection.CellularDataService$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.euicc.EuiccConnector$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.euicc.EuiccConnector$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.euicc.EuiccConnector$1(com.android.internal.telephony.euicc.EuiccConnector)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.IccSlotStatus[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccSlotStatus.equals [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccSlotStatus.setCardState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccSlotStatus.setSlotState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccSlotStatus.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccSlotStatus.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.internal.telephony.uicc.IccSlotStatus.equals(java.lang.Object)
public void com.android.internal.telephony.uicc.IccSlotStatus.setCardState(int)
public void com.android.internal.telephony.uicc.IccSlotStatus.setSlotState(int)
public java.lang.String com.android.internal.telephony.uicc.IccSlotStatus.toString()
Tracing public com.android.internal.telephony.uicc.IccSlotStatus()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RetryManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.configure [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.configureRetry [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.getRetryTimer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.nextRandomizationTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.parseNonNegativeInt [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.reset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.validateNonNegativeInt [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.getDelayForNextApn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.getNextApnSetting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.getRetryAfterDisconnectDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.getWaitingApns [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.markApnPermanentFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.setModemSuggestedDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.setWaitingApns [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RetryManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private boolean com.android.internal.telephony.RetryManager.configure(java.lang.String)
private void com.android.internal.telephony.RetryManager.configureRetry()
private int com.android.internal.telephony.RetryManager.getRetryTimer()
private void com.android.internal.telephony.RetryManager.log(java.lang.String)
private int com.android.internal.telephony.RetryManager.nextRandomizationTime(int)
private android.util.Pair com.android.internal.telephony.RetryManager.parseNonNegativeInt(java.lang.String,java.lang.String)
private void com.android.internal.telephony.RetryManager.reset()
private boolean com.android.internal.telephony.RetryManager.validateNonNegativeInt(java.lang.String,int)
public long com.android.internal.telephony.RetryManager.getDelayForNextApn(boolean)
public android.telephony.data.ApnSetting com.android.internal.telephony.RetryManager.getNextApnSetting()
public long com.android.internal.telephony.RetryManager.getRetryAfterDisconnectDelay()
public java.util.ArrayList com.android.internal.telephony.RetryManager.getWaitingApns()
public void com.android.internal.telephony.RetryManager.markApnPermanentFailed(android.telephony.data.ApnSetting)
public void com.android.internal.telephony.RetryManager.setModemSuggestedDelay(long)
public void com.android.internal.telephony.RetryManager.setWaitingApns(java.util.ArrayList)
public java.lang.String com.android.internal.telephony.RetryManager.toString()
Tracing public com.android.internal.telephony.RetryManager(com.android.internal.telephony.Phone,java.lang.String)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SubscriptionMonitor$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor$2.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionMonitor$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.SubscriptionMonitor$2.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.SubscriptionMonitor$2(com.android.internal.telephony.SubscriptionMonitor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RadioCapability[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.getLogicalModemUuid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.getPhase [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.getPhoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.getRadioAccessFamily [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.getSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.getStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.getVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RadioCapability.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public java.lang.String com.android.internal.telephony.RadioCapability.getLogicalModemUuid()
public int com.android.internal.telephony.RadioCapability.getPhase()
public int com.android.internal.telephony.RadioCapability.getPhoneId()
public int com.android.internal.telephony.RadioCapability.getRadioAccessFamily()
public int com.android.internal.telephony.RadioCapability.getSession()
public int com.android.internal.telephony.RadioCapability.getStatus()
public int com.android.internal.telephony.RadioCapability.getVersion()
public java.lang.String com.android.internal.telephony.RadioCapability.toString()
Tracing public com.android.internal.telephony.RadioCapability(int,int,int,int,java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.access$2700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.broadcastDataStallDetected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.checkRecovery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.getElapsedTimeSinceRecoveryMs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.getMinDurationBetweenRecovery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.getRecoveryAction [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isRecoveryAlreadyStarted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.putRecoveryAction [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.triggerRecovery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.doRecovery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isAggressiveRecovery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isNoRxDataStallDetectionEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isRecoveryOnBadNetworkEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.processNetworkStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.reset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static int com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.access$2700(com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler)
private void com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.broadcastDataStallDetected(int)
private boolean com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.checkRecovery()
private long com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.getElapsedTimeSinceRecoveryMs()
private long com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.getMinDurationBetweenRecovery()
private int com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.getRecoveryAction()
private boolean com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isRecoveryAlreadyStarted()
private void com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.putRecoveryAction(int)
private void com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.triggerRecovery()
public void com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.doRecovery()
public boolean com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isAggressiveRecovery()
public boolean com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isNoRxDataStallDetectionEnabled()
public boolean com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.isRecoveryOnBadNetworkEnabled()
public void com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.processNetworkStatusChanged(boolean)
public void com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler.reset()
Tracing public com.android.internal.telephony.dataconnection.DcTracker$DataStallRecoveryHandler(com.android.internal.telephony.dataconnection.DcTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsServiceController$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$2.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.ims.ImsServiceController$2.run()
Tracing com.android.internal.telephony.ims.ImsServiceController$2(com.android.internal.telephony.ims.ImsServiceController)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.-$$Lambda$ImsResolver$aWLlEvfonhYSfDR8cVsM6A5pmqI[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.-$$Lambda$ImsResolver$aWLlEvfonhYSfDR8cVsM6A5pmqI.test [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.-$$Lambda$ImsResolver$aWLlEvfonhYSfDR8cVsM6A5pmqI.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final boolean com.android.internal.telephony.ims.-$$Lambda$ImsResolver$aWLlEvfonhYSfDR8cVsM6A5pmqI.test(java.lang.Object)
Tracing public com.android.internal.telephony.ims.-$$Lambda$ImsResolver$aWLlEvfonhYSfDR8cVsM6A5pmqI(com.android.internal.telephony.ims.ImsResolver$ImsServiceInfo)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.updateConferenceParticipantsTiming [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHandover [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHandoverFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHeld [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHoldFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHoldReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallMergeFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallMerged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallProgressing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallQualityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallResumeFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallResumeReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallResumed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallSessionTtyModeReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallStartFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallStarted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallSuppServiceReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallTerminated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallUpdated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onConferenceParticipantsStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onMultipartyStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttAudioIndicatorChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttMessageReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttModifyRequestReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttModifyResponseReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.updateConferenceParticipantsTiming(java.util.List)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHandover(com.android.ims.ImsCall,int,int,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHandoverFailed(com.android.ims.ImsCall,int,int,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHeld(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHoldFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallHoldReceived(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallMergeFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallMerged(com.android.ims.ImsCall,com.android.ims.ImsCall,boolean)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallProgressing(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallQualityChanged(com.android.ims.ImsCall,android.telephony.CallQuality)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallResumeFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallResumeReceived(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallResumed(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallSessionTtyModeReceived(com.android.ims.ImsCall,int)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallStartFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallStarted(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallSuppServiceReceived(com.android.ims.ImsCall,android.telephony.ims.ImsSuppServiceNotification)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallTerminated(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onCallUpdated(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onConferenceParticipantsStateChanged(com.android.ims.ImsCall,java.util.List)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onMultipartyStateChanged(com.android.ims.ImsCall,boolean)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttAudioIndicatorChanged(com.android.ims.ImsCall,android.telephony.ims.ImsStreamMediaProfile)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttMessageReceived(com.android.ims.ImsCall,java.lang.String)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttModifyRequestReceived(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4.onRttModifyResponseReceived(com.android.ims.ImsCall,int)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$4(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.IccConstants[39;49;00m
[32;01m	Spec: => 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.hardware.radio.config.V1_0.IRadioConfigResponse[39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.asInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.castFrom [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.getService [4 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.debug [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.getDebugInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.getHashChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.getSimSlotsStatusResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.interfaceChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.interfaceDescriptor [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.linkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.notifySyspropsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.ping [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.setHALInstrumentation [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.setSimSlotsMappingResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.config.V1_0.IRadioConfigResponse.unlinkToDeath [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static android.hardware.radio.config.V1_0.IRadioConfigResponse android.hardware.radio.config.V1_0.IRadioConfigResponse.asInterface(android.os.IHwBinder)
public static android.hardware.radio.config.V1_0.IRadioConfigResponse android.hardware.radio.config.V1_0.IRadioConfigResponse.castFrom(android.os.IHwInterface)
public static android.hardware.radio.config.V1_0.IRadioConfigResponse android.hardware.radio.config.V1_0.IRadioConfigResponse.getService() throws android.os.RemoteException
public static android.hardware.radio.config.V1_0.IRadioConfigResponse android.hardware.radio.config.V1_0.IRadioConfigResponse.getService(java.lang.String) throws android.os.RemoteException
public static android.hardware.radio.config.V1_0.IRadioConfigResponse android.hardware.radio.config.V1_0.IRadioConfigResponse.getService(java.lang.String,boolean) throws android.os.RemoteException
public static android.hardware.radio.config.V1_0.IRadioConfigResponse android.hardware.radio.config.V1_0.IRadioConfigResponse.getService(boolean) throws android.os.RemoteException
public abstract android.os.IHwBinder android.hardware.radio.config.V1_0.IRadioConfigResponse.asBinder()
public abstract void android.hardware.radio.config.V1_0.IRadioConfigResponse.debug(android.os.NativeHandle,java.util.ArrayList) throws android.os.RemoteException
public abstract android.internal.hidl.base.V1_0.DebugInfo android.hardware.radio.config.V1_0.IRadioConfigResponse.getDebugInfo() throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.config.V1_0.IRadioConfigResponse.getHashChain() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_0.IRadioConfigResponse.getSimSlotsStatusResponse(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList) throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.config.V1_0.IRadioConfigResponse.interfaceChain() throws android.os.RemoteException
public abstract java.lang.String android.hardware.radio.config.V1_0.IRadioConfigResponse.interfaceDescriptor() throws android.os.RemoteException
public abstract boolean android.hardware.radio.config.V1_0.IRadioConfigResponse.linkToDeath(android.os.IHwBinder$DeathRecipient,long) throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_0.IRadioConfigResponse.notifySyspropsChanged() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_0.IRadioConfigResponse.ping() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_0.IRadioConfigResponse.setHALInstrumentation() throws android.os.RemoteException
public abstract void android.hardware.radio.config.V1_0.IRadioConfigResponse.setSimSlotsMappingResponse(android.hardware.radio.V1_0.RadioResponseInfo) throws android.os.RemoteException
public abstract boolean android.hardware.radio.config.V1_0.IRadioConfigResponse.unlinkToDeath(android.os.IHwBinder$DeathRecipient) throws android.os.RemoteException
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer.equals [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer.hashCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer.resolve [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer.equals(java.lang.Object)
public int com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer.hashCode()
public android.os.IInterface com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer.resolve(java.lang.Class)
Tracing com.android.internal.telephony.ims.ImsServiceController$ImsFeatureContainer(com.android.internal.telephony.ims.ImsServiceController,int,int,android.os.IInterface)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierActionAgent[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.getCarrierActionEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.getRegistrantsFromAction [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.logv [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.carrierActionReportDefaultNetworkStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.carrierActionReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.carrierActionSetMeteredApnsEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.carrierActionSetRadioEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.getContentObserver [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.registerForCarrierAction [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.unregisterForCarrierAction [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierActionAgent.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private java.lang.Boolean com.android.internal.telephony.CarrierActionAgent.getCarrierActionEnabled(int)
private android.os.RegistrantList com.android.internal.telephony.CarrierActionAgent.getRegistrantsFromAction(int)
private void com.android.internal.telephony.CarrierActionAgent.log(java.lang.String)
private void com.android.internal.telephony.CarrierActionAgent.loge(java.lang.String)
private void com.android.internal.telephony.CarrierActionAgent.logv(java.lang.String)
public void com.android.internal.telephony.CarrierActionAgent.carrierActionReportDefaultNetworkStatus(boolean)
public void com.android.internal.telephony.CarrierActionAgent.carrierActionReset()
public void com.android.internal.telephony.CarrierActionAgent.carrierActionSetMeteredApnsEnabled(boolean)
public void com.android.internal.telephony.CarrierActionAgent.carrierActionSetRadioEnabled(boolean)
public void com.android.internal.telephony.CarrierActionAgent.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public android.database.ContentObserver com.android.internal.telephony.CarrierActionAgent.getContentObserver()
public void com.android.internal.telephony.CarrierActionAgent.handleMessage(android.os.Message)
public void com.android.internal.telephony.CarrierActionAgent.registerForCarrierAction(int,android.os.Handler,int,java.lang.Object,boolean)
public void com.android.internal.telephony.CarrierActionAgent.unregisterForCarrierAction(android.os.Handler,int)
Tracing public com.android.internal.telephony.CarrierActionAgent(com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DataConnection$SetupResult[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnection$SetupResult.valueOf [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnection$SetupResult.values [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnection$SetupResult.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnection$SetupResult.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.dataconnection.DataConnection$SetupResult com.android.internal.telephony.dataconnection.DataConnection$SetupResult.valueOf(java.lang.String)
public static com.android.internal.telephony.dataconnection.DataConnection$SetupResult[] com.android.internal.telephony.dataconnection.DataConnection$SetupResult.values()
public java.lang.String com.android.internal.telephony.dataconnection.DataConnection$SetupResult.toString()
Tracing private com.android.internal.telephony.dataconnection.DataConnection$SetupResult(java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse[] com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.emptyArray()
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.clear()
protected int com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.computeSerializedSize()
public com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.TelephonyProto$TelephonyEvent$RilSetupDataCallResponse()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.NetworkRegistrationManager$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.NetworkRegistrationManager$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.NetworkRegistrationManager$1(com.android.internal.telephony.NetworkRegistrationManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsExternalCallTracker$ExternalCallStateListener[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsExternalCallTracker$ExternalCallStateListener.onImsExternalCallStateUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsExternalCallTracker$ExternalCallStateListener.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsExternalCallTracker$ExternalCallStateListener.onImsExternalCallStateUpdate(java.util.List)
Tracing public com.android.internal.telephony.imsphone.ImsExternalCallTracker$ExternalCallStateListener(com.android.internal.telephony.imsphone.ImsExternalCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.BaseCommands[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.getLteOnCdmaMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.getRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.getRadioState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.getRilVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.pullLceData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerFoT53ClirlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForCallStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForCallWaitingInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForCarrierInfoForImsiEncryption [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForCdmaOtaProvision [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForCdmaPrlChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForCdmaSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForDataCallListChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForDisplayInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForEmergencyNumberList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForExitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForHardwareConfigChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForIccSlotStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForIccStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForImsNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForInCallVoicePrivacyOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForInCallVoicePrivacyOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForLceInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForLineControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForModemReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForNattKeepaliveStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForNetworkScanResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForOffOrNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForPcoData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForPhysicalChannelConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForRadioCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForRadioStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForRedirectedNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForResendIncallMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForRilConnected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForRingbackTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForSignalInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForSrvccStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForSubscriptionStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForT53AudioControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.registerForVoiceRadioTechChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.requestShutdown [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setDataAllowed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnCallRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnCatCallSetUp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnCatCcAlphaNotify [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnCatEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnCatProactiveCmd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnCatSessionEnd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnIccSmsFull [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnNITZTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnNewCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnNewGsmBroadcastSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnNewGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnRestrictedStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnSignalStrengthUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnSmsOnSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnSmsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnSs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnSuppServiceNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnUSSD [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setOnUnsolOemHookRaw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setRadioState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.setUiccSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.startLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.stopLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.testingEmergencyCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnCallRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnCatCallSetUp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnCatCcAlphaNotify [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnCatEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnCatProactiveCmd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnCatSessionEnd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnIccSmsFull [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnNITZTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnNewCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnNewGsmBroadcastSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnNewGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnRestrictedStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnSignalStrengthUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnSmsOnSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnSmsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnSs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnSuppServiceNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnUSSD [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unSetOnUnsolOemHookRaw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForCallStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForCallWaitingInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForCarrierInfoForImsiEncryption [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForCdmaOtaProvision [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForCdmaPrlChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForCdmaSubscriptionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForDataCallListChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForDisplayInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForEmergencyNumberList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForExitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForHardwareConfigChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForIccSlotStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForIccStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForImsNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForInCallVoicePrivacyOff [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForInCallVoicePrivacyOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForLceInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForLineControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForModemReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForNattKeepaliveStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForNetworkScanResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForNetworkStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForOffOrNotAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForOn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForPcoData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForPhysicalChannelConfiguration [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForRadioCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForRadioStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForRedirectedNumberInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForResendIncallMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForRilConnected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForRingbackTone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForSignalInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForSrvccStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForSubscriptionStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForT53AudioControlInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForT53ClirInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unregisterForVoiceRadioTechChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.unsetOnIccRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.BaseCommands.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.BaseCommands.getLteOnCdmaMode()
public void com.android.internal.telephony.BaseCommands.getRadioCapability(android.os.Message)
public int com.android.internal.telephony.BaseCommands.getRadioState()
public int com.android.internal.telephony.BaseCommands.getRilVersion()
public void com.android.internal.telephony.BaseCommands.pullLceData(android.os.Message)
public void com.android.internal.telephony.BaseCommands.registerFoT53ClirlInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForAvailable(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForCallStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForCallWaitingInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForCarrierInfoForImsiEncryption(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForCdmaOtaProvision(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForCdmaPrlChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForCdmaSubscriptionChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForCellInfoList(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForDataCallListChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForDisplayInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForEmergencyNumberList(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForExitEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForHardwareConfigChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForIccRefresh(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForIccSlotStatusChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForIccStatusChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForImsNetworkStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForInCallVoicePrivacyOff(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForInCallVoicePrivacyOn(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForLceInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForLineControlInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForModemReset(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForNattKeepaliveStatus(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForNetworkScanResult(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForNetworkStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForNotAvailable(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForNumberInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForOffOrNotAvailable(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForOn(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForPcoData(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForPhysicalChannelConfiguration(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForRadioCapabilityChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForRadioStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForRedirectedNumberInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForResendIncallMute(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForRilConnected(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForRingbackTone(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForSignalInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForSrvccStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForSubscriptionStatusChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForT53AudioControlInfo(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.registerForVoiceRadioTechChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.requestShutdown(android.os.Message)
public void com.android.internal.telephony.BaseCommands.setDataAllowed(boolean,android.os.Message)
public void com.android.internal.telephony.BaseCommands.setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnCallRing(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnCatCcAlphaNotify(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnCatEvent(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnIccRefresh(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnIccSmsFull(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnNITZTime(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnNewGsmSms(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnSmsOnSim(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnSmsStatus(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnSs(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnUSSD(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setOnUnsolOemHookRaw(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.BaseCommands.setRadioCapability(com.android.internal.telephony.RadioCapability,android.os.Message)
protected void com.android.internal.telephony.BaseCommands.setRadioState(int,boolean)
public void com.android.internal.telephony.BaseCommands.setUiccSubscription(int,int,int,int,android.os.Message)
public void com.android.internal.telephony.BaseCommands.startLceService(int,boolean,android.os.Message)
public void com.android.internal.telephony.BaseCommands.stopLceService(android.os.Message)
public void com.android.internal.telephony.BaseCommands.testingEmergencyCall()
public void com.android.internal.telephony.BaseCommands.unSetOnCallRing(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnCatCallSetUp(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnCatCcAlphaNotify(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnCatEvent(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnCatProactiveCmd(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnCatSessionEnd(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnIccSmsFull(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnNITZTime(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnNewCdmaSms(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnNewGsmBroadcastSms(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnNewGsmSms(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnRestrictedStateChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnSignalStrengthUpdate(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnSmsOnSim(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnSmsStatus(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnSs(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnSuppServiceNotification(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnUSSD(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unSetOnUnsolOemHookRaw(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForAvailable(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForCallStateChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForCallWaitingInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForCarrierInfoForImsiEncryption(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForCdmaOtaProvision(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForCdmaPrlChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForCdmaSubscriptionChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForCellInfoList(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForDataCallListChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForDisplayInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForEmergencyNumberList(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForExitEmergencyCallbackMode(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForHardwareConfigChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForIccRefresh(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForIccSlotStatusChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForIccStatusChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForImsNetworkStateChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForInCallVoicePrivacyOff(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForInCallVoicePrivacyOn(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForLceInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForLineControlInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForModemReset(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForNattKeepaliveStatus(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForNetworkScanResult(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForNetworkStateChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForNotAvailable(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForNumberInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForOffOrNotAvailable(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForOn(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForPcoData(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForPhysicalChannelConfiguration(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForRadioCapabilityChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForRadioStateChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForRedirectedNumberInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForResendIncallMute(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForRilConnected(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForRingbackTone(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForSignalInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForSrvccStateChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForSubscriptionStatusChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForT53AudioControlInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForT53ClirInfo(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unregisterForVoiceRadioTechChanged(android.os.Handler)
public void com.android.internal.telephony.BaseCommands.unsetOnIccRefresh(android.os.Handler)
Tracing public com.android.internal.telephony.BaseCommands(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult.equals [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult.hashCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult.equals(java.lang.Object)
public int com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult.hashCode()
public java.lang.String com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult.toString()
Tracing public com.android.internal.telephony.TimeZoneLookupHelper$OffsetResult(java.lang.String,boolean)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RIL$RilHandler[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL$RilHandler.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL$RilHandler.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.RIL$RilHandler.handleMessage(android.os.Message)
Tracing public com.android.internal.telephony.RIL$RilHandler(com.android.internal.telephony.RIL)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.protobuf.nano.ExtendableMessageNano[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.clone [3 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.getExtension [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.hasExtension [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.setExtension [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.storeUnknownField [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public com.android.internal.telephony.protobuf.nano.ExtendableMessageNano com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.clone() throws java.lang.CloneNotSupportedException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.clone() throws java.lang.CloneNotSupportedException
public java.lang.Object com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.clone() throws java.lang.CloneNotSupportedException
protected int com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.computeSerializedSize()
public final java.lang.Object com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.getExtension(com.android.internal.telephony.protobuf.nano.Extension)
public final boolean com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.hasExtension(com.android.internal.telephony.protobuf.nano.Extension)
public final com.android.internal.telephony.protobuf.nano.ExtendableMessageNano com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.setExtension(com.android.internal.telephony.protobuf.nano.Extension,java.lang.Object)
protected final boolean com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.storeUnknownField(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano,int) throws java.io.IOException
public void com.android.internal.telephony.protobuf.nano.ExtendableMessageNano.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.protobuf.nano.ExtendableMessageNano()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsServiceFeatureQueryManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.isQueryInProgress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.startQuery [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static android.content.Context com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$000(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager)
static com.android.internal.telephony.ims.ImsServiceFeatureQueryManager$Listener com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$100(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager)
static java.lang.Object com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$200(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager)
static java.util.Map com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.access$300(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager)
public boolean com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.isQueryInProgress()
public boolean com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.startQuery(android.content.ComponentName,java.lang.String)
Tracing public com.android.internal.telephony.ims.ImsServiceFeatureQueryManager(android.content.Context,com.android.internal.telephony.ims.ImsServiceFeatureQueryManager$Listener)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.CarrierIdProto$CarrierList[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierList.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierList.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierList.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierList.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierList.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierList.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.CarrierIdProto$CarrierList.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.CarrierIdProto$CarrierList[] com.android.internal.telephony.nano.CarrierIdProto$CarrierList.emptyArray()
public static com.android.internal.telephony.nano.CarrierIdProto$CarrierList com.android.internal.telephony.nano.CarrierIdProto$CarrierList.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.CarrierIdProto$CarrierList com.android.internal.telephony.nano.CarrierIdProto$CarrierList.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.CarrierIdProto$CarrierList com.android.internal.telephony.nano.CarrierIdProto$CarrierList.clear()
protected int com.android.internal.telephony.nano.CarrierIdProto$CarrierList.computeSerializedSize()
public com.android.internal.telephony.nano.CarrierIdProto$CarrierList com.android.internal.telephony.nano.CarrierIdProto$CarrierList.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.CarrierIdProto$CarrierList.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.CarrierIdProto$CarrierList.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.CarrierIdProto$CarrierList()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsServiceController$3[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$3.getMaximumDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$3.getStartDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public long com.android.internal.telephony.ims.ImsServiceController$3.getMaximumDelay()
public long com.android.internal.telephony.ims.ImsServiceController$3.getStartDelay()
Tracing com.android.internal.telephony.ims.ImsServiceController$3(com.android.internal.telephony.ims.ImsServiceController)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RIL[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.access$600 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.acquireWakeLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.addRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.addToRilHistogram [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.appendPrimitiveArrayToArrayList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.arrayListToPrimitiveArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.censoredTerminalResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.clearRequestList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.clearWakeLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.constructCdmaSendSmsRilRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.constructGsmSendSmsRilRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertDataCallResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertDataCallResultList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertHalCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertHalCellInfoList_1_2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertHalCellInfoList_1_4 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertHalHwConfigList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertHalLceData [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertHalRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertNullToEmptyString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertRadioAccessSpecifierToRadioHAL [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertRanToHalRan [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertToHalDataProfile10 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertToHalDataProfile14 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertToHalMvnoType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertToHalRadioAccessFamily [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertToHalResetNvType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.convertToNetworkTypeBitMask [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.createCarrierRestrictionList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.createSimApdu [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.decrementWakeLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.emergencyDial [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.findAndRemoveRequestFromList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getDeafultWorkSourceIfInvalid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getResponseForTimedOutRILRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getTelephonyRILTimingHistograms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.handleRadioProxyExceptionForRR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.isRadioBugDetectionEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.lambda$convertDataCallResult$0 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.lambda$convertDataCallResult$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.lambda$convertDataCallResult$2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.lambda$convertDataCallResult$3 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.obtainRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.primitiveArrayToArrayList [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.requestToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.resetProxyAndRequestList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.responseToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.retToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendAck [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.translateStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.acceptCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.acknowledgeIncomingGsmSmsWithPdu [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.acknowledgeLastIncomingCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.acknowledgeLastIncomingGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.cancelPendingUssd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.changeBarringPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.changeIccPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.changeIccPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.changeIccPin2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.changeIccPinForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.conference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.deactivateDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.deleteSmsOnRuim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.deleteSmsOnSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.dial [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.enableModem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.exitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.explicitCallTransfer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getAllowedCarriers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getAvailableNetworks [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getBasebandVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getCDMASubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getCdmaBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getCellInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getClientRequestStats [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getCurrentCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getDataCallList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getDataRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getDeviceIdentity [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getGsmBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getHalVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getHardwareConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getIMEI [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getIMEISV [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getIMSI [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getIMSIForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getIccCardStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getIccSlotsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getImsRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getLastCallFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getLastDataCallFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getLastPdpFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getModemActivityInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getModemStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getNetworkSelectionMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getOemHookProxy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getOperator [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getPDPContextList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getPreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getPreferredVoicePrivacy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getRadioBugDetector [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getRadioProxy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getRilHandler [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getRilRequestList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getSignalStrength [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getSmscAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getVoiceRadioTechnology [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getVoiceRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.getWakeLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.handleCallSetupRequestFromSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.hangupConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.hangupForegroundResumeBackground [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.hangupWaitingOrBackground [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.iccCloseLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.iccIO [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.iccIOForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.iccOpenLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.iccTransmitApduBasicChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.iccTransmitApduLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.invokeOemRilRequestRaw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.invokeOemRilRequestStrings [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.makeStaticRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.notifyRegistrantsCdmaInfoRec [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.notifyRegistrantsRilConnectionChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.nvReadItem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.nvResetConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.nvWriteCdmaPrl [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.nvWriteItem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.processIndication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.processRequestAck [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.processResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.processResponseDone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.pullLceData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryAvailableBandMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryCLIP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryCallForwardStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryCdmaRoamingPreference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryFacilityLockForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.queryTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.rejectCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.reportSmsMemoryStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.reportStkServiceIsRunning [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.requestIccSimAuthentication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.requestShutdown [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.resetRadio [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.riljLog [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.riljLoge [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.riljLogv [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendBurstDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendCDMAFeatureCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendDeviceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendEnvelope [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendEnvelopeWithStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendImsCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendImsGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendSMS [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendSMSExpectMore [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendTerminalResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.sendUSSD [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.separateConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setAllowedCarriers [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setBandMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCallForward [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCarrierInfoForImsiEncryption [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCdmaBroadcastActivation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCdmaBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCdmaRoamingPreference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setCellInfoListRate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setDataAllowed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setDataProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setFacilityLockForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setGsmBroadcastActivation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setGsmBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setInitialAttachApn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setLinkCapacityReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setLocationUpdates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setLogicalToPhysicalSlotMapping [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setNetworkSelectionModeAutomatic [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setNetworkSelectionModeManual [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setOnNITZTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setPhoneType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setPreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setPreferredVoicePrivacy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setRadioPower [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setSignalStrengthReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setSimCardPower [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setSmscAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setSuppServiceNotifications [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setUiccSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setUnsolResponseFilter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.setupDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.startDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.startLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.startNattKeepalive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.startNetworkScan [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.stopDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.stopLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.stopNattKeepalive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.stopNetworkScan [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPin2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPinForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPuk [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPuk2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPuk2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyIccPukForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.supplyNetworkDepersonalization [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.switchWaitingOrHoldingAndActive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.testingEmergencyCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.unsljLog [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.unsljLogMore [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.unsljLogRet [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.unsljLogvRet [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.writeMetricsCallRing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.writeMetricsModemRestartEvent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.writeMetricsSrvcc [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.writeSmsToRuim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.writeSmsToSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RIL.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
static boolean com.android.internal.telephony.RIL.access$000(com.android.internal.telephony.RIL,int)
static com.android.internal.telephony.RadioBugDetector com.android.internal.telephony.RIL.access$100(com.android.internal.telephony.RIL)
static com.android.internal.telephony.RILRequest com.android.internal.telephony.RIL.access$200(com.android.internal.telephony.RIL,int)
static java.lang.Object com.android.internal.telephony.RIL.access$300(com.android.internal.telephony.RILRequest)
static com.android.internal.telephony.metrics.TelephonyMetrics com.android.internal.telephony.RIL.access$400(com.android.internal.telephony.RIL)
static void com.android.internal.telephony.RIL.access$500(com.android.internal.telephony.RIL,com.android.internal.telephony.RILRequest)
static void com.android.internal.telephony.RIL.access$600(com.android.internal.telephony.RIL)
private void com.android.internal.telephony.RIL.acquireWakeLock(com.android.internal.telephony.RILRequest,int)
private void com.android.internal.telephony.RIL.addRequest(com.android.internal.telephony.RILRequest)
private void com.android.internal.telephony.RIL.addToRilHistogram(com.android.internal.telephony.RILRequest)
public static void com.android.internal.telephony.RIL.appendPrimitiveArrayToArrayList(byte[],java.util.ArrayList)
public static byte[] com.android.internal.telephony.RIL.arrayListToPrimitiveArray(java.util.ArrayList)
private java.lang.String com.android.internal.telephony.RIL.censoredTerminalResponse(java.lang.String)
private void com.android.internal.telephony.RIL.clearRequestList(int,boolean)
private boolean com.android.internal.telephony.RIL.clearWakeLock(int)
private void com.android.internal.telephony.RIL.constructCdmaSendSmsRilRequest(android.hardware.radio.V1_0.CdmaSmsMessage,byte[])
private android.hardware.radio.V1_0.GsmSmsMessage com.android.internal.telephony.RIL.constructGsmSendSmsRilRequest(java.lang.String,java.lang.String)
public static android.telephony.data.DataCallResponse com.android.internal.telephony.RIL.convertDataCallResult(java.lang.Object)
public static java.util.ArrayList com.android.internal.telephony.RIL.convertDataCallResultList(java.util.List)
public static java.util.ArrayList com.android.internal.telephony.RIL.convertHalCellInfoList(java.util.ArrayList)
public static java.util.ArrayList com.android.internal.telephony.RIL.convertHalCellInfoList_1_2(java.util.ArrayList)
public static java.util.ArrayList com.android.internal.telephony.RIL.convertHalCellInfoList_1_4(java.util.ArrayList)
static java.util.ArrayList com.android.internal.telephony.RIL.convertHalHwConfigList(java.util.ArrayList,com.android.internal.telephony.RIL)
static com.android.internal.telephony.LinkCapacityEstimate com.android.internal.telephony.RIL.convertHalLceData(android.hardware.radio.V1_0.LceDataInfo,com.android.internal.telephony.RIL)
static com.android.internal.telephony.LinkCapacityEstimate com.android.internal.telephony.RIL.convertHalLceData(android.hardware.radio.V1_2.LinkCapacityEstimate,com.android.internal.telephony.RIL)
static com.android.internal.telephony.RadioCapability com.android.internal.telephony.RIL.convertHalRadioCapability(android.hardware.radio.V1_0.RadioCapability,com.android.internal.telephony.RIL)
private static java.lang.String com.android.internal.telephony.RIL.convertNullToEmptyString(java.lang.String)
private android.hardware.radio.V1_1.RadioAccessSpecifier com.android.internal.telephony.RIL.convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier)
private static int com.android.internal.telephony.RIL.convertRanToHalRan(int)
private static android.hardware.radio.V1_0.DataProfileInfo com.android.internal.telephony.RIL.convertToHalDataProfile10(android.telephony.data.DataProfile)
private static android.hardware.radio.V1_4.DataProfileInfo com.android.internal.telephony.RIL.convertToHalDataProfile14(android.telephony.data.DataProfile)
private static int com.android.internal.telephony.RIL.convertToHalMvnoType(java.lang.String)
private static int com.android.internal.telephony.RIL.convertToHalRadioAccessFamily(int)
private static int com.android.internal.telephony.RIL.convertToHalResetNvType(int)
public static int com.android.internal.telephony.RIL.convertToNetworkTypeBitMask(int)
public static java.util.ArrayList com.android.internal.telephony.RIL.createCarrierRestrictionList(java.util.List)
private android.hardware.radio.V1_0.SimApdu com.android.internal.telephony.RIL.createSimApdu(int,int,int,int,int,int,java.lang.String)
private void com.android.internal.telephony.RIL.decrementWakeLock(com.android.internal.telephony.RILRequest)
private void com.android.internal.telephony.RIL.emergencyDial(java.lang.String,android.telephony.emergency.EmergencyNumber,boolean,int,com.android.internal.telephony.UUSInfo,android.os.Message)
private com.android.internal.telephony.RILRequest com.android.internal.telephony.RIL.findAndRemoveRequestFromList(int)
private android.os.WorkSource com.android.internal.telephony.RIL.getDeafultWorkSourceIfInvalid(android.os.WorkSource)
private static java.lang.Object com.android.internal.telephony.RIL.getResponseForTimedOutRILRequest(com.android.internal.telephony.RILRequest)
public static java.util.List com.android.internal.telephony.RIL.getTelephonyRILTimingHistograms()
private void com.android.internal.telephony.RIL.handleRadioProxyExceptionForRR(com.android.internal.telephony.RILRequest,java.lang.String,java.lang.Exception)
private boolean com.android.internal.telephony.RIL.isRadioBugDetectionEnabled()
static java.lang.String[] com.android.internal.telephony.RIL.lambda$convertDataCallResult$0(int)
static java.lang.String[] com.android.internal.telephony.RIL.lambda$convertDataCallResult$1(int)
static java.lang.String[] com.android.internal.telephony.RIL.lambda$convertDataCallResult$2(int)
static java.lang.String[] com.android.internal.telephony.RIL.lambda$convertDataCallResult$3(int)
private com.android.internal.telephony.RILRequest com.android.internal.telephony.RIL.obtainRequest(int,android.os.Message,android.os.WorkSource)
public static java.util.ArrayList com.android.internal.telephony.RIL.primitiveArrayToArrayList(byte[])
public static java.util.ArrayList com.android.internal.telephony.RIL.primitiveArrayToArrayList(int[])
static java.lang.String com.android.internal.telephony.RIL.requestToString(int)
private void com.android.internal.telephony.RIL.resetProxyAndRequestList()
static java.lang.String com.android.internal.telephony.RIL.responseToString(int)
static java.lang.String com.android.internal.telephony.RIL.retToString(int,java.lang.Object)
private void com.android.internal.telephony.RIL.sendAck()
private int com.android.internal.telephony.RIL.translateStatus(int)
public void com.android.internal.telephony.RIL.acceptCall(android.os.Message)
public void com.android.internal.telephony.RIL.acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)
public void com.android.internal.telephony.RIL.acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)
public void com.android.internal.telephony.RIL.cancelPendingUssd(android.os.Message)
public void com.android.internal.telephony.RIL.changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.changeIccPin(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.changeIccPin2(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.conference(android.os.Message)
public void com.android.internal.telephony.RIL.deactivateDataCall(int,int,android.os.Message)
public void com.android.internal.telephony.RIL.deleteSmsOnRuim(int,android.os.Message)
public void com.android.internal.telephony.RIL.deleteSmsOnSim(int,android.os.Message)
public void com.android.internal.telephony.RIL.dial(java.lang.String,boolean,android.telephony.emergency.EmergencyNumber,boolean,int,android.os.Message)
public void com.android.internal.telephony.RIL.dial(java.lang.String,boolean,android.telephony.emergency.EmergencyNumber,boolean,int,com.android.internal.telephony.UUSInfo,android.os.Message)
public void com.android.internal.telephony.RIL.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.RIL.enableModem(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.exitEmergencyCallbackMode(android.os.Message)
public void com.android.internal.telephony.RIL.explicitCallTransfer(android.os.Message)
public void com.android.internal.telephony.RIL.getAllowedCarriers(android.os.Message,android.os.WorkSource)
public void com.android.internal.telephony.RIL.getAvailableNetworks(android.os.Message)
public void com.android.internal.telephony.RIL.getBasebandVersion(android.os.Message)
public void com.android.internal.telephony.RIL.getCDMASubscription(android.os.Message)
public void com.android.internal.telephony.RIL.getCLIR(android.os.Message)
public void com.android.internal.telephony.RIL.getCdmaBroadcastConfig(android.os.Message)
public void com.android.internal.telephony.RIL.getCdmaSubscriptionSource(android.os.Message)
public void com.android.internal.telephony.RIL.getCellInfoList(android.os.Message,android.os.WorkSource)
public java.util.List com.android.internal.telephony.RIL.getClientRequestStats()
public void com.android.internal.telephony.RIL.getCurrentCalls(android.os.Message)
public void com.android.internal.telephony.RIL.getDataCallList(android.os.Message)
public void com.android.internal.telephony.RIL.getDataRegistrationState(android.os.Message)
public void com.android.internal.telephony.RIL.getDeviceIdentity(android.os.Message)
public void com.android.internal.telephony.RIL.getGsmBroadcastConfig(android.os.Message)
public com.android.internal.telephony.HalVersion com.android.internal.telephony.RIL.getHalVersion()
public void com.android.internal.telephony.RIL.getHardwareConfig(android.os.Message)
public void com.android.internal.telephony.RIL.getIMEI(android.os.Message)
public void com.android.internal.telephony.RIL.getIMEISV(android.os.Message)
public void com.android.internal.telephony.RIL.getIMSI(android.os.Message)
public void com.android.internal.telephony.RIL.getIMSIForApp(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.getIccCardStatus(android.os.Message)
public void com.android.internal.telephony.RIL.getIccSlotsStatus(android.os.Message)
public void com.android.internal.telephony.RIL.getImsRegistrationState(android.os.Message)
public void com.android.internal.telephony.RIL.getLastCallFailCause(android.os.Message)
public void com.android.internal.telephony.RIL.getLastDataCallFailCause(android.os.Message)
public void com.android.internal.telephony.RIL.getLastPdpFailCause(android.os.Message)
public void com.android.internal.telephony.RIL.getModemActivityInfo(android.os.Message,android.os.WorkSource)
public void com.android.internal.telephony.RIL.getModemStatus(android.os.Message)
public void com.android.internal.telephony.RIL.getMute(android.os.Message)
public void com.android.internal.telephony.RIL.getNetworkSelectionMode(android.os.Message)
public synchronized android.hardware.radio.deprecated.V1_0.IOemHook com.android.internal.telephony.RIL.getOemHookProxy(android.os.Message)
public void com.android.internal.telephony.RIL.getOperator(android.os.Message)
public void com.android.internal.telephony.RIL.getPDPContextList(android.os.Message)
public void com.android.internal.telephony.RIL.getPreferredNetworkType(android.os.Message)
public void com.android.internal.telephony.RIL.getPreferredVoicePrivacy(android.os.Message)
public com.android.internal.telephony.RadioBugDetector com.android.internal.telephony.RIL.getRadioBugDetector()
public void com.android.internal.telephony.RIL.getRadioCapability(android.os.Message)
public synchronized android.hardware.radio.V1_0.IRadio com.android.internal.telephony.RIL.getRadioProxy(android.os.Message)
public com.android.internal.telephony.RIL$RilHandler com.android.internal.telephony.RIL.getRilHandler()
public android.util.SparseArray com.android.internal.telephony.RIL.getRilRequestList()
public void com.android.internal.telephony.RIL.getSignalStrength(android.os.Message)
public void com.android.internal.telephony.RIL.getSmscAddress(android.os.Message)
public void com.android.internal.telephony.RIL.getVoiceRadioTechnology(android.os.Message)
public void com.android.internal.telephony.RIL.getVoiceRegistrationState(android.os.Message)
public android.os.PowerManager$WakeLock com.android.internal.telephony.RIL.getWakeLock(int)
public void com.android.internal.telephony.RIL.handleCallSetupRequestFromSim(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.hangupConnection(int,android.os.Message)
public void com.android.internal.telephony.RIL.hangupForegroundResumeBackground(android.os.Message)
public void com.android.internal.telephony.RIL.hangupWaitingOrBackground(android.os.Message)
public void com.android.internal.telephony.RIL.iccCloseLogicalChannel(int,android.os.Message)
public void com.android.internal.telephony.RIL.iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.iccOpenLogicalChannel(java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.RIL.iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.invokeOemRilRequestRaw(byte[],android.os.Message)
public void com.android.internal.telephony.RIL.invokeOemRilRequestStrings(java.lang.String[],android.os.Message)
com.android.internal.telephony.RadioCapability com.android.internal.telephony.RIL.makeStaticRadioCapability()
void com.android.internal.telephony.RIL.notifyRegistrantsCdmaInfoRec(com.android.internal.telephony.cdma.CdmaInformationRecords)
void com.android.internal.telephony.RIL.notifyRegistrantsRilConnectionChanged(int)
public void com.android.internal.telephony.RIL.nvReadItem(int,android.os.Message,android.os.WorkSource)
public void com.android.internal.telephony.RIL.nvResetConfig(int,android.os.Message)
public void com.android.internal.telephony.RIL.nvWriteCdmaPrl(byte[],android.os.Message)
public void com.android.internal.telephony.RIL.nvWriteItem(int,java.lang.String,android.os.Message,android.os.WorkSource)
void com.android.internal.telephony.RIL.processIndication(int)
void com.android.internal.telephony.RIL.processRequestAck(int)
public com.android.internal.telephony.RILRequest com.android.internal.telephony.RIL.processResponse(android.hardware.radio.V1_0.RadioResponseInfo)
public void com.android.internal.telephony.RIL.processResponseDone(com.android.internal.telephony.RILRequest,android.hardware.radio.V1_0.RadioResponseInfo,java.lang.Object)
public void com.android.internal.telephony.RIL.pullLceData(android.os.Message)
public void com.android.internal.telephony.RIL.queryAvailableBandMode(android.os.Message)
public void com.android.internal.telephony.RIL.queryCLIP(android.os.Message)
public void com.android.internal.telephony.RIL.queryCallForwardStatus(int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.queryCallWaiting(int,android.os.Message)
public void com.android.internal.telephony.RIL.queryCdmaRoamingPreference(android.os.Message)
public void com.android.internal.telephony.RIL.queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.RIL.queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.queryTTYMode(android.os.Message)
public void com.android.internal.telephony.RIL.rejectCall(android.os.Message)
public void com.android.internal.telephony.RIL.reportSmsMemoryStatus(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.reportStkServiceIsRunning(android.os.Message)
public void com.android.internal.telephony.RIL.requestIccSimAuthentication(int,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.requestShutdown(android.os.Message)
public void com.android.internal.telephony.RIL.resetRadio(android.os.Message)
void com.android.internal.telephony.RIL.riljLog(java.lang.String)
void com.android.internal.telephony.RIL.riljLoge(java.lang.String)
void com.android.internal.telephony.RIL.riljLoge(java.lang.String,java.lang.Exception)
void com.android.internal.telephony.RIL.riljLogv(java.lang.String)
public void com.android.internal.telephony.RIL.sendBurstDtmf(java.lang.String,int,int,android.os.Message)
public void com.android.internal.telephony.RIL.sendCDMAFeatureCode(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.sendCdmaSms(byte[],android.os.Message)
public void com.android.internal.telephony.RIL.sendDeviceState(int,boolean,android.os.Message)
public void com.android.internal.telephony.RIL.sendDtmf(char,android.os.Message)
public void com.android.internal.telephony.RIL.sendEnvelope(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.sendEnvelopeWithStatus(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.sendImsCdmaSms(byte[],int,int,android.os.Message)
public void com.android.internal.telephony.RIL.sendImsGsmSms(java.lang.String,java.lang.String,int,int,android.os.Message)
public void com.android.internal.telephony.RIL.sendSMS(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.sendSMSExpectMore(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.sendTerminalResponse(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.sendUSSD(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.separateConnection(int,android.os.Message)
public void com.android.internal.telephony.RIL.setAllowedCarriers(android.telephony.CarrierRestrictionRules,android.os.Message,android.os.WorkSource)
public void com.android.internal.telephony.RIL.setBandMode(int,android.os.Message)
public void com.android.internal.telephony.RIL.setCLIR(int,android.os.Message)
public void com.android.internal.telephony.RIL.setCallForward(int,int,int,java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.RIL.setCallWaiting(boolean,int,android.os.Message)
public void com.android.internal.telephony.RIL.setCarrierInfoForImsiEncryption(android.telephony.ImsiEncryptionInfo,android.os.Message)
public void com.android.internal.telephony.RIL.setCdmaBroadcastActivation(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)
public void com.android.internal.telephony.RIL.setCdmaRoamingPreference(int,android.os.Message)
public void com.android.internal.telephony.RIL.setCdmaSubscriptionSource(int,android.os.Message)
public void com.android.internal.telephony.RIL.setCellInfoListRate(int,android.os.Message,android.os.WorkSource)
public void com.android.internal.telephony.RIL.setDataAllowed(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setDataProfile(android.telephony.data.DataProfile[],boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.RIL.setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.setGsmBroadcastActivation(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)
public void com.android.internal.telephony.RIL.setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setLinkCapacityReportingCriteria(int,int,int,int[],int[],int,android.os.Message)
public void com.android.internal.telephony.RIL.setLocationUpdates(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setLogicalToPhysicalSlotMapping(int[],android.os.Message)
public void com.android.internal.telephony.RIL.setMute(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setNetworkSelectionModeAutomatic(android.os.Message)
public void com.android.internal.telephony.RIL.setNetworkSelectionModeManual(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.setOnNITZTime(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.RIL.setPhoneType(int)
public void com.android.internal.telephony.RIL.setPreferredNetworkType(int,android.os.Message)
public void com.android.internal.telephony.RIL.setPreferredVoicePrivacy(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setRadioCapability(com.android.internal.telephony.RadioCapability,android.os.Message)
public void com.android.internal.telephony.RIL.setRadioPower(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setSignalStrengthReportingCriteria(int,int,int[],int,android.os.Message)
public void com.android.internal.telephony.RIL.setSimCardPower(int,android.os.Message,android.os.WorkSource)
public void com.android.internal.telephony.RIL.setSmscAddress(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.setSuppServiceNotifications(boolean,android.os.Message)
public void com.android.internal.telephony.RIL.setTTYMode(int,android.os.Message)
public void com.android.internal.telephony.RIL.setUiccSubscription(int,int,int,int,android.os.Message)
public void com.android.internal.telephony.RIL.setUnsolResponseFilter(int,android.os.Message)
public void com.android.internal.telephony.RIL.setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.os.Message)
public void com.android.internal.telephony.RIL.startDtmf(char,android.os.Message)
public void com.android.internal.telephony.RIL.startLceService(int,boolean,android.os.Message)
public void com.android.internal.telephony.RIL.startNattKeepalive(int,android.net.KeepalivePacketData,int,android.os.Message)
public void com.android.internal.telephony.RIL.startNetworkScan(android.telephony.NetworkScanRequest,android.os.Message)
public void com.android.internal.telephony.RIL.stopDtmf(android.os.Message)
public void com.android.internal.telephony.RIL.stopLceService(android.os.Message)
public void com.android.internal.telephony.RIL.stopNattKeepalive(int,android.os.Message)
public void com.android.internal.telephony.RIL.stopNetworkScan(android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPin(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPin2(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.supplyNetworkDepersonalization(java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.switchWaitingOrHoldingAndActive(android.os.Message)
public void com.android.internal.telephony.RIL.testingEmergencyCall()
void com.android.internal.telephony.RIL.unsljLog(int)
void com.android.internal.telephony.RIL.unsljLogMore(int,java.lang.String)
void com.android.internal.telephony.RIL.unsljLogRet(int,java.lang.Object)
void com.android.internal.telephony.RIL.unsljLogvRet(int,java.lang.Object)
void com.android.internal.telephony.RIL.writeMetricsCallRing(char[])
void com.android.internal.telephony.RIL.writeMetricsModemRestartEvent(java.lang.String)
void com.android.internal.telephony.RIL.writeMetricsSrvcc(int)
public void com.android.internal.telephony.RIL.writeSmsToRuim(int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.RIL.writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)
Tracing public com.android.internal.telephony.RIL(android.content.Context,int,int)
Tracing public com.android.internal.telephony.RIL(android.content.Context,int,int,java.lang.Integer)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallStartFailed [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallStarted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallTerminated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallUssdMessageReceived [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallStartFailed(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallStarted(com.android.ims.ImsCall)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallTerminated(com.android.ims.ImsCall,android.telephony.ims.ImsReasonInfo)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5.onCallUssdMessageReceived(com.android.ims.ImsCall,int,java.lang.String)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$5(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$qSXnUMuIwAZ0TQjtyVEfznh1w8o[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$qSXnUMuIwAZ0TQjtyVEfznh1w8o.checkPermission [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$qSXnUMuIwAZ0TQjtyVEfznh1w8o.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final boolean com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$qSXnUMuIwAZ0TQjtyVEfznh1w8o.checkPermission(android.content.Context,int,java.lang.String,java.lang.String)
Tracing private com.android.internal.telephony.-$$Lambda$PhoneSubInfoController$qSXnUMuIwAZ0TQjtyVEfznh1w8o()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.LocaleTracker$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.LocaleTracker$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.LocaleTracker$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.LocaleTracker$1(com.android.internal.telephony.LocaleTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccPkcs15$Pkcs15Selector[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccPkcs15$Pkcs15Selector.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UiccPkcs15$Pkcs15Selector.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.uicc.UiccPkcs15$Pkcs15Selector.handleMessage(android.os.Message)
Tracing public com.android.internal.telephony.uicc.UiccPkcs15$Pkcs15Selector(com.android.internal.telephony.uicc.UiccPkcs15,android.os.Message)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SimActivationTracker[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.isValidActivationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.getDataActivationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.getVoiceActivationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.setDataActivationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.setVoiceActivationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SimActivationTracker.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static boolean com.android.internal.telephony.SimActivationTracker.access$000()
static void com.android.internal.telephony.SimActivationTracker.access$100(com.android.internal.telephony.SimActivationTracker,java.lang.String)
private static boolean com.android.internal.telephony.SimActivationTracker.isValidActivationState(int)
private void com.android.internal.telephony.SimActivationTracker.log(java.lang.String)
private void com.android.internal.telephony.SimActivationTracker.loge(java.lang.String)
private static java.lang.String com.android.internal.telephony.SimActivationTracker.toString(int)
public void com.android.internal.telephony.SimActivationTracker.dispose()
public void com.android.internal.telephony.SimActivationTracker.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public int com.android.internal.telephony.SimActivationTracker.getDataActivationState()
public int com.android.internal.telephony.SimActivationTracker.getVoiceActivationState()
public void com.android.internal.telephony.SimActivationTracker.setDataActivationState(int)
public void com.android.internal.telephony.SimActivationTracker.setVoiceActivationState(int)
Tracing public com.android.internal.telephony.SimActivationTracker(com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.MccTable$MccEntry[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable$MccEntry.compareTo [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.MccTable$MccEntry.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.MccTable$MccEntry.compareTo(com.android.internal.telephony.MccTable$MccEntry)
public int com.android.internal.telephony.MccTable$MccEntry.compareTo(java.lang.Object)
Tracing com.android.internal.telephony.MccTable$MccEntry(int,java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.IIccPhoneBook$Stub[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IIccPhoneBook$Stub.asInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IIccPhoneBook$Stub.getDefaultImpl [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IIccPhoneBook$Stub.setDefaultImpl [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IIccPhoneBook$Stub.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IIccPhoneBook$Stub.onTransact [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IIccPhoneBook$Stub.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.IIccPhoneBook com.android.internal.telephony.IIccPhoneBook$Stub.asInterface(android.os.IBinder)
public static com.android.internal.telephony.IIccPhoneBook com.android.internal.telephony.IIccPhoneBook$Stub.getDefaultImpl()
public static boolean com.android.internal.telephony.IIccPhoneBook$Stub.setDefaultImpl(com.android.internal.telephony.IIccPhoneBook)
public android.os.IBinder com.android.internal.telephony.IIccPhoneBook$Stub.asBinder()
public boolean com.android.internal.telephony.IIccPhoneBook$Stub.onTransact(int,android.os.Parcel,android.os.Parcel,int) throws android.os.RemoteException
Tracing public com.android.internal.telephony.IIccPhoneBook$Stub()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.euicc.EuiccCard[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.access$102 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.access$202 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.buildCarrierIdentifier [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.buildProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.buildUiccAccessRule [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.createNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getDeviceId [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getOrExtractSpecVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$authenticateServer$33 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$cancelSession$39 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$cancelSession$40 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$deleteProfile$14 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$deleteProfile$15 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$disableProfile$6 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$disableProfile$7 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getAllProfiles$2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getAllProfiles$3 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getDefaultSmdpAddress$18 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getDefaultSmdpAddress$19 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEid$10 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccChallenge$26 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccChallenge$27 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo1$28 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo1$29 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo2$30 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo2$31 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getProfile$4 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getProfile$5 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getRulesAuthTable$24 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getRulesAuthTable$25 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSmdsAddress$20 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSmdsAddress$21 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSpecVersion$0 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$listNotifications$41 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$listNotifications$42 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$loadBoundProfilePackage$36 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$loadBoundProfilePackage$37 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$loadBoundProfilePackage$38 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$prepareDownload$34 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$prepareDownload$35 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$removeNotificationFromList$47 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$removeNotificationFromList$48 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$resetMemory$16 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$resetMemory$17 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotification$45 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotification$46 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotificationList$43 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotificationList$44 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$sendApdu$50 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$sendApdu$51 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$sendApduWithSimResetErrorWorkaround$52 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setDefaultSmdpAddress$22 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setDefaultSmdpAddress$23 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setNickname$12 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setNickname$13 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$switchToProfile$8 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$switchToProfile$9 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.logd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.loge [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.logi [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.newRequestProvider [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.padTrailingFs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponseAndCheckSimpleError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.sendApdu [3 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.sendApduWithSimResetErrorWorkaround [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.stripTrailingFs [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.addDeviceCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.authenticateServer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.cancelSession [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.deleteProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.disableProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getAllProfiles [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getDefaultSmdpAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getEid [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getEuiccChallenge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getEuiccInfo1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getEuiccInfo2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getResources [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getRulesAuthTable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getSmdsAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.getSpecVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$authenticateServer$32$EuiccCard [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEid$11$EuiccCard [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSpecVersion$1$EuiccCard [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$newRequestProvider$49$EuiccCard [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.listNotifications [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.loadBoundProfilePackage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.loadEidAndNotifyRegistrants [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.prepareDownload [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.registerForEidReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.removeNotificationFromList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.resetMemory [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.retrieveNotification [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.retrieveNotificationList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.setDefaultSmdpAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.setNickname [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.switchToProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.unregisterForEidReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.update [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.updateCardId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.euicc.EuiccCard.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static android.os.RegistrantList com.android.internal.telephony.uicc.euicc.EuiccCard.access$000(com.android.internal.telephony.uicc.euicc.EuiccCard)
static java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.access$102(com.android.internal.telephony.uicc.euicc.EuiccCard,java.lang.String)
static java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.access$202(com.android.internal.telephony.uicc.euicc.EuiccCard,java.lang.String)
private static android.service.carrier.CarrierIdentifier com.android.internal.telephony.uicc.euicc.EuiccCard.buildCarrierIdentifier(com.android.internal.telephony.uicc.asn1.Asn1Node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException,com.android.internal.telephony.uicc.asn1.TagNotFoundException
private static void com.android.internal.telephony.uicc.euicc.EuiccCard.buildProfile(com.android.internal.telephony.uicc.asn1.Asn1Node,android.service.euicc.EuiccProfileInfo$Builder) throws com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
private static android.telephony.UiccAccessRule[] com.android.internal.telephony.uicc.euicc.EuiccCard.buildUiccAccessRule(java.util.List) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException,com.android.internal.telephony.uicc.asn1.TagNotFoundException
private static android.telephony.euicc.EuiccNotification com.android.internal.telephony.uicc.euicc.EuiccCard.createNotification(com.android.internal.telephony.uicc.asn1.Asn1Node) throws com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
public static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.getDeviceId(java.lang.String,com.android.internal.telephony.uicc.euicc.EuiccSpecVersion)
private com.android.internal.telephony.uicc.euicc.EuiccSpecVersion com.android.internal.telephony.uicc.euicc.EuiccCard.getOrExtractSpecVersion(byte[])
static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$authenticateServer$33(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$cancelSession$39(byte[],int,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$cancelSession$40(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$deleteProfile$14(java.lang.String,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.Void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$deleteProfile$15(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$disableProfile$6(java.lang.String,boolean,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.Void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$disableProfile$7(java.lang.String,byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getAllProfiles$2(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static android.service.euicc.EuiccProfileInfo[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getAllProfiles$3(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getDefaultSmdpAddress$18(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getDefaultSmdpAddress$19(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEid$10(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccChallenge$26(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccChallenge$27(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo1$28(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo1$29(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo2$30(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEuiccInfo2$31(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getProfile$4(java.lang.String,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static android.service.euicc.EuiccProfileInfo com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getProfile$5(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getRulesAuthTable$24(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static android.telephony.euicc.EuiccRulesAuthTable com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getRulesAuthTable$25(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSmdsAddress$20(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSmdsAddress$21(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSpecVersion$0(com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$listNotifications$41(int,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static android.telephony.euicc.EuiccNotification[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$listNotifications$42(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$loadBoundProfilePackage$36(byte[],com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$loadBoundProfilePackage$37(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static boolean com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$loadBoundProfilePackage$38(com.android.internal.telephony.uicc.IccIoResult)
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$prepareDownload$34(byte[],byte[],byte[],byte[],com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$prepareDownload$35(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$removeNotificationFromList$47(int,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.Void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$removeNotificationFromList$48(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$resetMemory$16(int,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.Void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$resetMemory$17(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotification$45(int,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static android.telephony.euicc.EuiccNotification com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotification$46(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotificationList$43(int,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static android.telephony.euicc.EuiccNotification[] com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$retrieveNotificationList$44(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$sendApdu$50(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,java.lang.Throwable)
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$sendApdu$51(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,java.lang.Throwable)
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$sendApduWithSimResetErrorWorkaround$52(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,java.lang.Throwable)
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setDefaultSmdpAddress$22(java.lang.String,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.Void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setDefaultSmdpAddress$23(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setNickname$12(java.lang.String,java.lang.String,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.Void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$setNickname$13(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$switchToProfile$8(java.lang.String,boolean,com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
static java.lang.Void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$switchToProfile$9(java.lang.String,byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
private static void com.android.internal.telephony.uicc.euicc.EuiccCard.logd(java.lang.String)
private static void com.android.internal.telephony.uicc.euicc.EuiccCard.loge(java.lang.String)
private static void com.android.internal.telephony.uicc.euicc.EuiccCard.loge(java.lang.String,java.lang.Throwable)
private static void com.android.internal.telephony.uicc.euicc.EuiccCard.logi(java.lang.String)
private com.android.internal.telephony.uicc.euicc.apdu.RequestProvider com.android.internal.telephony.uicc.euicc.EuiccCard.newRequestProvider(com.android.internal.telephony.uicc.euicc.EuiccCard$ApduRequestBuilder)
private static java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.padTrailingFs(java.lang.String)
private static com.android.internal.telephony.uicc.asn1.Asn1Node com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
private static com.android.internal.telephony.uicc.asn1.Asn1Node com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponseAndCheckSimpleError(byte[],int) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException,com.android.internal.telephony.uicc.asn1.TagNotFoundException
private static int com.android.internal.telephony.uicc.euicc.EuiccCard.parseSimpleResult(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
private void com.android.internal.telephony.uicc.euicc.EuiccCard.sendApdu(com.android.internal.telephony.uicc.euicc.apdu.RequestProvider,com.android.internal.telephony.uicc.euicc.EuiccCard$ApduResponseHandler,com.android.internal.telephony.uicc.euicc.EuiccCard$ApduExceptionHandler,com.android.internal.telephony.uicc.euicc.EuiccCard$ApduIntermediateResultHandler,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
private void com.android.internal.telephony.uicc.euicc.EuiccCard.sendApdu(com.android.internal.telephony.uicc.euicc.apdu.RequestProvider,com.android.internal.telephony.uicc.euicc.EuiccCard$ApduResponseHandler,com.android.internal.telephony.uicc.euicc.EuiccCard$ApduIntermediateResultHandler,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
private void com.android.internal.telephony.uicc.euicc.EuiccCard.sendApdu(com.android.internal.telephony.uicc.euicc.apdu.RequestProvider,com.android.internal.telephony.uicc.euicc.EuiccCard$ApduResponseHandler,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
private void com.android.internal.telephony.uicc.euicc.EuiccCard.sendApduWithSimResetErrorWorkaround(com.android.internal.telephony.uicc.euicc.apdu.RequestProvider,com.android.internal.telephony.uicc.euicc.EuiccCard$ApduResponseHandler,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
private static java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.stripTrailingFs(byte[])
public void com.android.internal.telephony.uicc.euicc.EuiccCard.addDeviceCapability(com.android.internal.telephony.uicc.asn1.Asn1Node$Builder,java.lang.String)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.authenticateServer(java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.cancelSession(byte[],int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.deleteProfile(java.lang.String,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.disableProfile(java.lang.String,boolean,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getAllProfiles(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getDefaultSmdpAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
protected byte[] com.android.internal.telephony.uicc.euicc.EuiccCard.getDeviceId()
public java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.getEid()
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getEid(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getEuiccChallenge(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getEuiccInfo2(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public final void com.android.internal.telephony.uicc.euicc.EuiccCard.getProfile(java.lang.String,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
protected android.content.res.Resources com.android.internal.telephony.uicc.euicc.EuiccCard.getResources()
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getRulesAuthTable(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getSmdsAddress(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.getSpecVersion(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$authenticateServer$32$EuiccCard(java.lang.String,byte[],byte[],byte[],byte[],com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
public java.lang.String com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getEid$11$EuiccCard(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
public com.android.internal.telephony.uicc.euicc.EuiccSpecVersion com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$getSpecVersion$1$EuiccCard(byte[]) throws com.android.internal.telephony.uicc.euicc.EuiccCardException,com.android.internal.telephony.uicc.asn1.TagNotFoundException,com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException
public void com.android.internal.telephony.uicc.euicc.EuiccCard.lambda$newRequestProvider$49$EuiccCard(com.android.internal.telephony.uicc.euicc.EuiccCard$ApduRequestBuilder,byte[],com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder) throws java.lang.Throwable
public void com.android.internal.telephony.uicc.euicc.EuiccCard.listNotifications(int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.loadBoundProfilePackage(byte[],com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
protected void com.android.internal.telephony.uicc.euicc.EuiccCard.loadEidAndNotifyRegistrants()
public void com.android.internal.telephony.uicc.euicc.EuiccCard.prepareDownload(byte[],byte[],byte[],byte[],com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.registerForEidReady(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.removeNotificationFromList(int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.resetMemory(int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.retrieveNotification(int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.retrieveNotificationList(int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.setDefaultSmdpAddress(java.lang.String,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.setNickname(java.lang.String,java.lang.String,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.switchToProfile(java.lang.String,boolean,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.unregisterForEidReady(android.os.Handler)
public void com.android.internal.telephony.uicc.euicc.EuiccCard.update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)
protected void com.android.internal.telephony.uicc.euicc.EuiccCard.updateCardId()
Tracing public com.android.internal.telephony.uicc.euicc.EuiccCard(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus,int,java.lang.Object)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.ImsServiceController$ImsFeatureStatusCallback$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$ImsFeatureStatusCallback$1.notifyImsFeatureStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.ImsServiceController$ImsFeatureStatusCallback$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.ims.ImsServiceController$ImsFeatureStatusCallback$1.notifyImsFeatureStatus(int) throws android.os.RemoteException
Tracing com.android.internal.telephony.ims.ImsServiceController$ImsFeatureStatusCallback$1(com.android.internal.telephony.ims.ImsServiceController$ImsFeatureStatusCallback)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.phone.ecc.nano.CodedInputByteBufferNano[39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.decodeZigZag32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.decodeZigZag64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.newInstance [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.recomputeBufferSizeAfterLimit [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.checkLastTagWas [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.getAbsolutePosition [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.getBuffer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.getBytesUntilLimit [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.getData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.getPosition [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.isAtEnd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.popLimit [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.pushLimit [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readBool [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readBytes [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readDouble [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readEnum [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readFixed32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readFixed64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readFloat [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readGroup [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readInt32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readInt64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readPrimitiveField [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawByte [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawBytes [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawLittleEndian32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawLittleEndian64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawVarint32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawVarint64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readSFixed32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readSFixed64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readSInt32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readSInt64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readTag [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readUInt32 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.readUInt64 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.resetSizeCounter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.rewindToPosition [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.setRecursionLimit [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.setSizeLimit [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.skipField [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.skipMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.skipRawBytes [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.CodedInputByteBufferNano.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static int com.android.phone.ecc.nano.CodedInputByteBufferNano.decodeZigZag32(int)
public static long com.android.phone.ecc.nano.CodedInputByteBufferNano.decodeZigZag64(long)
public static com.android.phone.ecc.nano.CodedInputByteBufferNano com.android.phone.ecc.nano.CodedInputByteBufferNano.newInstance(byte[])
public static com.android.phone.ecc.nano.CodedInputByteBufferNano com.android.phone.ecc.nano.CodedInputByteBufferNano.newInstance(byte[],int,int)
private void com.android.phone.ecc.nano.CodedInputByteBufferNano.recomputeBufferSizeAfterLimit()
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.checkLastTagWas(int) throws com.android.phone.ecc.nano.InvalidProtocolBufferNanoException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.getAbsolutePosition()
public byte[] com.android.phone.ecc.nano.CodedInputByteBufferNano.getBuffer()
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.getBytesUntilLimit()
public byte[] com.android.phone.ecc.nano.CodedInputByteBufferNano.getData(int,int)
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.getPosition()
public boolean com.android.phone.ecc.nano.CodedInputByteBufferNano.isAtEnd()
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.popLimit(int)
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.pushLimit(int) throws com.android.phone.ecc.nano.InvalidProtocolBufferNanoException
public boolean com.android.phone.ecc.nano.CodedInputByteBufferNano.readBool() throws java.io.IOException
public byte[] com.android.phone.ecc.nano.CodedInputByteBufferNano.readBytes() throws java.io.IOException
public double com.android.phone.ecc.nano.CodedInputByteBufferNano.readDouble() throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readEnum() throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readFixed32() throws java.io.IOException
public long com.android.phone.ecc.nano.CodedInputByteBufferNano.readFixed64() throws java.io.IOException
public float com.android.phone.ecc.nano.CodedInputByteBufferNano.readFloat() throws java.io.IOException
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.readGroup(com.android.phone.ecc.nano.MessageNano,int) throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readInt32() throws java.io.IOException
public long com.android.phone.ecc.nano.CodedInputByteBufferNano.readInt64() throws java.io.IOException
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.readMessage(com.android.phone.ecc.nano.MessageNano) throws java.io.IOException
java.lang.Object com.android.phone.ecc.nano.CodedInputByteBufferNano.readPrimitiveField(int) throws java.io.IOException
public byte com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawByte() throws java.io.IOException
public byte[] com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawBytes(int) throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawLittleEndian32() throws java.io.IOException
public long com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawLittleEndian64() throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawVarint32() throws java.io.IOException
public long com.android.phone.ecc.nano.CodedInputByteBufferNano.readRawVarint64() throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readSFixed32() throws java.io.IOException
public long com.android.phone.ecc.nano.CodedInputByteBufferNano.readSFixed64() throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readSInt32() throws java.io.IOException
public long com.android.phone.ecc.nano.CodedInputByteBufferNano.readSInt64() throws java.io.IOException
public java.lang.String com.android.phone.ecc.nano.CodedInputByteBufferNano.readString() throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readTag() throws java.io.IOException
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.readUInt32() throws java.io.IOException
public long com.android.phone.ecc.nano.CodedInputByteBufferNano.readUInt64() throws java.io.IOException
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.resetSizeCounter()
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.rewindToPosition(int)
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.setRecursionLimit(int)
public int com.android.phone.ecc.nano.CodedInputByteBufferNano.setSizeLimit(int)
public boolean com.android.phone.ecc.nano.CodedInputByteBufferNano.skipField(int) throws java.io.IOException
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.skipMessage() throws java.io.IOException
public void com.android.phone.ecc.nano.CodedInputByteBufferNano.skipRawBytes(int) throws java.io.IOException
Tracing private com.android.phone.ecc.nano.CodedInputByteBufferNano(byte[],int,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.UiccPhoneBookController[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.getDefaultSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.getIccPhoneBookInterfaceManager [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEfForSubscriber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsSizeForSubscriber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndexForSubscriber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfBySearch [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfBySearchForSubscriber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.UiccPhoneBookController.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private int com.android.internal.telephony.UiccPhoneBookController.getDefaultSubscription()
private com.android.internal.telephony.IccPhoneBookInterfaceManager com.android.internal.telephony.UiccPhoneBookController.getIccPhoneBookInterfaceManager(int)
public java.util.List com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEf(int) throws android.os.RemoteException
public java.util.List com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsInEfForSubscriber(int,int) throws android.os.RemoteException
public int[] com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsSize(int) throws android.os.RemoteException
public int[] com.android.internal.telephony.UiccPhoneBookController.getAdnRecordsSizeForSubscriber(int,int) throws android.os.RemoteException
public boolean com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String) throws android.os.RemoteException
public boolean com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String) throws android.os.RemoteException
public boolean com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws android.os.RemoteException
public boolean com.android.internal.telephony.UiccPhoneBookController.updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) throws android.os.RemoteException
Tracing public com.android.internal.telephony.UiccPhoneBookController(com.android.internal.telephony.Phone[])
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.sendPackageChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onHandleForceStop [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageAdded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageModified [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageRemoved [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageUpdateFinished [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.sendPackageChange(java.lang.String,boolean)
public boolean com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)
public void com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageAdded(java.lang.String,int)
public void com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageModified(java.lang.String)
public void com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageRemoved(java.lang.String,int)
public void com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor.onPackageUpdateFinished(java.lang.String,int)
Tracing private com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor(com.android.internal.telephony.euicc.EuiccConnector)
Tracing com.android.internal.telephony.euicc.EuiccConnector$EuiccPackageMonitor(com.android.internal.telephony.euicc.EuiccConnector,com.android.internal.telephony.euicc.EuiccConnector$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.processMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady.processMessage(android.os.Message)
Tracing private com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady(com.android.internal.telephony.cat.RilMessageDecoder)
Tracing com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.cat.RilMessageDecoder$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CellularNetworkService[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkService.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkService.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkService.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkService.onCreateNetworkServiceProvider [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkService.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.CellularNetworkService.access$200(com.android.internal.telephony.CellularNetworkService,java.lang.String)
private void com.android.internal.telephony.CellularNetworkService.log(java.lang.String)
private void com.android.internal.telephony.CellularNetworkService.loge(java.lang.String)
public android.telephony.NetworkService$NetworkServiceProvider com.android.internal.telephony.CellularNetworkService.onCreateNetworkServiceProvider(int)
Tracing public com.android.internal.telephony.CellularNetworkService()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.getDcFailBringUp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$000(com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll,java.lang.String)
static java.lang.String com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$100(com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll)
static com.android.internal.telephony.dataconnection.DcFailBringUp com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$200(com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll)
static com.android.internal.telephony.Phone com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.access$300(com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll)
private void com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.log(java.lang.String)
void com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.dispose()
public com.android.internal.telephony.dataconnection.DcFailBringUp com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll.getDcFailBringUp()
Tracing com.android.internal.telephony.dataconnection.DcTesterFailBringUpAll(com.android.internal.telephony.Phone,android.os.Handler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RestrictedState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.equals [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.isAnyCsRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.isCsEmergencyRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.isCsNormalRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.isCsRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.isPsRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.setCsEmergencyRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.setCsNormalRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.setPsRestricted [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.toString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RestrictedState.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public boolean com.android.internal.telephony.RestrictedState.equals(java.lang.Object)
public boolean com.android.internal.telephony.RestrictedState.isAnyCsRestricted()
public boolean com.android.internal.telephony.RestrictedState.isCsEmergencyRestricted()
public boolean com.android.internal.telephony.RestrictedState.isCsNormalRestricted()
public boolean com.android.internal.telephony.RestrictedState.isCsRestricted()
public boolean com.android.internal.telephony.RestrictedState.isPsRestricted()
public void com.android.internal.telephony.RestrictedState.setCsEmergencyRestricted(boolean)
public void com.android.internal.telephony.RestrictedState.setCsNormalRestricted(boolean)
public void com.android.internal.telephony.RestrictedState.setPsRestricted(boolean)
public java.lang.String com.android.internal.telephony.RestrictedState.toString()
Tracing public com.android.internal.telephony.RestrictedState()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.GsmCdmaConnection[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.acquireWakeLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.createWakeLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.doDisconnect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.equalsBaseDialString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.equalsHandlesNulls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.fetchDtmfToneDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.findNextPCharOrNonPOrNonWCharIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.findPOrWCharToAppend [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.formatDialString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getAudioQualityFromDC [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.isConnectingInOrOut [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.isPause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.isPhoneTypeGsm [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.isWait [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.isWild [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.maskDialString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.parentFromDCState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.processNextPostDialChar [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.processPostDialChar [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.releaseAllWakeLocks [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.releaseWakeLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.setPostDialState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.cancelPostDial [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.compareTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.deflect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.disconnectCauseFromCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.fakeHoldBeforeDial [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.finalize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getCall [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getDisconnectTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getGsmCdmaIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getHoldDurationMillis [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getNumberPresentation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getOrigConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getOrigDialString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getPreciseDisconnectCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getRemainingPostDialString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getUUSInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.getVendorDisconnectCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.hangup [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.isMultiparty [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.isOtaspCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.migrateFrom [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.onConnectedConnectionMigrated [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.onConnectedInOrOut [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.onDisconnect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.onHangupLocal [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.onLocalDisconnect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.onRemoteDisconnect [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.onStartedHolding [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.proceedAfterWaitChar [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.proceedAfterWildChar [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.separate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.update [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.updateParent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.GsmCdmaConnection.$init [3 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.GsmCdmaConnection.access$000(com.android.internal.telephony.GsmCdmaConnection)
static void com.android.internal.telephony.GsmCdmaConnection.access$100(com.android.internal.telephony.GsmCdmaConnection)
static int com.android.internal.telephony.GsmCdmaConnection.access$200(com.android.internal.telephony.GsmCdmaConnection)
private void com.android.internal.telephony.GsmCdmaConnection.acquireWakeLock()
private void com.android.internal.telephony.GsmCdmaConnection.createWakeLock(android.content.Context)
private void com.android.internal.telephony.GsmCdmaConnection.doDisconnect()
static boolean com.android.internal.telephony.GsmCdmaConnection.equalsBaseDialString(java.lang.String,java.lang.String)
static boolean com.android.internal.telephony.GsmCdmaConnection.equalsHandlesNulls(java.lang.Object,java.lang.Object)
private void com.android.internal.telephony.GsmCdmaConnection.fetchDtmfToneDelay(com.android.internal.telephony.GsmCdmaPhone)
private static int com.android.internal.telephony.GsmCdmaConnection.findNextPCharOrNonPOrNonWCharIndex(java.lang.String,int)
private static char com.android.internal.telephony.GsmCdmaConnection.findPOrWCharToAppend(java.lang.String,int,int)
public static java.lang.String com.android.internal.telephony.GsmCdmaConnection.formatDialString(java.lang.String)
private int com.android.internal.telephony.GsmCdmaConnection.getAudioQualityFromDC(int)
private boolean com.android.internal.telephony.GsmCdmaConnection.isConnectingInOrOut()
private static boolean com.android.internal.telephony.GsmCdmaConnection.isPause(char)
private boolean com.android.internal.telephony.GsmCdmaConnection.isPhoneTypeGsm()
private static boolean com.android.internal.telephony.GsmCdmaConnection.isWait(char)
private static boolean com.android.internal.telephony.GsmCdmaConnection.isWild(char)
private void com.android.internal.telephony.GsmCdmaConnection.log(java.lang.String)
private java.lang.String com.android.internal.telephony.GsmCdmaConnection.maskDialString(java.lang.String)
private com.android.internal.telephony.GsmCdmaCall com.android.internal.telephony.GsmCdmaConnection.parentFromDCState(com.android.internal.telephony.DriverCall$State)
private void com.android.internal.telephony.GsmCdmaConnection.processNextPostDialChar()
private boolean com.android.internal.telephony.GsmCdmaConnection.processPostDialChar(char)
private void com.android.internal.telephony.GsmCdmaConnection.releaseAllWakeLocks()
private void com.android.internal.telephony.GsmCdmaConnection.releaseWakeLock()
private void com.android.internal.telephony.GsmCdmaConnection.setPostDialState(com.android.internal.telephony.Connection$PostDialState)
public void com.android.internal.telephony.GsmCdmaConnection.cancelPostDial()
boolean com.android.internal.telephony.GsmCdmaConnection.compareTo(com.android.internal.telephony.DriverCall)
public void com.android.internal.telephony.GsmCdmaConnection.deflect(java.lang.String) throws com.android.internal.telephony.CallStateException
int com.android.internal.telephony.GsmCdmaConnection.disconnectCauseFromCode(int)
public void com.android.internal.telephony.GsmCdmaConnection.dispose()
void com.android.internal.telephony.GsmCdmaConnection.fakeHoldBeforeDial()
protected void com.android.internal.telephony.GsmCdmaConnection.finalize()
public com.android.internal.telephony.Call com.android.internal.telephony.GsmCdmaConnection.getCall()
public com.android.internal.telephony.GsmCdmaCall com.android.internal.telephony.GsmCdmaConnection.getCall()
public long com.android.internal.telephony.GsmCdmaConnection.getDisconnectTime()
int com.android.internal.telephony.GsmCdmaConnection.getGsmCdmaIndex() throws com.android.internal.telephony.CallStateException
public long com.android.internal.telephony.GsmCdmaConnection.getHoldDurationMillis()
public int com.android.internal.telephony.GsmCdmaConnection.getNumberPresentation()
public com.android.internal.telephony.Connection com.android.internal.telephony.GsmCdmaConnection.getOrigConnection()
public java.lang.String com.android.internal.telephony.GsmCdmaConnection.getOrigDialString()
public int com.android.internal.telephony.GsmCdmaConnection.getPreciseDisconnectCause()
public java.lang.String com.android.internal.telephony.GsmCdmaConnection.getRemainingPostDialString()
public com.android.internal.telephony.Call$State com.android.internal.telephony.GsmCdmaConnection.getState()
public com.android.internal.telephony.UUSInfo com.android.internal.telephony.GsmCdmaConnection.getUUSInfo()
public java.lang.String com.android.internal.telephony.GsmCdmaConnection.getVendorDisconnectCause()
public void com.android.internal.telephony.GsmCdmaConnection.hangup() throws com.android.internal.telephony.CallStateException
public boolean com.android.internal.telephony.GsmCdmaConnection.isMultiparty()
public boolean com.android.internal.telephony.GsmCdmaConnection.isOtaspCall()
public void com.android.internal.telephony.GsmCdmaConnection.migrateFrom(com.android.internal.telephony.Connection)
void com.android.internal.telephony.GsmCdmaConnection.onConnectedConnectionMigrated()
void com.android.internal.telephony.GsmCdmaConnection.onConnectedInOrOut()
public boolean com.android.internal.telephony.GsmCdmaConnection.onDisconnect(int)
void com.android.internal.telephony.GsmCdmaConnection.onHangupLocal()
void com.android.internal.telephony.GsmCdmaConnection.onLocalDisconnect()
void com.android.internal.telephony.GsmCdmaConnection.onRemoteDisconnect(int,java.lang.String)
void com.android.internal.telephony.GsmCdmaConnection.onStartedHolding()
public void com.android.internal.telephony.GsmCdmaConnection.proceedAfterWaitChar()
public void com.android.internal.telephony.GsmCdmaConnection.proceedAfterWildChar(java.lang.String)
public void com.android.internal.telephony.GsmCdmaConnection.separate() throws com.android.internal.telephony.CallStateException
public boolean com.android.internal.telephony.GsmCdmaConnection.update(com.android.internal.telephony.DriverCall)
public void com.android.internal.telephony.GsmCdmaConnection.updateParent(com.android.internal.telephony.GsmCdmaCall,com.android.internal.telephony.GsmCdmaCall)
Tracing public com.android.internal.telephony.GsmCdmaConnection(android.content.Context,com.android.internal.telephony.cdma.CdmaCallWaitingNotification,com.android.internal.telephony.GsmCdmaCallTracker,com.android.internal.telephony.GsmCdmaCall)
Tracing public com.android.internal.telephony.GsmCdmaConnection(com.android.internal.telephony.GsmCdmaPhone,com.android.internal.telephony.DriverCall,com.android.internal.telephony.GsmCdmaCallTracker,int)
Tracing public com.android.internal.telephony.GsmCdmaConnection(com.android.internal.telephony.GsmCdmaPhone,java.lang.String,com.android.internal.telephony.GsmCdmaCallTracker,com.android.internal.telephony.GsmCdmaCall,boolean)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$SharedPreferenceProxy[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$SharedPreferenceProxy.getDefaultSharedPreferences [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public abstract android.content.SharedPreferences com.android.internal.telephony.imsphone.ImsPhoneCallTracker$SharedPreferenceProxy.getDefaultSharedPreferences(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType.valueOf [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType.values [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType.isHardReason [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType.valueOf(java.lang.String)
public static com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType[] com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType.values()
boolean com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType.isHardReason()
Tracing private com.android.internal.telephony.dataconnection.DataConnectionReasons$DataDisallowedReasonType(java.lang.String,int,boolean)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.gsm.GsmInboundSmsHandler[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.addSmsTypeZeroToMetrics [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.addVoicemailSmsToMetrics [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.makeInboundSmsHandler [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.resultToCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.updateMessageWaitingIndicator [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.acknowledgeLastIncomingSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.dispatchMessageRadioSpecific [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.is3gpp2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.onQuitting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmInboundSmsHandler.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.gsm.GsmInboundSmsHandler.addSmsTypeZeroToMetrics()
private void com.android.internal.telephony.gsm.GsmInboundSmsHandler.addVoicemailSmsToMetrics()
public static com.android.internal.telephony.gsm.GsmInboundSmsHandler com.android.internal.telephony.gsm.GsmInboundSmsHandler.makeInboundSmsHandler(android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.Phone)
private static int com.android.internal.telephony.gsm.GsmInboundSmsHandler.resultToCause(int)
private void com.android.internal.telephony.gsm.GsmInboundSmsHandler.updateMessageWaitingIndicator(int)
protected void com.android.internal.telephony.gsm.GsmInboundSmsHandler.acknowledgeLastIncomingSms(boolean,int,android.os.Message)
protected int com.android.internal.telephony.gsm.GsmInboundSmsHandler.dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)
protected boolean com.android.internal.telephony.gsm.GsmInboundSmsHandler.is3gpp2()
protected void com.android.internal.telephony.gsm.GsmInboundSmsHandler.onQuitting()
Tracing private com.android.internal.telephony.gsm.GsmInboundSmsHandler(android.content.Context,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DcTracker$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$1.compare [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.dataconnection.DcTracker$1.compare(com.android.internal.telephony.dataconnection.ApnContext,com.android.internal.telephony.dataconnection.ApnContext)
public int com.android.internal.telephony.dataconnection.DcTracker$1.compare(java.lang.Object,java.lang.Object)
Tracing com.android.internal.telephony.dataconnection.DcTracker$1(com.android.internal.telephony.dataconnection.DcTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onRegistered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onRegistering [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onSubscriberAssociatedUriChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onUnregistered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onRegistered(int)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onRegistering(int)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onSubscriberAssociatedUriChanged(android.net.Uri[])
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6.onUnregistered(android.telephony.ims.ImsReasonInfo)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$6(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.WakeLockStateMachine$IdleState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WakeLockStateMachine$IdleState.enter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WakeLockStateMachine$IdleState.exit [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WakeLockStateMachine$IdleState.processMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.WakeLockStateMachine$IdleState.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.WakeLockStateMachine$IdleState.enter()
public void com.android.internal.telephony.WakeLockStateMachine$IdleState.exit()
public boolean com.android.internal.telephony.WakeLockStateMachine$IdleState.processMessage(android.os.Message)
Tracing com.android.internal.telephony.WakeLockStateMachine$IdleState(com.android.internal.telephony.WakeLockStateMachine)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cat.CatException[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cat.CatException.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
Tracing public com.android.internal.telephony.cat.CatException()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SubscriptionInfoUpdater[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.access$002 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.broadcastSimApplicationStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.broadcastSimCardStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.broadcastSimStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.findSubscriptionInfoForIccid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.getCardIdFromPhoneId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.getDefaultCarrierServicePackageName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.getSimStateFromLockedReason [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.handleSimAbsent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.handleSimError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.handleSimLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.handleSimLocked [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.handleSimNotReady [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.initializeCarrierApps [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.internalIccStateToMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.isAllIccIdQueryDone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.isCarrierServicePackage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.isNewSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.isSubInfoInitialized [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.lambda$handleMessage$0 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.lambda$handleMessage$1 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.lambda$handleMessage$2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateSubscriptionInfoByIccId$3 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.logd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.setSubInfoInitialized [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.simStateString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateCarrierServices [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateEmbeddedSubscriptionsCache [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionCarrierId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionInfoByIccId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateEmbeddedSubscriptions$4$SubscriptionInfoUpdater [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateEmbeddedSubscriptions$5$SubscriptionInfoUpdater [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateSubscriptionByCarrierConfigAndNotifyComplete$6$SubscriptionInfoUpdater [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.requestEmbeddedSubscriptionInfoListRefresh [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateEmbeddedSubscriptions [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateInternalIccState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionByCarrierConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionByCarrierConfigAndNotifyComplete [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SubscriptionInfoUpdater.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
static int com.android.internal.telephony.SubscriptionInfoUpdater.access$000(com.android.internal.telephony.SubscriptionInfoUpdater)
static int com.android.internal.telephony.SubscriptionInfoUpdater.access$002(com.android.internal.telephony.SubscriptionInfoUpdater,int)
static android.content.Context com.android.internal.telephony.SubscriptionInfoUpdater.access$100()
static android.content.pm.IPackageManager com.android.internal.telephony.SubscriptionInfoUpdater.access$200(com.android.internal.telephony.SubscriptionInfoUpdater)
private void com.android.internal.telephony.SubscriptionInfoUpdater.broadcastSimApplicationStateChanged(int,int)
private void com.android.internal.telephony.SubscriptionInfoUpdater.broadcastSimCardStateChanged(int,int)
private void com.android.internal.telephony.SubscriptionInfoUpdater.broadcastSimStateChanged(int,java.lang.String,java.lang.String)
private static int com.android.internal.telephony.SubscriptionInfoUpdater.findSubscriptionInfoForIccid(java.util.List,java.lang.String)
private int com.android.internal.telephony.SubscriptionInfoUpdater.getCardIdFromPhoneId(int)
private java.lang.String com.android.internal.telephony.SubscriptionInfoUpdater.getDefaultCarrierServicePackageName()
private static int com.android.internal.telephony.SubscriptionInfoUpdater.getSimStateFromLockedReason(java.lang.String)
private void com.android.internal.telephony.SubscriptionInfoUpdater.handleSimAbsent(int,int)
private void com.android.internal.telephony.SubscriptionInfoUpdater.handleSimError(int)
private void com.android.internal.telephony.SubscriptionInfoUpdater.handleSimLoaded(int)
private void com.android.internal.telephony.SubscriptionInfoUpdater.handleSimLocked(int,java.lang.String)
private void com.android.internal.telephony.SubscriptionInfoUpdater.handleSimNotReady(int)
private void com.android.internal.telephony.SubscriptionInfoUpdater.initializeCarrierApps()
private int com.android.internal.telephony.SubscriptionInfoUpdater.internalIccStateToMessage(java.lang.String)
private boolean com.android.internal.telephony.SubscriptionInfoUpdater.isAllIccIdQueryDone()
private boolean com.android.internal.telephony.SubscriptionInfoUpdater.isCarrierServicePackage(int,java.lang.String)
private boolean com.android.internal.telephony.SubscriptionInfoUpdater.isNewSim(java.lang.String,java.lang.String,java.lang.String[])
public static boolean com.android.internal.telephony.SubscriptionInfoUpdater.isSubInfoInitialized()
static void com.android.internal.telephony.SubscriptionInfoUpdater.lambda$handleMessage$0(boolean)
static void com.android.internal.telephony.SubscriptionInfoUpdater.lambda$handleMessage$1(boolean)
static void com.android.internal.telephony.SubscriptionInfoUpdater.lambda$handleMessage$2(java.lang.Runnable,boolean)
static void com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateSubscriptionInfoByIccId$3(boolean)
private static void com.android.internal.telephony.SubscriptionInfoUpdater.logd(java.lang.String)
private static void com.android.internal.telephony.SubscriptionInfoUpdater.loge(java.lang.String)
private static void com.android.internal.telephony.SubscriptionInfoUpdater.setSubInfoInitialized()
private static java.lang.String com.android.internal.telephony.SubscriptionInfoUpdater.simStateString(int)
private void com.android.internal.telephony.SubscriptionInfoUpdater.updateCarrierServices(int,java.lang.String)
private boolean com.android.internal.telephony.SubscriptionInfoUpdater.updateEmbeddedSubscriptionsCache(android.service.euicc.GetEuiccProfileInfoListResult)
private void com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionCarrierId(int,java.lang.String)
private synchronized void com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionInfoByIccId(int,boolean)
public void com.android.internal.telephony.SubscriptionInfoUpdater.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.SubscriptionInfoUpdater.handleMessage(android.os.Message)
public void com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateEmbeddedSubscriptions$4$SubscriptionInfoUpdater(java.util.List,com.android.internal.telephony.SubscriptionInfoUpdater$UpdateEmbeddedSubsCallback)
public void com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateEmbeddedSubscriptions$5$SubscriptionInfoUpdater(java.util.List,com.android.internal.telephony.SubscriptionInfoUpdater$UpdateEmbeddedSubsCallback)
public void com.android.internal.telephony.SubscriptionInfoUpdater.lambda$updateSubscriptionByCarrierConfigAndNotifyComplete$6$SubscriptionInfoUpdater(int,java.lang.String,android.os.PersistableBundle,android.os.Message)
void com.android.internal.telephony.SubscriptionInfoUpdater.requestEmbeddedSubscriptionInfoListRefresh(int,java.lang.Runnable)
public void com.android.internal.telephony.SubscriptionInfoUpdater.updateEmbeddedSubscriptions(java.util.List,com.android.internal.telephony.SubscriptionInfoUpdater$UpdateEmbeddedSubsCallback)
public void com.android.internal.telephony.SubscriptionInfoUpdater.updateInternalIccState(java.lang.String,java.lang.String,int,boolean)
public void com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionByCarrierConfig(int,java.lang.String,android.os.PersistableBundle)
public void com.android.internal.telephony.SubscriptionInfoUpdater.updateSubscriptionByCarrierConfigAndNotifyComplete(int,java.lang.String,android.os.PersistableBundle,android.os.Message)
Tracing public com.android.internal.telephony.SubscriptionInfoUpdater(android.os.Looper,android.content.Context,com.android.internal.telephony.Phone[],com.android.internal.telephony.CommandsInterface[])
Tracing public com.android.internal.telephony.SubscriptionInfoUpdater(android.os.Looper,android.content.Context,com.android.internal.telephony.Phone[],com.android.internal.telephony.CommandsInterface[],android.content.pm.IPackageManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.PhoneConfigurationManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.access$402 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getDefaultCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.init [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.log [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.notifyCapabilityChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.setMultiSimProperties [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.updatePhoneStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.addToPhoneStatusCache [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.enablePhone [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getCurrentPhoneCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getNumberOfModemsWithSimultaneousDataConnections [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getPhoneCount [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getPhoneStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getPhoneStatusFromCache [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getPhoneStatusFromModem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.getStaticPhoneCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.isRebootRequiredForModemConfigChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.switchMultiSimConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneConfigurationManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.PhoneConfigurationManager.access$100(java.lang.String)
static void com.android.internal.telephony.PhoneConfigurationManager.access$200(com.android.internal.telephony.PhoneConfigurationManager,com.android.internal.telephony.Phone)
static void com.android.internal.telephony.PhoneConfigurationManager.access$300(com.android.internal.telephony.PhoneConfigurationManager,int)
static android.telephony.PhoneCapability com.android.internal.telephony.PhoneConfigurationManager.access$402(com.android.internal.telephony.PhoneConfigurationManager,android.telephony.PhoneCapability)
static void com.android.internal.telephony.PhoneConfigurationManager.access$500(com.android.internal.telephony.PhoneConfigurationManager)
private android.telephony.PhoneCapability com.android.internal.telephony.PhoneConfigurationManager.getDefaultCapability()
public static com.android.internal.telephony.PhoneConfigurationManager com.android.internal.telephony.PhoneConfigurationManager.getInstance()
public static com.android.internal.telephony.PhoneConfigurationManager com.android.internal.telephony.PhoneConfigurationManager.init(android.content.Context)
private static void com.android.internal.telephony.PhoneConfigurationManager.log(java.lang.String)
private void com.android.internal.telephony.PhoneConfigurationManager.notifyCapabilityChanged()
private void com.android.internal.telephony.PhoneConfigurationManager.setMultiSimProperties(int)
private void com.android.internal.telephony.PhoneConfigurationManager.updatePhoneStatus(com.android.internal.telephony.Phone)
public void com.android.internal.telephony.PhoneConfigurationManager.addToPhoneStatusCache(int,boolean)
public void com.android.internal.telephony.PhoneConfigurationManager.enablePhone(com.android.internal.telephony.Phone,boolean,android.os.Message)
public android.telephony.PhoneCapability com.android.internal.telephony.PhoneConfigurationManager.getCurrentPhoneCapability()
public int com.android.internal.telephony.PhoneConfigurationManager.getNumberOfModemsWithSimultaneousDataConnections()
public int com.android.internal.telephony.PhoneConfigurationManager.getPhoneCount()
public boolean com.android.internal.telephony.PhoneConfigurationManager.getPhoneStatus(com.android.internal.telephony.Phone)
public boolean com.android.internal.telephony.PhoneConfigurationManager.getPhoneStatusFromCache(int) throws java.util.NoSuchElementException
public void com.android.internal.telephony.PhoneConfigurationManager.getPhoneStatusFromModem(com.android.internal.telephony.Phone,android.os.Message)
public synchronized android.telephony.PhoneCapability com.android.internal.telephony.PhoneConfigurationManager.getStaticPhoneCapability()
public boolean com.android.internal.telephony.PhoneConfigurationManager.isRebootRequiredForModemConfigChange()
public void com.android.internal.telephony.PhoneConfigurationManager.switchMultiSimConfig(int)
Tracing private com.android.internal.telephony.PhoneConfigurationManager(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.IccCardStatus$CardState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardStatus$CardState.valueOf [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardStatus$CardState.values [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardStatus$CardState.isCardPresent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.IccCardStatus$CardState.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.uicc.IccCardStatus$CardState com.android.internal.telephony.uicc.IccCardStatus$CardState.valueOf(java.lang.String)
public static com.android.internal.telephony.uicc.IccCardStatus$CardState[] com.android.internal.telephony.uicc.IccCardStatus$CardState.values()
public boolean com.android.internal.telephony.uicc.IccCardStatus$CardState.isCardPresent()
Tracing private com.android.internal.telephony.uicc.IccCardStatus$CardState(java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.DeviceStateMonitor$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$1.onAvailable [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$1.onLost [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.DeviceStateMonitor$1.onAvailable(android.net.Network)
public void com.android.internal.telephony.DeviceStateMonitor$1.onLost(android.net.Network)
Tracing com.android.internal.telephony.DeviceStateMonitor$1(com.android.internal.telephony.DeviceStateMonitor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UsimFileHandler[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimFileHandler.getEFPath [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimFileHandler.logd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimFileHandler.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.UsimFileHandler.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
protected java.lang.String com.android.internal.telephony.uicc.UsimFileHandler.getEFPath(int)
protected void com.android.internal.telephony.uicc.UsimFileHandler.logd(java.lang.String)
protected void com.android.internal.telephony.uicc.UsimFileHandler.loge(java.lang.String)
Tracing public com.android.internal.telephony.uicc.UsimFileHandler(com.android.internal.telephony.uicc.UiccCardApplication,java.lang.String,com.android.internal.telephony.CommandsInterface)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCommandInterface[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acceptCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acknowledgeIncomingGsmSmsWithPdu [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acknowledgeLastIncomingCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acknowledgeLastIncomingGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.cancelPendingUssd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeBarringPassword [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPin2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPinForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.conference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.deactivateDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.deleteSmsOnRuim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.deleteSmsOnSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.dial [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.exitEmergencyCallbackMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.explicitCallTransfer [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getAvailableNetworks [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getBasebandVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCDMASubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCdmaBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCurrentCalls [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getDataCallList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getDataRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getDeviceIdentity [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getGsmBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getHardwareConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMEI [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMEISV [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMSI [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMSIForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIccCardStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIccSlotsStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getImsRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getLastCallFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getLastDataCallFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getLastPdpFailCause [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getNetworkSelectionMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getOperator [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getPDPContextList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getPreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getPreferredVoicePrivacy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getSignalStrength [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getSmscAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getVoiceRadioTechnology [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getVoiceRegistrationState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.handleCallSetupRequestFromSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.hangupConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.hangupForegroundResumeBackground [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.hangupWaitingOrBackground [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccCloseLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccIO [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccIOForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccOpenLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccTransmitApduBasicChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccTransmitApduLogicalChannel [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.invokeOemRilRequestRaw [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.invokeOemRilRequestStrings [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.nvResetConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.nvWriteCdmaPrl [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.pullLceData [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryAvailableBandMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCLIP [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCallForwardStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCdmaRoamingPreference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryFacilityLockForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.rejectCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.reportSmsMemoryStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.reportStkServiceIsRunning [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.requestIccSimAuthentication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.requestShutdown [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.resetRadio [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendBurstDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendCDMAFeatureCode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendDeviceState [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendEnvelope [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendEnvelopeWithStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendImsCdmaSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendImsGsmSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendSMS [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendSMSExpectMore [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendTerminalResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendUSSD [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.separateConnection [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setBandMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCLIR [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCallForward [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCallWaiting [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCarrierInfoForImsiEncryption [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaBroadcastActivation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaRoamingPreference [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaSubscriptionSource [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setDataProfile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setFacilityLock [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setFacilityLockForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setGsmBroadcastActivation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setGsmBroadcastConfig [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setInitialAttachApn [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setLinkCapacityReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setLocationUpdates [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setLogicalToPhysicalSlotMapping [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setMute [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setNetworkSelectionModeAutomatic [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setNetworkSelectionModeManual [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setOnNITZTime [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setPhoneType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setPreferredNetworkType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setPreferredVoicePrivacy [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setRadioCapability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setRadioPower [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setSignalStrengthReportingCriteria [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setSmscAddress [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setSuppServiceNotifications [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setTTYMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setUnsolResponseFilter [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setupDataCall [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startNattKeepalive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startNetworkScan [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopDtmf [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopLceService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopNattKeepalive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopNetworkScan [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPin [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPin2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPin2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPinForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPuk [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPuk2 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPuk2ForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPukForApp [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyNetworkDepersonalization [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.switchWaitingOrHoldingAndActive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.writeSmsToRuim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.writeSmsToSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acceptCall(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acknowledgeIncomingGsmSmsWithPdu(boolean,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.cancelPendingUssd(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeBarringPassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPin(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPin2(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPin2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.changeIccPinForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.conference(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.deactivateDataCall(int,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.deleteSmsOnRuim(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.deleteSmsOnSim(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.dial(java.lang.String,boolean,android.telephony.emergency.EmergencyNumber,boolean,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.dial(java.lang.String,boolean,android.telephony.emergency.EmergencyNumber,boolean,int,com.android.internal.telephony.UUSInfo,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.exitEmergencyCallbackMode(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.explicitCallTransfer(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getAvailableNetworks(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getBasebandVersion(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCDMASubscription(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCLIR(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCdmaBroadcastConfig(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCdmaSubscriptionSource(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getCurrentCalls(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getDataCallList(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getDataRegistrationState(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getDeviceIdentity(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getGsmBroadcastConfig(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getHardwareConfig(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMEI(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMEISV(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMSI(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIMSIForApp(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIccCardStatus(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getIccSlotsStatus(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getImsRegistrationState(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getLastCallFailCause(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getLastDataCallFailCause(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getLastPdpFailCause(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getMute(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getNetworkSelectionMode(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getOperator(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getPDPContextList(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getPreferredNetworkType(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getPreferredVoicePrivacy(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getRadioCapability(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getSignalStrength(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getSmscAddress(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getVoiceRadioTechnology(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.getVoiceRegistrationState(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.handleCallSetupRequestFromSim(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.hangupConnection(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.hangupForegroundResumeBackground(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.hangupWaitingOrBackground(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccCloseLogicalChannel(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccIOForApp(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccOpenLogicalChannel(java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.invokeOemRilRequestRaw(byte[],android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.invokeOemRilRequestStrings(java.lang.String[],android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.nvResetConfig(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.nvWriteCdmaPrl(byte[],android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.pullLceData(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryAvailableBandMode(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCLIP(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCallForwardStatus(int,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCallWaiting(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryCdmaRoamingPreference(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryFacilityLockForApp(java.lang.String,java.lang.String,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.queryTTYMode(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.rejectCall(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.reportSmsMemoryStatus(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.reportStkServiceIsRunning(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.requestIccSimAuthentication(int,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.requestShutdown(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.resetRadio(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendBurstDtmf(java.lang.String,int,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendCDMAFeatureCode(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendCdmaSms(byte[],android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendDeviceState(int,boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendDtmf(char,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendEnvelope(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendEnvelopeWithStatus(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendImsCdmaSms(byte[],int,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendImsGsmSms(java.lang.String,java.lang.String,int,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendSMS(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendSMSExpectMore(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendTerminalResponse(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.sendUSSD(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.separateConnection(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setBandMode(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCLIR(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCallForward(int,int,int,java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCallWaiting(boolean,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCarrierInfoForImsiEncryption(android.telephony.ImsiEncryptionInfo,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaBroadcastActivation(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaRoamingPreference(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setCdmaSubscriptionSource(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setDataProfile(android.telephony.data.DataProfile[],boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setFacilityLock(java.lang.String,boolean,java.lang.String,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setFacilityLockForApp(java.lang.String,boolean,java.lang.String,int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setGsmBroadcastActivation(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setInitialAttachApn(android.telephony.data.DataProfile,boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setLinkCapacityReportingCriteria(int,int,int,int[],int[],int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setLocationUpdates(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setLogicalToPhysicalSlotMapping(int[],android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setMute(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setNetworkSelectionModeAutomatic(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setNetworkSelectionModeManual(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setOnNITZTime(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setPhoneType(int)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setPreferredNetworkType(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setPreferredVoicePrivacy(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setRadioCapability(com.android.internal.telephony.RadioCapability,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setRadioPower(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setSignalStrengthReportingCriteria(int,int,int[],int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setSmscAddress(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setSuppServiceNotifications(boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setTTYMode(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setUnsolResponseFilter(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startDtmf(char,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startLceService(int,boolean,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startNattKeepalive(int,android.net.KeepalivePacketData,int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.startNetworkScan(android.telephony.NetworkScanRequest,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopDtmf(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopLceService(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopNattKeepalive(int,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.stopNetworkScan(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPin(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPin2(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPinForApp(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPuk(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPuk2(java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyIccPukForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.supplyNetworkDepersonalization(java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.switchWaitingOrHoldingAndActive(android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.writeSmsToRuim(int,java.lang.String,android.os.Message)
public void com.android.internal.telephony.imsphone.ImsPhoneCommandInterface.writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCommandInterface(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CellularNetworkValidator[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.access$200 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.createNetworkRequest [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.getInstance [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.logd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.make [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.reportValidationResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.getSubIdInValidation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.isValidating [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.isValidationFeatureSupported [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.stopValidation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.validate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CellularNetworkValidator.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static void com.android.internal.telephony.CellularNetworkValidator.access$000(java.lang.String)
static int com.android.internal.telephony.CellularNetworkValidator.access$100(com.android.internal.telephony.CellularNetworkValidator)
static void com.android.internal.telephony.CellularNetworkValidator.access$200(com.android.internal.telephony.CellularNetworkValidator,boolean,int)
private android.net.NetworkRequest com.android.internal.telephony.CellularNetworkValidator.createNetworkRequest()
public static com.android.internal.telephony.CellularNetworkValidator com.android.internal.telephony.CellularNetworkValidator.getInstance()
private static void com.android.internal.telephony.CellularNetworkValidator.logd(java.lang.String)
public static com.android.internal.telephony.CellularNetworkValidator com.android.internal.telephony.CellularNetworkValidator.make(android.content.Context)
private synchronized void com.android.internal.telephony.CellularNetworkValidator.reportValidationResult(boolean,int)
public synchronized int com.android.internal.telephony.CellularNetworkValidator.getSubIdInValidation()
public synchronized boolean com.android.internal.telephony.CellularNetworkValidator.isValidating()
public boolean com.android.internal.telephony.CellularNetworkValidator.isValidationFeatureSupported()
public synchronized void com.android.internal.telephony.CellularNetworkValidator.stopValidation()
public synchronized void com.android.internal.telephony.CellularNetworkValidator.validate(int,int,boolean,com.android.internal.telephony.CellularNetworkValidator$ValidationCallback)
Tracing private com.android.internal.telephony.CellularNetworkValidator(android.content.Context)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.gsm.GsmSMSDispatcher[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.handleStatusReport [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.onUpdateIccAvailability [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.calculateLength [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.getFormat [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.getSubmitPdu [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.getUiccCardApplication [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.sendSms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.shouldBlockSmsForEcbm [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.gsm.GsmSMSDispatcher.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.gsm.GsmSMSDispatcher.handleStatusReport(android.os.AsyncResult)
private void com.android.internal.telephony.gsm.GsmSMSDispatcher.onUpdateIccAvailability()
protected com.android.internal.telephony.GsmAlphabet$TextEncodingDetails com.android.internal.telephony.gsm.GsmSMSDispatcher.calculateLength(java.lang.CharSequence,boolean)
public void com.android.internal.telephony.gsm.GsmSMSDispatcher.dispose()
protected java.lang.String com.android.internal.telephony.gsm.GsmSMSDispatcher.getFormat()
protected com.android.internal.telephony.SmsMessageBase$SubmitPduBase com.android.internal.telephony.gsm.GsmSMSDispatcher.getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)
protected com.android.internal.telephony.SmsMessageBase$SubmitPduBase com.android.internal.telephony.gsm.GsmSMSDispatcher.getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader,int,int)
protected com.android.internal.telephony.uicc.UiccCardApplication com.android.internal.telephony.gsm.GsmSMSDispatcher.getUiccCardApplication()
public void com.android.internal.telephony.gsm.GsmSMSDispatcher.handleMessage(android.os.Message)
protected void com.android.internal.telephony.gsm.GsmSMSDispatcher.sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)
protected boolean com.android.internal.telephony.gsm.GsmSMSDispatcher.shouldBlockSmsForEcbm()
Tracing public com.android.internal.telephony.gsm.GsmSMSDispatcher(com.android.internal.telephony.Phone,com.android.internal.telephony.SmsDispatchersController,com.android.internal.telephony.gsm.GsmInboundSmsHandler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.nano.TelephonyProto$TelephonySettings[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.nano.TelephonyProto$TelephonySettings[] com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.emptyArray()
public static com.android.internal.telephony.nano.TelephonyProto$TelephonySettings com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.parseFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.internal.telephony.nano.TelephonyProto$TelephonySettings com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.parseFrom(byte[]) throws com.android.internal.telephony.protobuf.nano.InvalidProtocolBufferNanoException
public com.android.internal.telephony.nano.TelephonyProto$TelephonySettings com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.clear()
protected int com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.computeSerializedSize()
public com.android.internal.telephony.nano.TelephonyProto$TelephonySettings com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.internal.telephony.protobuf.nano.MessageNano com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.mergeFrom(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.internal.telephony.nano.TelephonyProto$TelephonySettings.writeTo(com.android.internal.telephony.protobuf.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.internal.telephony.nano.TelephonyProto$TelephonySettings()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.-$$Lambda$ImsResolver$VfY5To_kbbTJevLzywTg-_S1JhA[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.-$$Lambda$ImsResolver$VfY5To_kbbTJevLzywTg-_S1JhA.test [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ims.-$$Lambda$ImsResolver$VfY5To_kbbTJevLzywTg-_S1JhA.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public final boolean com.android.internal.telephony.ims.-$$Lambda$ImsResolver$VfY5To_kbbTJevLzywTg-_S1JhA.test(java.lang.Object)
Tracing public com.android.internal.telephony.ims.-$$Lambda$ImsResolver$VfY5To_kbbTJevLzywTg-_S1JhA(int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.PhoneInternalInterface$DataActivityState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneInternalInterface$DataActivityState.valueOf [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneInternalInterface$DataActivityState.values [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.PhoneInternalInterface$DataActivityState.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.PhoneInternalInterface$DataActivityState com.android.internal.telephony.PhoneInternalInterface$DataActivityState.valueOf(java.lang.String)
public static com.android.internal.telephony.PhoneInternalInterface$DataActivityState[] com.android.internal.telephony.PhoneInternalInterface$DataActivityState.values()
Tracing private com.android.internal.telephony.PhoneInternalInterface$DataActivityState(java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState.valueOf [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState.values [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState.valueOf(java.lang.String)
public static com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState[] com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState.values()
Tracing private com.android.internal.telephony.uicc.SIMRecords$GetSpnFsmState(java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DataServiceManager$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataServiceManager$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DataServiceManager$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.dataconnection.DataServiceManager$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.dataconnection.DataServiceManager$1(com.android.internal.telephony.dataconnection.DataServiceManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.Call$SrvccState[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.Call$SrvccState.valueOf [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.Call$SrvccState.values [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.Call$SrvccState.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.internal.telephony.Call$SrvccState com.android.internal.telephony.Call$SrvccState.valueOf(java.lang.String)
public static com.android.internal.telephony.Call$SrvccState[] com.android.internal.telephony.Call$SrvccState.values()
Tracing private com.android.internal.telephony.Call$SrvccState(java.lang.String,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DcTracker$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$2.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.dataconnection.DcTracker$2.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.dataconnection.DcTracker$2(com.android.internal.telephony.dataconnection.DcTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SmsStorageMonitor$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsStorageMonitor$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.SmsStorageMonitor$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.SmsStorageMonitor$1(com.android.internal.telephony.SmsStorageMonitor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$7[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$7.onCapabilitiesStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$7.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$7.onCapabilitiesStatusChanged(android.telephony.ims.feature.MmTelFeature$MmTelCapabilities)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$7(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierResolver$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierResolver$1.onChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierResolver$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.CarrierResolver$1.onChange(boolean,android.net.Uri)
Tracing com.android.internal.telephony.CarrierResolver$1(com.android.internal.telephony.CarrierResolver,android.os.Handler)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.AccessNetworksManager$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.AccessNetworksManager$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.AccessNetworksManager$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.dataconnection.AccessNetworksManager$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.dataconnection.AccessNetworksManager$1(com.android.internal.telephony.dataconnection.AccessNetworksManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => android.hardware.radio.deprecated.V1_0.IOemHookResponse[39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.asInterface [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.castFrom [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.getService [4 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.asBinder [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.debug [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.getDebugInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.getHashChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.interfaceChain [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.interfaceDescriptor [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.linkToDeath [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.notifySyspropsChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.ping [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.sendRequestRawResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.sendRequestStringsResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.setHALInstrumentation [1 overload(s)][39;49;00m
[31;01mTracing Method : android.hardware.radio.deprecated.V1_0.IOemHookResponse.unlinkToDeath [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static android.hardware.radio.deprecated.V1_0.IOemHookResponse android.hardware.radio.deprecated.V1_0.IOemHookResponse.asInterface(android.os.IHwBinder)
public static android.hardware.radio.deprecated.V1_0.IOemHookResponse android.hardware.radio.deprecated.V1_0.IOemHookResponse.castFrom(android.os.IHwInterface)
public static android.hardware.radio.deprecated.V1_0.IOemHookResponse android.hardware.radio.deprecated.V1_0.IOemHookResponse.getService() throws android.os.RemoteException
public static android.hardware.radio.deprecated.V1_0.IOemHookResponse android.hardware.radio.deprecated.V1_0.IOemHookResponse.getService(java.lang.String) throws android.os.RemoteException
public static android.hardware.radio.deprecated.V1_0.IOemHookResponse android.hardware.radio.deprecated.V1_0.IOemHookResponse.getService(java.lang.String,boolean) throws android.os.RemoteException
public static android.hardware.radio.deprecated.V1_0.IOemHookResponse android.hardware.radio.deprecated.V1_0.IOemHookResponse.getService(boolean) throws android.os.RemoteException
public abstract android.os.IHwBinder android.hardware.radio.deprecated.V1_0.IOemHookResponse.asBinder()
public abstract void android.hardware.radio.deprecated.V1_0.IOemHookResponse.debug(android.os.NativeHandle,java.util.ArrayList) throws android.os.RemoteException
public abstract android.internal.hidl.base.V1_0.DebugInfo android.hardware.radio.deprecated.V1_0.IOemHookResponse.getDebugInfo() throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.deprecated.V1_0.IOemHookResponse.getHashChain() throws android.os.RemoteException
public abstract java.util.ArrayList android.hardware.radio.deprecated.V1_0.IOemHookResponse.interfaceChain() throws android.os.RemoteException
public abstract java.lang.String android.hardware.radio.deprecated.V1_0.IOemHookResponse.interfaceDescriptor() throws android.os.RemoteException
public abstract boolean android.hardware.radio.deprecated.V1_0.IOemHookResponse.linkToDeath(android.os.IHwBinder$DeathRecipient,long) throws android.os.RemoteException
public abstract void android.hardware.radio.deprecated.V1_0.IOemHookResponse.notifySyspropsChanged() throws android.os.RemoteException
public abstract void android.hardware.radio.deprecated.V1_0.IOemHookResponse.ping() throws android.os.RemoteException
public abstract void android.hardware.radio.deprecated.V1_0.IOemHookResponse.sendRequestRawResponse(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList) throws android.os.RemoteException
public abstract void android.hardware.radio.deprecated.V1_0.IOemHookResponse.sendRequestStringsResponse(android.hardware.radio.V1_0.RadioResponseInfo,java.util.ArrayList) throws android.os.RemoteException
public abstract void android.hardware.radio.deprecated.V1_0.IOemHookResponse.setHALInstrumentation() throws android.os.RemoteException
public abstract boolean android.hardware.radio.deprecated.V1_0.IOemHookResponse.unlinkToDeath(android.os.IHwBinder$DeathRecipient) throws android.os.RemoteException
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.RatRatcheter$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RatRatcheter$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.RatRatcheter$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.RatRatcheter$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.RatRatcheter$1(com.android.internal.telephony.RatRatcheter)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.DeviceStateMonitor$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$2.onDisplayAdded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$2.onDisplayChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$2.onDisplayRemoved [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.DeviceStateMonitor$2.onDisplayAdded(int)
public void com.android.internal.telephony.DeviceStateMonitor$2.onDisplayChanged(int)
public void com.android.internal.telephony.DeviceStateMonitor$2.onDisplayRemoved(int)
Tracing com.android.internal.telephony.DeviceStateMonitor$2(com.android.internal.telephony.DeviceStateMonitor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ImsSmsDispatcher$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ImsSmsDispatcher$1.onRegistered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ImsSmsDispatcher$1.onRegistering [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ImsSmsDispatcher$1.onUnregistered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ImsSmsDispatcher$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.ImsSmsDispatcher$1.onRegistered(int)
public void com.android.internal.telephony.ImsSmsDispatcher$1.onRegistering(int)
public void com.android.internal.telephony.ImsSmsDispatcher$1.onUnregistered(android.telephony.ims.ImsReasonInfo)
Tracing com.android.internal.telephony.ImsSmsDispatcher$1(com.android.internal.telephony.ImsSmsDispatcher)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded.getEfName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded.onRecordLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
public java.lang.String com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded.getEfName()
public void com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded.onRecordLoaded(android.os.AsyncResult)
Tracing private com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded(com.android.internal.telephony.uicc.SIMRecords)
Tracing com.android.internal.telephony.uicc.SIMRecords$EfUsimLiLoaded(com.android.internal.telephony.uicc.SIMRecords,com.android.internal.telephony.uicc.SIMRecords$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.phone.ecc.nano.ProtobufEccData$AllInfo[39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.ProtobufEccData$AllInfo.emptyArray [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.ProtobufEccData$AllInfo.parseFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.ProtobufEccData$AllInfo.clear [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.ProtobufEccData$AllInfo.computeSerializedSize [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.ProtobufEccData$AllInfo.mergeFrom [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.ProtobufEccData$AllInfo.writeTo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.phone.ecc.nano.ProtobufEccData$AllInfo.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static com.android.phone.ecc.nano.ProtobufEccData$AllInfo[] com.android.phone.ecc.nano.ProtobufEccData$AllInfo.emptyArray()
public static com.android.phone.ecc.nano.ProtobufEccData$AllInfo com.android.phone.ecc.nano.ProtobufEccData$AllInfo.parseFrom(com.android.phone.ecc.nano.CodedInputByteBufferNano) throws java.io.IOException
public static com.android.phone.ecc.nano.ProtobufEccData$AllInfo com.android.phone.ecc.nano.ProtobufEccData$AllInfo.parseFrom(byte[]) throws com.android.phone.ecc.nano.InvalidProtocolBufferNanoException
public com.android.phone.ecc.nano.ProtobufEccData$AllInfo com.android.phone.ecc.nano.ProtobufEccData$AllInfo.clear()
protected int com.android.phone.ecc.nano.ProtobufEccData$AllInfo.computeSerializedSize()
public com.android.phone.ecc.nano.MessageNano com.android.phone.ecc.nano.ProtobufEccData$AllInfo.mergeFrom(com.android.phone.ecc.nano.CodedInputByteBufferNano) throws java.io.IOException
public com.android.phone.ecc.nano.ProtobufEccData$AllInfo com.android.phone.ecc.nano.ProtobufEccData$AllInfo.mergeFrom(com.android.phone.ecc.nano.CodedInputByteBufferNano) throws java.io.IOException
public void com.android.phone.ecc.nano.ProtobufEccData$AllInfo.writeTo(com.android.phone.ecc.nano.CodedOutputByteBufferNano) throws java.io.IOException
Tracing public com.android.phone.ecc.nano.ProtobufEccData$AllInfo()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.euicc.EuiccController[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.awaitResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.blockingGetEidFromEuiccService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.blockingGetEuiccInfoFromEuiccService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.blockingGetOtaStatusFromEuiccService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.callerCanReadPhoneStatePrivileged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.callerCanWriteEmbeddedSubscriptions [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.canManageActiveSubscriptionOnTargetSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.canManageSubscriptionOnTargetSim [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.checkCarrierPrivilegeInMetadata [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.get [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.getSubscriptionForSubscriptionId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.init [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.supportMultiActiveSlots [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.addResolutionIntent [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.blockingGetEuiccProfileInfoList [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.continueOperation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.deleteSubscription [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.deleteSubscriptionPrivileged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.downloadSubscription [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.downloadSubscriptionPrivileged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.downloadSubscriptionPrivilegedCheckMetadata [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.dump [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.eraseSubscriptions [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.getDefaultDownloadableSubscriptionList [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.getDownloadableSubscriptionMetadata [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.getEid [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.getEuiccInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.getOtaStatus [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.lambda$refreshSubscriptionsAndSendResult$0$EuiccController [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.refreshSubscriptionsAndSendResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.retainSubscriptionsForFactoryReset [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.sendOtaStatusChangedBroadcast [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.sendResult [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.startOtaUpdatingIfNecessary [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.switchToSubscription [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.switchToSubscriptionPrivileged [2 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.updateSubscriptionNickname [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.euicc.EuiccController.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
static boolean com.android.internal.telephony.euicc.EuiccController.access$000(com.android.internal.telephony.euicc.EuiccController,android.telephony.euicc.DownloadableSubscription,java.lang.String)
static android.content.Context com.android.internal.telephony.euicc.EuiccController.access$100(com.android.internal.telephony.euicc.EuiccController)
private static java.lang.Object com.android.internal.telephony.euicc.EuiccController.awaitResult(java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicReference)
private java.lang.String com.android.internal.telephony.euicc.EuiccController.blockingGetEidFromEuiccService(int)
private android.telephony.euicc.EuiccInfo com.android.internal.telephony.euicc.EuiccController.blockingGetEuiccInfoFromEuiccService(int)
private int com.android.internal.telephony.euicc.EuiccController.blockingGetOtaStatusFromEuiccService(int)
private boolean com.android.internal.telephony.euicc.EuiccController.callerCanReadPhoneStatePrivileged()
private boolean com.android.internal.telephony.euicc.EuiccController.callerCanWriteEmbeddedSubscriptions()
private boolean com.android.internal.telephony.euicc.EuiccController.canManageActiveSubscriptionOnTargetSim(int,java.lang.String)
private boolean com.android.internal.telephony.euicc.EuiccController.canManageSubscriptionOnTargetSim(int,java.lang.String)
private boolean com.android.internal.telephony.euicc.EuiccController.checkCarrierPrivilegeInMetadata(android.telephony.euicc.DownloadableSubscription,java.lang.String)
public static com.android.internal.telephony.euicc.EuiccController com.android.internal.telephony.euicc.EuiccController.get()
private android.telephony.SubscriptionInfo com.android.internal.telephony.euicc.EuiccController.getSubscriptionForSubscriptionId(int)
public static com.android.internal.telephony.euicc.EuiccController com.android.internal.telephony.euicc.EuiccController.init(android.content.Context)
private boolean com.android.internal.telephony.euicc.EuiccController.supportMultiActiveSlots()
public void com.android.internal.telephony.euicc.EuiccController.addResolutionIntent(android.content.Intent,java.lang.String,java.lang.String,int,boolean,com.android.internal.telephony.euicc.EuiccOperation,int)
public android.service.euicc.GetEuiccProfileInfoListResult com.android.internal.telephony.euicc.EuiccController.blockingGetEuiccProfileInfoList(int)
public void com.android.internal.telephony.euicc.EuiccController.continueOperation(int,android.content.Intent,android.os.Bundle)
public void com.android.internal.telephony.euicc.EuiccController.deleteSubscription(int,int,java.lang.String,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.deleteSubscriptionPrivileged(int,java.lang.String,android.app.PendingIntent)
public void com.android.internal.telephony.euicc.EuiccController.downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.downloadSubscription(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,boolean,android.os.Bundle,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.downloadSubscriptionPrivileged(int,long,android.telephony.euicc.DownloadableSubscription,boolean,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.downloadSubscriptionPrivilegedCheckMetadata(int,long,android.telephony.euicc.DownloadableSubscription,boolean,boolean,java.lang.String,android.os.Bundle,android.app.PendingIntent)
public void com.android.internal.telephony.euicc.EuiccController.dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
public void com.android.internal.telephony.euicc.EuiccController.eraseSubscriptions(int,android.app.PendingIntent)
public void com.android.internal.telephony.euicc.EuiccController.getDefaultDownloadableSubscriptionList(int,java.lang.String,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.getDefaultDownloadableSubscriptionList(int,boolean,java.lang.String,android.app.PendingIntent)
public void com.android.internal.telephony.euicc.EuiccController.getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,java.lang.String,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.getDownloadableSubscriptionMetadata(int,android.telephony.euicc.DownloadableSubscription,boolean,java.lang.String,android.app.PendingIntent)
public java.lang.String com.android.internal.telephony.euicc.EuiccController.getEid(int,java.lang.String)
public android.telephony.euicc.EuiccInfo com.android.internal.telephony.euicc.EuiccController.getEuiccInfo(int)
public int com.android.internal.telephony.euicc.EuiccController.getOtaStatus(int)
public void com.android.internal.telephony.euicc.EuiccController.lambda$refreshSubscriptionsAndSendResult$0$EuiccController(android.app.PendingIntent,int,android.content.Intent)
public void com.android.internal.telephony.euicc.EuiccController.refreshSubscriptionsAndSendResult(android.app.PendingIntent,int,android.content.Intent)
public void com.android.internal.telephony.euicc.EuiccController.retainSubscriptionsForFactoryReset(int,android.app.PendingIntent)
public void com.android.internal.telephony.euicc.EuiccController.sendOtaStatusChangedBroadcast()
public void com.android.internal.telephony.euicc.EuiccController.sendResult(android.app.PendingIntent,int,android.content.Intent)
public void com.android.internal.telephony.euicc.EuiccController.startOtaUpdatingIfNecessary()
public void com.android.internal.telephony.euicc.EuiccController.startOtaUpdatingIfNecessary(int)
public void com.android.internal.telephony.euicc.EuiccController.switchToSubscription(int,int,java.lang.String,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.switchToSubscription(int,int,boolean,java.lang.String,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.switchToSubscriptionPrivileged(int,long,int,java.lang.String,boolean,java.lang.String,android.app.PendingIntent)
void com.android.internal.telephony.euicc.EuiccController.switchToSubscriptionPrivileged(int,long,int,boolean,java.lang.String,android.app.PendingIntent)
public void com.android.internal.telephony.euicc.EuiccController.updateSubscriptionNickname(int,int,java.lang.String,java.lang.String,android.app.PendingIntent)
Tracing private com.android.internal.telephony.euicc.EuiccController(android.content.Context)
Tracing public com.android.internal.telephony.euicc.EuiccController(android.content.Context,com.android.internal.telephony.euicc.EuiccConnector)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.ApnSettingUtils[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnSettingUtils.iccidMatches [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnSettingUtils.imsiMatches [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnSettingUtils.isMetered [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnSettingUtils.isMeteredApnType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnSettingUtils.mvnoMatches [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.ApnSettingUtils.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private static boolean com.android.internal.telephony.dataconnection.ApnSettingUtils.iccidMatches(java.lang.String,java.lang.String)
private static boolean com.android.internal.telephony.dataconnection.ApnSettingUtils.imsiMatches(java.lang.String,java.lang.String)
public static boolean com.android.internal.telephony.dataconnection.ApnSettingUtils.isMetered(android.telephony.data.ApnSetting,com.android.internal.telephony.Phone)
public static boolean com.android.internal.telephony.dataconnection.ApnSettingUtils.isMeteredApnType(int,com.android.internal.telephony.Phone)
public static boolean com.android.internal.telephony.dataconnection.ApnSettingUtils.mvnoMatches(com.android.internal.telephony.uicc.IccRecords,int,java.lang.String)
Tracing public com.android.internal.telephony.dataconnection.ApnSettingUtils()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SmsDispatchersController$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsDispatchersController$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsDispatchersController$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.SmsDispatchersController$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.SmsDispatchersController$1(com.android.internal.telephony.SmsDispatchersController)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cdma.EriManager$EriFile[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager$EriFile.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
Tracing com.android.internal.telephony.cdma.EriManager$EriFile(com.android.internal.telephony.cdma.EriManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.DefaultPhoneNotifier$1[39;49;00m
[32;01m	Spec: => 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.SmsUsageMonitor$SettingsObserver[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsUsageMonitor$SettingsObserver.onChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.SmsUsageMonitor$SettingsObserver.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.SmsUsageMonitor$SettingsObserver.onChange(boolean)
Tracing com.android.internal.telephony.SmsUsageMonitor$SettingsObserver(android.os.Handler,android.content.Context,java.util.concurrent.atomic.AtomicBoolean)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.uicc.UiccController$1[39;49;00m
[32;01m	Spec: => 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.dataconnection.DcTracker$3[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$3.run [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.dataconnection.DcTracker$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.dataconnection.DcTracker$3.run()
Tracing com.android.internal.telephony.dataconnection.DcTracker$3(com.android.internal.telephony.dataconnection.DcTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.getDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.getNotificationBuilder [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.getTypeId [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.sendMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.setDelay [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.getDelay()
public android.app.Notification$Builder com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.getNotificationBuilder()
public int com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.getTypeId()
public boolean com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.sendMessage()
public void com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification.setDelay(android.os.PersistableBundle)
Tracing com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification(com.android.internal.telephony.CarrierServiceStateTracker,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onGetFeatureResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onGetVideoQuality [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onSetFeatureResponse [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onSetVideoQuality [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onGetFeatureResponse(int,int,int,int)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onGetVideoQuality(int,int)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onSetFeatureResponse(int,int,int,int)
public void com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8.onSetVideoQuality(int)
Tracing com.android.internal.telephony.imsphone.ImsPhoneCallTracker$8(com.android.internal.telephony.imsphone.ImsPhoneCallTracker)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierResolver$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierResolver$2.onCallStateChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierResolver$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.CarrierResolver$2.onCallStateChanged(int,java.lang.String)
Tracing com.android.internal.telephony.CarrierResolver$2(com.android.internal.telephony.CarrierResolver)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.evaluateBinding [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onHandleForceStop [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageAdded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageModified [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageRemoved [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageUpdateFinished [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.$init [2 overload(s)][39;49;00m
[32;01m	Spec: => 
private void com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.evaluateBinding(java.lang.String,boolean)
public boolean com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)
public void com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageAdded(java.lang.String,int)
public void com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageModified(java.lang.String)
public void com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageRemoved(java.lang.String,int)
public void com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor.onPackageUpdateFinished(java.lang.String,int)
Tracing private com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor(com.android.internal.telephony.CarrierServiceBindHelper)
Tracing com.android.internal.telephony.CarrierServiceBindHelper$CarrierServicePackageMonitor(com.android.internal.telephony.CarrierServiceBindHelper,com.android.internal.telephony.CarrierServiceBindHelper$1)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager.addRange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager.finishUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager.startUpdate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
protected void com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager.addRange(int,int,boolean)
protected boolean com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager.finishUpdate()
protected void com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager.startUpdate()
Tracing com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager(com.android.internal.telephony.IccSmsInterfaceManager)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ImsSmsDispatcher$2[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ImsSmsDispatcher$2.onCapabilitiesStatusChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.ImsSmsDispatcher$2.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.ImsSmsDispatcher$2.onCapabilitiesStatusChanged(android.telephony.ims.feature.MmTelFeature$MmTelCapabilities)
Tracing com.android.internal.telephony.ImsSmsDispatcher$2(com.android.internal.telephony.ImsSmsDispatcher)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.DeviceStateMonitor$3[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$3.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.DeviceStateMonitor$3.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.DeviceStateMonitor$3.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.DeviceStateMonitor$3(com.android.internal.telephony.DeviceStateMonitor)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CarrierKeyDownloadManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.carrierUsesKeys [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.cleanupDownloadPreferences [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.cleanupRenewalAlarms [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.convertToString [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.downloadKey [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.getKeyInformation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.getMccMncSetFromPref [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.handleAlarmOrConfigChange [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.onDownloadComplete [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.onPostDownloadProcessing [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.areCarrierKeysAbsentOrExpiring [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.getExpirationDate [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.getSimOperator [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.isKeyEnabled [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.isValidDownload [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.parseJsonAndPersistKey [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.resetRenewalAlarm [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.savePublicKey [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CarrierKeyDownloadManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static com.android.internal.telephony.Phone com.android.internal.telephony.CarrierKeyDownloadManager.access$000(com.android.internal.telephony.CarrierKeyDownloadManager)
private boolean com.android.internal.telephony.CarrierKeyDownloadManager.carrierUsesKeys()
private void com.android.internal.telephony.CarrierKeyDownloadManager.cleanupDownloadPreferences(long)
private void com.android.internal.telephony.CarrierKeyDownloadManager.cleanupRenewalAlarms()
private static java.lang.String com.android.internal.telephony.CarrierKeyDownloadManager.convertToString(java.io.InputStream)
private boolean com.android.internal.telephony.CarrierKeyDownloadManager.downloadKey()
public static android.util.Pair com.android.internal.telephony.CarrierKeyDownloadManager.getKeyInformation(byte[]) throws java.lang.Exception
private java.lang.String com.android.internal.telephony.CarrierKeyDownloadManager.getMccMncSetFromPref()
private void com.android.internal.telephony.CarrierKeyDownloadManager.handleAlarmOrConfigChange()
private void com.android.internal.telephony.CarrierKeyDownloadManager.onDownloadComplete(long,java.lang.String)
private void com.android.internal.telephony.CarrierKeyDownloadManager.onPostDownloadProcessing(long)
public boolean com.android.internal.telephony.CarrierKeyDownloadManager.areCarrierKeysAbsentOrExpiring()
public long com.android.internal.telephony.CarrierKeyDownloadManager.getExpirationDate()
public java.lang.String com.android.internal.telephony.CarrierKeyDownloadManager.getSimOperator()
public void com.android.internal.telephony.CarrierKeyDownloadManager.handleMessage(android.os.Message)
public boolean com.android.internal.telephony.CarrierKeyDownloadManager.isKeyEnabled(int)
public boolean com.android.internal.telephony.CarrierKeyDownloadManager.isValidDownload(java.lang.String)
public void com.android.internal.telephony.CarrierKeyDownloadManager.parseJsonAndPersistKey(java.lang.String,java.lang.String)
public void com.android.internal.telephony.CarrierKeyDownloadManager.resetRenewalAlarm()
public void com.android.internal.telephony.CarrierKeyDownloadManager.savePublicKey(java.security.PublicKey,int,java.lang.String,long,java.lang.String,java.lang.String)
Tracing public com.android.internal.telephony.CarrierKeyDownloadManager(com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.protobuf.nano.WireFormatNano[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.WireFormatNano.getRepeatedFieldArrayLength [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.WireFormatNano.getTagFieldNumber [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.WireFormatNano.getTagWireType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.WireFormatNano.makeTag [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.WireFormatNano.parseUnknownField [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.protobuf.nano.WireFormatNano.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public static final int com.android.internal.telephony.protobuf.nano.WireFormatNano.getRepeatedFieldArrayLength(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano,int) throws java.io.IOException
public static int com.android.internal.telephony.protobuf.nano.WireFormatNano.getTagFieldNumber(int)
static int com.android.internal.telephony.protobuf.nano.WireFormatNano.getTagWireType(int)
static int com.android.internal.telephony.protobuf.nano.WireFormatNano.makeTag(int,int)
public static boolean com.android.internal.telephony.protobuf.nano.WireFormatNano.parseUnknownField(com.android.internal.telephony.protobuf.nano.CodedInputByteBufferNano,int) throws java.io.IOException
Tracing private com.android.internal.telephony.protobuf.nano.WireFormatNano()
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.cdma.EriManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getEriDisplayInformation [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getEriInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.loadEriFileFromFileSystem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.loadEriFileFromModem [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.loadEriFileFromXml [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.dispose [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getCdmaEriIconIndex [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getCdmaEriIconMode [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getCdmaEriText [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getEriFileType [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getEriFileVersion [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.getEriNumberOfEntries [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.isEriFileLoaded [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.loadEriFile [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.cdma.EriManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
private com.android.internal.telephony.cdma.EriManager$EriDisplayInformation com.android.internal.telephony.cdma.EriManager.getEriDisplayInformation(int,int)
private com.android.internal.telephony.cdma.EriInfo com.android.internal.telephony.cdma.EriManager.getEriInfo(int)
private void com.android.internal.telephony.cdma.EriManager.loadEriFileFromFileSystem()
private void com.android.internal.telephony.cdma.EriManager.loadEriFileFromModem()
private void com.android.internal.telephony.cdma.EriManager.loadEriFileFromXml()
public void com.android.internal.telephony.cdma.EriManager.dispose()
public int com.android.internal.telephony.cdma.EriManager.getCdmaEriIconIndex(int,int)
public int com.android.internal.telephony.cdma.EriManager.getCdmaEriIconMode(int,int)
public java.lang.String com.android.internal.telephony.cdma.EriManager.getCdmaEriText(int,int)
public int com.android.internal.telephony.cdma.EriManager.getEriFileType()
public int com.android.internal.telephony.cdma.EriManager.getEriFileVersion()
public int com.android.internal.telephony.cdma.EriManager.getEriNumberOfEntries()
public boolean com.android.internal.telephony.cdma.EriManager.isEriFileLoaded()
public void com.android.internal.telephony.cdma.EriManager.loadEriFile()
Tracing public com.android.internal.telephony.cdma.EriManager(com.android.internal.telephony.Phone,int)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.NetworkRegistrationManager[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$000 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$100 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$300 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$400 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$402 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$500 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$502 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$602 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$700 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$800 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.access$900 [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.bindService [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.getPackageName [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.logd [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.loge [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.handleMessage [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.isServiceConnected [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.registerForNetworkRegistrationInfoChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.requestNetworkRegistrationInfo [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.unregisterForNetworkRegistrationInfoChanged [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.NetworkRegistrationManager.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
static com.android.internal.telephony.Phone com.android.internal.telephony.NetworkRegistrationManager.access$000(com.android.internal.telephony.NetworkRegistrationManager)
static void com.android.internal.telephony.NetworkRegistrationManager.access$100(com.android.internal.telephony.NetworkRegistrationManager,java.lang.String)
static int com.android.internal.telephony.NetworkRegistrationManager.access$300(com.android.internal.telephony.NetworkRegistrationManager)
static android.telephony.INetworkService com.android.internal.telephony.NetworkRegistrationManager.access$400(com.android.internal.telephony.NetworkRegistrationManager)
static android.telephony.INetworkService com.android.internal.telephony.NetworkRegistrationManager.access$402(com.android.internal.telephony.NetworkRegistrationManager,android.telephony.INetworkService)
static com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient com.android.internal.telephony.NetworkRegistrationManager.access$500(com.android.internal.telephony.NetworkRegistrationManager)
static com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient com.android.internal.telephony.NetworkRegistrationManager.access$502(com.android.internal.telephony.NetworkRegistrationManager,com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient)
static java.lang.String com.android.internal.telephony.NetworkRegistrationManager.access$602(com.android.internal.telephony.NetworkRegistrationManager,java.lang.String)
static java.util.Map com.android.internal.telephony.NetworkRegistrationManager.access$700(com.android.internal.telephony.NetworkRegistrationManager)
static void com.android.internal.telephony.NetworkRegistrationManager.access$800(com.android.internal.telephony.NetworkRegistrationManager,java.lang.String)
static android.os.RegistrantList com.android.internal.telephony.NetworkRegistrationManager.access$900(com.android.internal.telephony.NetworkRegistrationManager)
private void com.android.internal.telephony.NetworkRegistrationManager.bindService()
private java.lang.String com.android.internal.telephony.NetworkRegistrationManager.getPackageName()
private void com.android.internal.telephony.NetworkRegistrationManager.logd(java.lang.String)
private void com.android.internal.telephony.NetworkRegistrationManager.loge(java.lang.String)
public void com.android.internal.telephony.NetworkRegistrationManager.handleMessage(android.os.Message)
public boolean com.android.internal.telephony.NetworkRegistrationManager.isServiceConnected()
public void com.android.internal.telephony.NetworkRegistrationManager.registerForNetworkRegistrationInfoChanged(android.os.Handler,int,java.lang.Object)
public void com.android.internal.telephony.NetworkRegistrationManager.requestNetworkRegistrationInfo(int,android.os.Message)
public void com.android.internal.telephony.NetworkRegistrationManager.unregisterForNetworkRegistrationInfoChanged(android.os.Handler)
Tracing public com.android.internal.telephony.NetworkRegistrationManager(int,com.android.internal.telephony.Phone)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.TelephonyTester$1[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyTester$1.onReceive [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.TelephonyTester$1.$init [1 overload(s)][39;49;00m
[32;01m	Spec: => 
public void com.android.internal.telephony.TelephonyTester$1.onReceive(android.content.Context,android.content.Intent)
Tracing com.android.internal.telephony.TelephonyTester$1(com.android.internal.telephony.TelephonyTester)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.CallStateException[39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallStateException.getError [1 overload(s)][39;49;00m
[31;01mTracing Method : com.android.internal.telephony.CallStateException.$init [3 overload(s)][39;49;00m
[32;01m	Spec: => 
public int com.android.internal.telephony.CallStateException.getError()
Tracing public com.android.internal.telephony.CallStateException()
Tracing public com.android.internal.telephony.CallStateException(int,java.lang.String)
Tracing public com.android.internal.telephony.CallStateException(java.lang.String)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[39;49;00m
[30;01mFound Class => com.android.internal.telephony.ims.RcsMessageQueryHelper[39;49;00m
TypeError: cannot read property 'overloads' of undefined
    at traceMethod (/frida/repl-2.js:96)
    at <anonymous> (/frida/repl-2.js:189)
    at forEach (native)
    at traceClass (/frida/repl-2.js:190)
    at onMatch (/frida/repl-2.js:228)
    at <anonymous> (frida/node_modules/frida-java-bridge/index.js:125)
    at forEach (native)
    at _enumerateLoadedClassesArt (frida/node_modules/frida-java-bridge/index.js:126)
    at enumerateLoadedClasses (frida/node_modules/frida-java-bridge/index.js:67)
    at hook (/frida/repl-2.js:233)
    at <anonymous> (/frida/repl-2.js:254)
    at <anonymous> (frida/node_modules/frida-java-bridge/lib/vm.js:12)
    at _performPendingVmOps (frida/node_modules/frida-java-bridge/index.js:250)
    at <anonymous> (frida/node_modules/frida-java-bridge/index.js:225)
    at <anonymous> (frida/node_modules/frida-java-bridge/lib/vm.js:12)
    at _performPendingVmOpsWhenReady (frida/node_modules/frida-java-bridge/index.js:244)
    at perform (frida/node_modules/frida-java-bridge/index.js:204)
    at main (/frida/repl-2.js:255)
    at apply (native)
    at <anonymous> (frida/runtime/core.js:51)
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
tracerpid replaced: TracerPid:	0
